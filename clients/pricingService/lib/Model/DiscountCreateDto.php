<?php
/**
 * DiscountCreateDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PricingService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DiscountCreateDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DiscountCreateDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DiscountCreateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'timestamp' => '\DateTime',
        'description' => 'string',
        'begin_quantity' => 'float',
        'end_quantity' => 'float',
        'percent' => 'float',
        'value' => 'float',
        'tenant_id' => 'string',
        'enrolment_id' => 'string',
        'discount_list_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'timestamp' => 'date-time',
        'description' => null,
        'begin_quantity' => 'double',
        'end_quantity' => 'double',
        'percent' => 'double',
        'value' => 'double',
        'tenant_id' => null,
        'enrolment_id' => null,
        'discount_list_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'timestamp' => false,
        'description' => true,
        'begin_quantity' => false,
        'end_quantity' => false,
        'percent' => false,
        'value' => false,
        'tenant_id' => true,
        'enrolment_id' => true,
        'discount_list_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'timestamp' => 'timestamp',
        'description' => 'description',
        'begin_quantity' => 'beginQuantity',
        'end_quantity' => 'endQuantity',
        'percent' => 'percent',
        'value' => 'value',
        'tenant_id' => 'tenantId',
        'enrolment_id' => 'enrolmentId',
        'discount_list_id' => 'discountListId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'timestamp' => 'setTimestamp',
        'description' => 'setDescription',
        'begin_quantity' => 'setBeginQuantity',
        'end_quantity' => 'setEndQuantity',
        'percent' => 'setPercent',
        'value' => 'setValue',
        'tenant_id' => 'setTenantId',
        'enrolment_id' => 'setEnrolmentId',
        'discount_list_id' => 'setDiscountListId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'timestamp' => 'getTimestamp',
        'description' => 'getDescription',
        'begin_quantity' => 'getBeginQuantity',
        'end_quantity' => 'getEndQuantity',
        'percent' => 'getPercent',
        'value' => 'getValue',
        'tenant_id' => 'getTenantId',
        'enrolment_id' => 'getEnrolmentId',
        'discount_list_id' => 'getDiscountListId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('begin_quantity', $data ?? [], null);
        $this->setIfExists('end_quantity', $data ?? [], null);
        $this->setIfExists('percent', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('tenant_id', $data ?? [], null);
        $this->setIfExists('enrolment_id', $data ?? [], null);
        $this->setIfExists('discount_list_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['tenant_id']) && (mb_strlen($this->container['tenant_id']) > 36)) {
            $invalidProperties[] = "invalid value for 'tenant_id', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['tenant_id']) && (mb_strlen($this->container['tenant_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'tenant_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['enrolment_id']) && (mb_strlen($this->container['enrolment_id']) > 36)) {
            $invalidProperties[] = "invalid value for 'enrolment_id', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['enrolment_id']) && (mb_strlen($this->container['enrolment_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'enrolment_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['discount_list_id']) && (mb_strlen($this->container['discount_list_id']) > 36)) {
            $invalidProperties[] = "invalid value for 'discount_list_id', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['discount_list_id']) && (mb_strlen($this->container['discount_list_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'discount_list_id', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets begin_quantity
     *
     * @return float|null
     */
    public function getBeginQuantity()
    {
        return $this->container['begin_quantity'];
    }

    /**
     * Sets begin_quantity
     *
     * @param float|null $begin_quantity begin_quantity
     *
     * @return self
     */
    public function setBeginQuantity($begin_quantity)
    {
        if (is_null($begin_quantity)) {
            throw new \InvalidArgumentException('non-nullable begin_quantity cannot be null');
        }
        $this->container['begin_quantity'] = $begin_quantity;

        return $this;
    }

    /**
     * Gets end_quantity
     *
     * @return float|null
     */
    public function getEndQuantity()
    {
        return $this->container['end_quantity'];
    }

    /**
     * Sets end_quantity
     *
     * @param float|null $end_quantity end_quantity
     *
     * @return self
     */
    public function setEndQuantity($end_quantity)
    {
        if (is_null($end_quantity)) {
            throw new \InvalidArgumentException('non-nullable end_quantity cannot be null');
        }
        $this->container['end_quantity'] = $end_quantity;

        return $this;
    }

    /**
     * Gets percent
     *
     * @return float|null
     */
    public function getPercent()
    {
        return $this->container['percent'];
    }

    /**
     * Sets percent
     *
     * @param float|null $percent percent
     *
     * @return self
     */
    public function setPercent($percent)
    {
        if (is_null($percent)) {
            throw new \InvalidArgumentException('non-nullable percent cannot be null');
        }
        $this->container['percent'] = $percent;

        return $this;
    }

    /**
     * Gets value
     *
     * @return float|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param float|null $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string|null
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string|null $tenant_id tenant_id
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        if (is_null($tenant_id)) {
            array_push($this->openAPINullablesSetToNull, 'tenant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tenant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tenant_id) && (mb_strlen($tenant_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $tenant_id when calling DiscountCreateDto., must be smaller than or equal to 36.');
        }
        if (!is_null($tenant_id) && (mb_strlen($tenant_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $tenant_id when calling DiscountCreateDto., must be bigger than or equal to 0.');
        }

        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets enrolment_id
     *
     * @return string|null
     */
    public function getEnrolmentId()
    {
        return $this->container['enrolment_id'];
    }

    /**
     * Sets enrolment_id
     *
     * @param string|null $enrolment_id enrolment_id
     *
     * @return self
     */
    public function setEnrolmentId($enrolment_id)
    {
        if (is_null($enrolment_id)) {
            array_push($this->openAPINullablesSetToNull, 'enrolment_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enrolment_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($enrolment_id) && (mb_strlen($enrolment_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $enrolment_id when calling DiscountCreateDto., must be smaller than or equal to 36.');
        }
        if (!is_null($enrolment_id) && (mb_strlen($enrolment_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $enrolment_id when calling DiscountCreateDto., must be bigger than or equal to 0.');
        }

        $this->container['enrolment_id'] = $enrolment_id;

        return $this;
    }

    /**
     * Gets discount_list_id
     *
     * @return string|null
     */
    public function getDiscountListId()
    {
        return $this->container['discount_list_id'];
    }

    /**
     * Sets discount_list_id
     *
     * @param string|null $discount_list_id discount_list_id
     *
     * @return self
     */
    public function setDiscountListId($discount_list_id)
    {
        if (is_null($discount_list_id)) {
            array_push($this->openAPINullablesSetToNull, 'discount_list_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discount_list_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($discount_list_id) && (mb_strlen($discount_list_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $discount_list_id when calling DiscountCreateDto., must be smaller than or equal to 36.');
        }
        if (!is_null($discount_list_id) && (mb_strlen($discount_list_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $discount_list_id when calling DiscountCreateDto., must be bigger than or equal to 0.');
        }

        $this->container['discount_list_id'] = $discount_list_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


