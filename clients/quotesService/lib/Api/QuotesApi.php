<?php
/**
 * QuotesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * QuotesService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * QuotesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class QuotesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV2QuotesServiceQuotesCountGet' => [
            'application/json',
        ],
        'apiV2QuotesServiceQuotesExtendedGet' => [
            'application/json',
        ],
        'apiV2QuotesServiceQuotesGet' => [
            'application/json',
        ],
        'apiV2QuotesServiceQuotesPost' => [
            'application/json',
            'application/xml',
        ],
        'apiV2QuotesServiceQuotesQuoteIdCalculatePut' => [
            'application/json',
        ],
        'apiV2QuotesServiceQuotesQuoteIdDelete' => [
            'application/json',
        ],
        'apiV2QuotesServiceQuotesQuoteIdLinesCountGet' => [
            'application/json',
        ],
        'apiV2QuotesServiceQuotesQuoteIdLinesGet' => [
            'application/json',
        ],
        'apiV2QuotesServiceQuotesQuoteIdLinesPost' => [
            'application/json',
            'application/xml',
        ],
        'apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut' => [
            'application/json',
        ],
        'apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete' => [
            'application/json',
        ],
        'apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet' => [
            'application/json',
        ],
        'apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut' => [
            'application/json',
            'application/xml',
        ],
        'apiV2QuotesServiceQuotesQuoteIdPut' => [
            'application/json',
            'application/xml',
        ],
        'getQuoteAsync' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV2QuotesServiceQuotesCountGet
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesCountGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\Int32Envelope
     */
    public function apiV2QuotesServiceQuotesCountGet($tenant_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesCountGet'][0])
    {
        list($response) = $this->apiV2QuotesServiceQuotesCountGetWithHttpInfo($tenant_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV2QuotesServiceQuotesCountGetWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesCountGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\Int32Envelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2QuotesServiceQuotesCountGetWithHttpInfo($tenant_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesCountGet'][0])
    {
        $request = $this->apiV2QuotesServiceQuotesCountGetRequest($tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\Int32Envelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Int32Envelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Int32Envelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\Int32Envelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Int32Envelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2QuotesServiceQuotesCountGetAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesCountGetAsync($tenant_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesCountGet'][0])
    {
        return $this->apiV2QuotesServiceQuotesCountGetAsyncWithHttpInfo($tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2QuotesServiceQuotesCountGetAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesCountGetAsyncWithHttpInfo($tenant_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesCountGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Int32Envelope';
        $request = $this->apiV2QuotesServiceQuotesCountGetRequest($tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2QuotesServiceQuotesCountGet'
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2QuotesServiceQuotesCountGetRequest($tenant_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesCountGet'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2QuotesServiceQuotesCountGet'
            );
        }


        $resourcePath = '/api/v2/QuotesService/Quotes/Count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2QuotesServiceQuotesExtendedGet
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesExtendedGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ExtendedQuoteDtoListEnvelope
     */
    public function apiV2QuotesServiceQuotesExtendedGet($tenant_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesExtendedGet'][0])
    {
        list($response) = $this->apiV2QuotesServiceQuotesExtendedGetWithHttpInfo($tenant_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV2QuotesServiceQuotesExtendedGetWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesExtendedGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ExtendedQuoteDtoListEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2QuotesServiceQuotesExtendedGetWithHttpInfo($tenant_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesExtendedGet'][0])
    {
        $request = $this->apiV2QuotesServiceQuotesExtendedGetRequest($tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\ExtendedQuoteDtoListEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ExtendedQuoteDtoListEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExtendedQuoteDtoListEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ExtendedQuoteDtoListEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExtendedQuoteDtoListEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2QuotesServiceQuotesExtendedGetAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesExtendedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesExtendedGetAsync($tenant_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesExtendedGet'][0])
    {
        return $this->apiV2QuotesServiceQuotesExtendedGetAsyncWithHttpInfo($tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2QuotesServiceQuotesExtendedGetAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesExtendedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesExtendedGetAsyncWithHttpInfo($tenant_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesExtendedGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ExtendedQuoteDtoListEnvelope';
        $request = $this->apiV2QuotesServiceQuotesExtendedGetRequest($tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2QuotesServiceQuotesExtendedGet'
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesExtendedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2QuotesServiceQuotesExtendedGetRequest($tenant_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesExtendedGet'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2QuotesServiceQuotesExtendedGet'
            );
        }


        $resourcePath = '/api/v2/QuotesService/Quotes/Extended';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2QuotesServiceQuotesGet
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\QuoteDtoListEnvelope
     */
    public function apiV2QuotesServiceQuotesGet($tenant_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesGet'][0])
    {
        list($response) = $this->apiV2QuotesServiceQuotesGetWithHttpInfo($tenant_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV2QuotesServiceQuotesGetWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\QuoteDtoListEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2QuotesServiceQuotesGetWithHttpInfo($tenant_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesGet'][0])
    {
        $request = $this->apiV2QuotesServiceQuotesGetRequest($tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\QuoteDtoListEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\QuoteDtoListEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\QuoteDtoListEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\QuoteDtoListEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\QuoteDtoListEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2QuotesServiceQuotesGetAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesGetAsync($tenant_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesGet'][0])
    {
        return $this->apiV2QuotesServiceQuotesGetAsyncWithHttpInfo($tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2QuotesServiceQuotesGetAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesGetAsyncWithHttpInfo($tenant_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\QuoteDtoListEnvelope';
        $request = $this->apiV2QuotesServiceQuotesGetRequest($tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2QuotesServiceQuotesGet'
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2QuotesServiceQuotesGetRequest($tenant_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesGet'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2QuotesServiceQuotesGet'
            );
        }


        $resourcePath = '/api/v2/QuotesService/Quotes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2QuotesServiceQuotesPost
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  \OpenAPI\Client\Model\QuoteCreateDto $quote_create_dto quote_create_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope
     */
    public function apiV2QuotesServiceQuotesPost($tenant_id, $quote_create_dto = null, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesPost'][0])
    {
        list($response) = $this->apiV2QuotesServiceQuotesPostWithHttpInfo($tenant_id, $quote_create_dto, $contentType);
        return $response;
    }

    /**
     * Operation apiV2QuotesServiceQuotesPostWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\QuoteCreateDto $quote_create_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2QuotesServiceQuotesPostWithHttpInfo($tenant_id, $quote_create_dto = null, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesPost'][0])
    {
        $request = $this->apiV2QuotesServiceQuotesPostRequest($tenant_id, $quote_create_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\EmptyEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmptyEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmptyEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmptyEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2QuotesServiceQuotesPostAsync
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\QuoteCreateDto $quote_create_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesPostAsync($tenant_id, $quote_create_dto = null, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesPost'][0])
    {
        return $this->apiV2QuotesServiceQuotesPostAsyncWithHttpInfo($tenant_id, $quote_create_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2QuotesServiceQuotesPostAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\QuoteCreateDto $quote_create_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesPostAsyncWithHttpInfo($tenant_id, $quote_create_dto = null, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
        $request = $this->apiV2QuotesServiceQuotesPostRequest($tenant_id, $quote_create_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2QuotesServiceQuotesPost'
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\QuoteCreateDto $quote_create_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2QuotesServiceQuotesPostRequest($tenant_id, $quote_create_dto = null, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesPost'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2QuotesServiceQuotesPost'
            );
        }



        $resourcePath = '/api/v2/QuotesService/Quotes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($quote_create_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($quote_create_dto));
            } else {
                $httpBody = $quote_create_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdCalculatePut
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $quote_id quote_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdCalculatePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope
     */
    public function apiV2QuotesServiceQuotesQuoteIdCalculatePut($tenant_id, $quote_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdCalculatePut'][0])
    {
        list($response) = $this->apiV2QuotesServiceQuotesQuoteIdCalculatePutWithHttpInfo($tenant_id, $quote_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdCalculatePutWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdCalculatePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2QuotesServiceQuotesQuoteIdCalculatePutWithHttpInfo($tenant_id, $quote_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdCalculatePut'][0])
    {
        $request = $this->apiV2QuotesServiceQuotesQuoteIdCalculatePutRequest($tenant_id, $quote_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\EmptyEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmptyEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmptyEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmptyEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdCalculatePutAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdCalculatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesQuoteIdCalculatePutAsync($tenant_id, $quote_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdCalculatePut'][0])
    {
        return $this->apiV2QuotesServiceQuotesQuoteIdCalculatePutAsyncWithHttpInfo($tenant_id, $quote_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdCalculatePutAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdCalculatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesQuoteIdCalculatePutAsyncWithHttpInfo($tenant_id, $quote_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdCalculatePut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
        $request = $this->apiV2QuotesServiceQuotesQuoteIdCalculatePutRequest($tenant_id, $quote_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2QuotesServiceQuotesQuoteIdCalculatePut'
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdCalculatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2QuotesServiceQuotesQuoteIdCalculatePutRequest($tenant_id, $quote_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdCalculatePut'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2QuotesServiceQuotesQuoteIdCalculatePut'
            );
        }

        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling apiV2QuotesServiceQuotesQuoteIdCalculatePut'
            );
        }


        $resourcePath = '/api/v2/QuotesService/Quotes/{quoteId}/Calculate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'quoteId' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdDelete
     *
     * @param  string $quote_id quote_id (required)
     * @param  string $tenant_id tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope
     */
    public function apiV2QuotesServiceQuotesQuoteIdDelete($quote_id, $tenant_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdDelete'][0])
    {
        list($response) = $this->apiV2QuotesServiceQuotesQuoteIdDeleteWithHttpInfo($quote_id, $tenant_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdDeleteWithHttpInfo
     *
     * @param  string $quote_id (required)
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2QuotesServiceQuotesQuoteIdDeleteWithHttpInfo($quote_id, $tenant_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdDelete'][0])
    {
        $request = $this->apiV2QuotesServiceQuotesQuoteIdDeleteRequest($quote_id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\EmptyEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmptyEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmptyEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmptyEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdDeleteAsync
     *
     * @param  string $quote_id (required)
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesQuoteIdDeleteAsync($quote_id, $tenant_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdDelete'][0])
    {
        return $this->apiV2QuotesServiceQuotesQuoteIdDeleteAsyncWithHttpInfo($quote_id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdDeleteAsyncWithHttpInfo
     *
     * @param  string $quote_id (required)
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesQuoteIdDeleteAsyncWithHttpInfo($quote_id, $tenant_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdDelete'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
        $request = $this->apiV2QuotesServiceQuotesQuoteIdDeleteRequest($quote_id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2QuotesServiceQuotesQuoteIdDelete'
     *
     * @param  string $quote_id (required)
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2QuotesServiceQuotesQuoteIdDeleteRequest($quote_id, $tenant_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdDelete'][0])
    {

        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling apiV2QuotesServiceQuotesQuoteIdDelete'
            );
        }

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2QuotesServiceQuotesQuoteIdDelete'
            );
        }


        $resourcePath = '/api/v2/QuotesService/Quotes/{quoteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'quoteId' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesCountGet
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $quote_id quote_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesCountGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\Int32Envelope
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesCountGet($tenant_id, $quote_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesCountGet'][0])
    {
        list($response) = $this->apiV2QuotesServiceQuotesQuoteIdLinesCountGetWithHttpInfo($tenant_id, $quote_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesCountGetWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesCountGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\Int32Envelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesCountGetWithHttpInfo($tenant_id, $quote_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesCountGet'][0])
    {
        $request = $this->apiV2QuotesServiceQuotesQuoteIdLinesCountGetRequest($tenant_id, $quote_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\Int32Envelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Int32Envelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Int32Envelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\Int32Envelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Int32Envelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesCountGetAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesCountGetAsync($tenant_id, $quote_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesCountGet'][0])
    {
        return $this->apiV2QuotesServiceQuotesQuoteIdLinesCountGetAsyncWithHttpInfo($tenant_id, $quote_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesCountGetAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesCountGetAsyncWithHttpInfo($tenant_id, $quote_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesCountGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Int32Envelope';
        $request = $this->apiV2QuotesServiceQuotesQuoteIdLinesCountGetRequest($tenant_id, $quote_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2QuotesServiceQuotesQuoteIdLinesCountGet'
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesCountGetRequest($tenant_id, $quote_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesCountGet'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2QuotesServiceQuotesQuoteIdLinesCountGet'
            );
        }

        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling apiV2QuotesServiceQuotesQuoteIdLinesCountGet'
            );
        }


        $resourcePath = '/api/v2/QuotesService/Quotes/{quoteId}/Lines/Count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'quoteId' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesGet
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $quote_id quote_id (required)
     * @param  string $item_id item_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\QuoteLineDtoListEnvelope
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesGet($tenant_id, $quote_id, $item_id = null, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesGet'][0])
    {
        list($response) = $this->apiV2QuotesServiceQuotesQuoteIdLinesGetWithHttpInfo($tenant_id, $quote_id, $item_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesGetWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $item_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\QuoteLineDtoListEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesGetWithHttpInfo($tenant_id, $quote_id, $item_id = null, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesGet'][0])
    {
        $request = $this->apiV2QuotesServiceQuotesQuoteIdLinesGetRequest($tenant_id, $quote_id, $item_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\QuoteLineDtoListEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\QuoteLineDtoListEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\QuoteLineDtoListEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\QuoteLineDtoListEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\QuoteLineDtoListEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesGetAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $item_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesGetAsync($tenant_id, $quote_id, $item_id = null, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesGet'][0])
    {
        return $this->apiV2QuotesServiceQuotesQuoteIdLinesGetAsyncWithHttpInfo($tenant_id, $quote_id, $item_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesGetAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $item_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesGetAsyncWithHttpInfo($tenant_id, $quote_id, $item_id = null, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\QuoteLineDtoListEnvelope';
        $request = $this->apiV2QuotesServiceQuotesQuoteIdLinesGetRequest($tenant_id, $quote_id, $item_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2QuotesServiceQuotesQuoteIdLinesGet'
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $item_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesGetRequest($tenant_id, $quote_id, $item_id = null, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesGet'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2QuotesServiceQuotesQuoteIdLinesGet'
            );
        }

        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling apiV2QuotesServiceQuotesQuoteIdLinesGet'
            );
        }



        $resourcePath = '/api/v2/QuotesService/Quotes/{quoteId}/Lines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $item_id,
            'itemId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'quoteId' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesPost
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $quote_id quote_id (required)
     * @param  \OpenAPI\Client\Model\QuoteLineCreateDto $quote_line_create_dto quote_line_create_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesPost($tenant_id, $quote_id, $quote_line_create_dto = null, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesPost'][0])
    {
        list($response) = $this->apiV2QuotesServiceQuotesQuoteIdLinesPostWithHttpInfo($tenant_id, $quote_id, $quote_line_create_dto, $contentType);
        return $response;
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesPostWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  \OpenAPI\Client\Model\QuoteLineCreateDto $quote_line_create_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesPostWithHttpInfo($tenant_id, $quote_id, $quote_line_create_dto = null, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesPost'][0])
    {
        $request = $this->apiV2QuotesServiceQuotesQuoteIdLinesPostRequest($tenant_id, $quote_id, $quote_line_create_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\EmptyEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmptyEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmptyEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmptyEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesPostAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  \OpenAPI\Client\Model\QuoteLineCreateDto $quote_line_create_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesPostAsync($tenant_id, $quote_id, $quote_line_create_dto = null, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesPost'][0])
    {
        return $this->apiV2QuotesServiceQuotesQuoteIdLinesPostAsyncWithHttpInfo($tenant_id, $quote_id, $quote_line_create_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesPostAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  \OpenAPI\Client\Model\QuoteLineCreateDto $quote_line_create_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesPostAsyncWithHttpInfo($tenant_id, $quote_id, $quote_line_create_dto = null, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
        $request = $this->apiV2QuotesServiceQuotesQuoteIdLinesPostRequest($tenant_id, $quote_id, $quote_line_create_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2QuotesServiceQuotesQuoteIdLinesPost'
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  \OpenAPI\Client\Model\QuoteLineCreateDto $quote_line_create_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesPostRequest($tenant_id, $quote_id, $quote_line_create_dto = null, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesPost'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2QuotesServiceQuotesQuoteIdLinesPost'
            );
        }

        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling apiV2QuotesServiceQuotesQuoteIdLinesPost'
            );
        }



        $resourcePath = '/api/v2/QuotesService/Quotes/{quoteId}/Lines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'quoteId' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($quote_line_create_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($quote_line_create_dto));
            } else {
                $httpBody = $quote_line_create_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $quote_id quote_id (required)
     * @param  string $quote_line_id quote_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut($tenant_id, $quote_id, $quote_line_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut'][0])
    {
        list($response) = $this->apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePutWithHttpInfo($tenant_id, $quote_id, $quote_line_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePutWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $quote_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePutWithHttpInfo($tenant_id, $quote_id, $quote_line_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut'][0])
    {
        $request = $this->apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePutRequest($tenant_id, $quote_id, $quote_line_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\EmptyEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmptyEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmptyEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmptyEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePutAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $quote_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePutAsync($tenant_id, $quote_id, $quote_line_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut'][0])
    {
        return $this->apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePutAsyncWithHttpInfo($tenant_id, $quote_id, $quote_line_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePutAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $quote_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePutAsyncWithHttpInfo($tenant_id, $quote_id, $quote_line_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
        $request = $this->apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePutRequest($tenant_id, $quote_id, $quote_line_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut'
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $quote_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePutRequest($tenant_id, $quote_id, $quote_line_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut'
            );
        }

        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut'
            );
        }

        // verify the required parameter 'quote_line_id' is set
        if ($quote_line_id === null || (is_array($quote_line_id) && count($quote_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_line_id when calling apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut'
            );
        }


        $resourcePath = '/api/v2/QuotesService/Quotes/{quoteId}/Lines/{quoteLineId}/Calculate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'quoteId' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'quoteLineId' . '}',
                ObjectSerializer::toPathValue($quote_line_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $quote_id quote_id (required)
     * @param  string $quote_line_id quote_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete($tenant_id, $quote_id, $quote_line_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete'][0])
    {
        list($response) = $this->apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDeleteWithHttpInfo($tenant_id, $quote_id, $quote_line_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDeleteWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $quote_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDeleteWithHttpInfo($tenant_id, $quote_id, $quote_line_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete'][0])
    {
        $request = $this->apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDeleteRequest($tenant_id, $quote_id, $quote_line_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\EmptyEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmptyEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmptyEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmptyEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDeleteAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $quote_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDeleteAsync($tenant_id, $quote_id, $quote_line_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete'][0])
    {
        return $this->apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDeleteAsyncWithHttpInfo($tenant_id, $quote_id, $quote_line_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDeleteAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $quote_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDeleteAsyncWithHttpInfo($tenant_id, $quote_id, $quote_line_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
        $request = $this->apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDeleteRequest($tenant_id, $quote_id, $quote_line_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete'
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $quote_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDeleteRequest($tenant_id, $quote_id, $quote_line_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete'
            );
        }

        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete'
            );
        }

        // verify the required parameter 'quote_line_id' is set
        if ($quote_line_id === null || (is_array($quote_line_id) && count($quote_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_line_id when calling apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete'
            );
        }


        $resourcePath = '/api/v2/QuotesService/Quotes/{quoteId}/Lines/{quoteLineId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'quoteId' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'quoteLineId' . '}',
                ObjectSerializer::toPathValue($quote_line_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $quote_id quote_id (required)
     * @param  string $quote_line_id quote_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\QuoteLineDtoEnvelope
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet($tenant_id, $quote_id, $quote_line_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet'][0])
    {
        list($response) = $this->apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGetWithHttpInfo($tenant_id, $quote_id, $quote_line_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGetWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $quote_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\QuoteLineDtoEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGetWithHttpInfo($tenant_id, $quote_id, $quote_line_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet'][0])
    {
        $request = $this->apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGetRequest($tenant_id, $quote_id, $quote_line_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\QuoteLineDtoEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\QuoteLineDtoEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\QuoteLineDtoEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\QuoteLineDtoEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\QuoteLineDtoEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGetAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $quote_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGetAsync($tenant_id, $quote_id, $quote_line_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet'][0])
    {
        return $this->apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGetAsyncWithHttpInfo($tenant_id, $quote_id, $quote_line_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGetAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $quote_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGetAsyncWithHttpInfo($tenant_id, $quote_id, $quote_line_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\QuoteLineDtoEnvelope';
        $request = $this->apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGetRequest($tenant_id, $quote_id, $quote_line_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet'
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $quote_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGetRequest($tenant_id, $quote_id, $quote_line_id, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet'
            );
        }

        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet'
            );
        }

        // verify the required parameter 'quote_line_id' is set
        if ($quote_line_id === null || (is_array($quote_line_id) && count($quote_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_line_id when calling apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet'
            );
        }


        $resourcePath = '/api/v2/QuotesService/Quotes/{quoteId}/Lines/{quoteLineId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'quoteId' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'quoteLineId' . '}',
                ObjectSerializer::toPathValue($quote_line_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $quote_id quote_id (required)
     * @param  string $quote_line_id quote_line_id (required)
     * @param  \OpenAPI\Client\Model\QuoteLineUpdateDto $quote_line_update_dto quote_line_update_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut($tenant_id, $quote_id, $quote_line_id, $quote_line_update_dto = null, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut'][0])
    {
        list($response) = $this->apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPutWithHttpInfo($tenant_id, $quote_id, $quote_line_id, $quote_line_update_dto, $contentType);
        return $response;
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPutWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $quote_line_id (required)
     * @param  \OpenAPI\Client\Model\QuoteLineUpdateDto $quote_line_update_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPutWithHttpInfo($tenant_id, $quote_id, $quote_line_id, $quote_line_update_dto = null, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut'][0])
    {
        $request = $this->apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPutRequest($tenant_id, $quote_id, $quote_line_id, $quote_line_update_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\EmptyEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmptyEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmptyEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmptyEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPutAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $quote_line_id (required)
     * @param  \OpenAPI\Client\Model\QuoteLineUpdateDto $quote_line_update_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPutAsync($tenant_id, $quote_id, $quote_line_id, $quote_line_update_dto = null, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut'][0])
    {
        return $this->apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPutAsyncWithHttpInfo($tenant_id, $quote_id, $quote_line_id, $quote_line_update_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPutAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $quote_line_id (required)
     * @param  \OpenAPI\Client\Model\QuoteLineUpdateDto $quote_line_update_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPutAsyncWithHttpInfo($tenant_id, $quote_id, $quote_line_id, $quote_line_update_dto = null, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
        $request = $this->apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPutRequest($tenant_id, $quote_id, $quote_line_id, $quote_line_update_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut'
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $quote_line_id (required)
     * @param  \OpenAPI\Client\Model\QuoteLineUpdateDto $quote_line_update_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPutRequest($tenant_id, $quote_id, $quote_line_id, $quote_line_update_dto = null, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut'
            );
        }

        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut'
            );
        }

        // verify the required parameter 'quote_line_id' is set
        if ($quote_line_id === null || (is_array($quote_line_id) && count($quote_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_line_id when calling apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut'
            );
        }



        $resourcePath = '/api/v2/QuotesService/Quotes/{quoteId}/Lines/{quoteLineId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'quoteId' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'quoteLineId' . '}',
                ObjectSerializer::toPathValue($quote_line_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($quote_line_update_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($quote_line_update_dto));
            } else {
                $httpBody = $quote_line_update_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdPut
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $quote_id quote_id (required)
     * @param  \OpenAPI\Client\Model\QuoteUpdateDto $quote_update_dto quote_update_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope
     */
    public function apiV2QuotesServiceQuotesQuoteIdPut($tenant_id, $quote_id, $quote_update_dto = null, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdPut'][0])
    {
        list($response) = $this->apiV2QuotesServiceQuotesQuoteIdPutWithHttpInfo($tenant_id, $quote_id, $quote_update_dto, $contentType);
        return $response;
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdPutWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  \OpenAPI\Client\Model\QuoteUpdateDto $quote_update_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2QuotesServiceQuotesQuoteIdPutWithHttpInfo($tenant_id, $quote_id, $quote_update_dto = null, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdPut'][0])
    {
        $request = $this->apiV2QuotesServiceQuotesQuoteIdPutRequest($tenant_id, $quote_id, $quote_update_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\EmptyEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmptyEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmptyEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmptyEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdPutAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  \OpenAPI\Client\Model\QuoteUpdateDto $quote_update_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesQuoteIdPutAsync($tenant_id, $quote_id, $quote_update_dto = null, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdPut'][0])
    {
        return $this->apiV2QuotesServiceQuotesQuoteIdPutAsyncWithHttpInfo($tenant_id, $quote_id, $quote_update_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2QuotesServiceQuotesQuoteIdPutAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  \OpenAPI\Client\Model\QuoteUpdateDto $quote_update_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2QuotesServiceQuotesQuoteIdPutAsyncWithHttpInfo($tenant_id, $quote_id, $quote_update_dto = null, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
        $request = $this->apiV2QuotesServiceQuotesQuoteIdPutRequest($tenant_id, $quote_id, $quote_update_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2QuotesServiceQuotesQuoteIdPut'
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  \OpenAPI\Client\Model\QuoteUpdateDto $quote_update_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2QuotesServiceQuotesQuoteIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2QuotesServiceQuotesQuoteIdPutRequest($tenant_id, $quote_id, $quote_update_dto = null, string $contentType = self::contentTypes['apiV2QuotesServiceQuotesQuoteIdPut'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2QuotesServiceQuotesQuoteIdPut'
            );
        }

        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling apiV2QuotesServiceQuotesQuoteIdPut'
            );
        }



        $resourcePath = '/api/v2/QuotesService/Quotes/{quoteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'quoteId' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($quote_update_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($quote_update_dto));
            } else {
                $httpBody = $quote_update_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQuoteAsync
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $quote_id quote_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getQuoteAsync'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\QuoteDtoEnvelope
     */
    public function getQuoteAsync($tenant_id, $quote_id, string $contentType = self::contentTypes['getQuoteAsync'][0])
    {
        list($response) = $this->getQuoteAsyncWithHttpInfo($tenant_id, $quote_id, $contentType);
        return $response;
    }

    /**
     * Operation getQuoteAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getQuoteAsync'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\QuoteDtoEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuoteAsyncWithHttpInfo($tenant_id, $quote_id, string $contentType = self::contentTypes['getQuoteAsync'][0])
    {
        $request = $this->getQuoteAsyncRequest($tenant_id, $quote_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\QuoteDtoEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\QuoteDtoEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\QuoteDtoEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\QuoteDtoEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\QuoteDtoEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQuoteAsyncAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getQuoteAsync'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuoteAsyncAsync($tenant_id, $quote_id, string $contentType = self::contentTypes['getQuoteAsync'][0])
    {
        return $this->getQuoteAsyncAsyncWithHttpInfo($tenant_id, $quote_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQuoteAsyncAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getQuoteAsync'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuoteAsyncAsyncWithHttpInfo($tenant_id, $quote_id, string $contentType = self::contentTypes['getQuoteAsync'][0])
    {
        $returnType = '\OpenAPI\Client\Model\QuoteDtoEnvelope';
        $request = $this->getQuoteAsyncRequest($tenant_id, $quote_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQuoteAsync'
     *
     * @param  string $tenant_id (required)
     * @param  string $quote_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getQuoteAsync'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getQuoteAsyncRequest($tenant_id, $quote_id, string $contentType = self::contentTypes['getQuoteAsync'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling getQuoteAsync'
            );
        }

        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling getQuoteAsync'
            );
        }


        $resourcePath = '/api/v2/QuotesService/Quotes/{quoteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'quoteId' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
