<?php
/**
 * TenantDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * InvoicingService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TenantDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TenantDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TenantDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'timestamp' => '\DateTime',
        'qualified_name' => 'string',
        'tax_id' => 'string',
        'about' => 'string',
        'wallet_id' => 'string',
        'social_feed_id' => 'string',
        'business_industry_id' => 'string',
        'business_segment_id' => 'string',
        'social_profile_id' => 'string',
        'language_id' => 'string',
        'name' => 'string',
        'duns' => 'string',
        'slogan' => 'string',
        'legal_name' => 'string',
        'cover_url' => 'string',
        'avatar_url' => 'string',
        'cart_id' => 'string',
        'currency_id' => 'string',
        'timezone_id' => 'string',
        'country_id' => 'string',
        'state_id' => 'string',
        'city_id' => 'string',
        'email' => 'string',
        'phone' => 'string',
        'web_url' => 'string',
        'facebook_url' => 'string',
        'twitter_url' => 'string',
        'git_hub_url' => 'string',
        'linked_in_url' => 'string',
        'instagram_url' => 'string',
        'you_tube_url' => 'string',
        'whats_app_number' => 'string',
        'support_phone_number' => 'string',
        'verified' => 'bool',
        'business_name' => 'string',
        'business_legal_name' => 'string',
        'twitter_username' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'timestamp' => 'date-time',
        'qualified_name' => null,
        'tax_id' => null,
        'about' => null,
        'wallet_id' => null,
        'social_feed_id' => null,
        'business_industry_id' => null,
        'business_segment_id' => null,
        'social_profile_id' => null,
        'language_id' => null,
        'name' => null,
        'duns' => null,
        'slogan' => null,
        'legal_name' => null,
        'cover_url' => null,
        'avatar_url' => null,
        'cart_id' => null,
        'currency_id' => null,
        'timezone_id' => null,
        'country_id' => null,
        'state_id' => null,
        'city_id' => null,
        'email' => null,
        'phone' => null,
        'web_url' => null,
        'facebook_url' => null,
        'twitter_url' => null,
        'git_hub_url' => null,
        'linked_in_url' => null,
        'instagram_url' => null,
        'you_tube_url' => null,
        'whats_app_number' => null,
        'support_phone_number' => null,
        'verified' => null,
        'business_name' => null,
        'business_legal_name' => null,
        'twitter_username' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'timestamp' => true,
        'qualified_name' => true,
        'tax_id' => true,
        'about' => true,
        'wallet_id' => true,
        'social_feed_id' => true,
        'business_industry_id' => true,
        'business_segment_id' => true,
        'social_profile_id' => true,
        'language_id' => true,
        'name' => true,
        'duns' => true,
        'slogan' => true,
        'legal_name' => true,
        'cover_url' => true,
        'avatar_url' => true,
        'cart_id' => true,
        'currency_id' => true,
        'timezone_id' => true,
        'country_id' => true,
        'state_id' => true,
        'city_id' => true,
        'email' => true,
        'phone' => true,
        'web_url' => true,
        'facebook_url' => true,
        'twitter_url' => true,
        'git_hub_url' => true,
        'linked_in_url' => true,
        'instagram_url' => true,
        'you_tube_url' => true,
        'whats_app_number' => true,
        'support_phone_number' => true,
        'verified' => false,
        'business_name' => true,
        'business_legal_name' => true,
        'twitter_username' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'timestamp' => 'timestamp',
        'qualified_name' => 'qualifiedName',
        'tax_id' => 'taxId',
        'about' => 'about',
        'wallet_id' => 'walletId',
        'social_feed_id' => 'socialFeedId',
        'business_industry_id' => 'businessIndustryId',
        'business_segment_id' => 'businessSegmentId',
        'social_profile_id' => 'socialProfileId',
        'language_id' => 'languageId',
        'name' => 'name',
        'duns' => 'duns',
        'slogan' => 'slogan',
        'legal_name' => 'legalName',
        'cover_url' => 'coverUrl',
        'avatar_url' => 'avatarUrl',
        'cart_id' => 'cartId',
        'currency_id' => 'currencyId',
        'timezone_id' => 'timezoneId',
        'country_id' => 'countryId',
        'state_id' => 'stateId',
        'city_id' => 'cityId',
        'email' => 'email',
        'phone' => 'phone',
        'web_url' => 'webUrl',
        'facebook_url' => 'facebookUrl',
        'twitter_url' => 'twitterUrl',
        'git_hub_url' => 'gitHubUrl',
        'linked_in_url' => 'linkedInUrl',
        'instagram_url' => 'instagramUrl',
        'you_tube_url' => 'youTubeUrl',
        'whats_app_number' => 'whatsAppNumber',
        'support_phone_number' => 'supportPhoneNumber',
        'verified' => 'verified',
        'business_name' => 'businessName',
        'business_legal_name' => 'businessLegalName',
        'twitter_username' => 'twitterUsername'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'timestamp' => 'setTimestamp',
        'qualified_name' => 'setQualifiedName',
        'tax_id' => 'setTaxId',
        'about' => 'setAbout',
        'wallet_id' => 'setWalletId',
        'social_feed_id' => 'setSocialFeedId',
        'business_industry_id' => 'setBusinessIndustryId',
        'business_segment_id' => 'setBusinessSegmentId',
        'social_profile_id' => 'setSocialProfileId',
        'language_id' => 'setLanguageId',
        'name' => 'setName',
        'duns' => 'setDuns',
        'slogan' => 'setSlogan',
        'legal_name' => 'setLegalName',
        'cover_url' => 'setCoverUrl',
        'avatar_url' => 'setAvatarUrl',
        'cart_id' => 'setCartId',
        'currency_id' => 'setCurrencyId',
        'timezone_id' => 'setTimezoneId',
        'country_id' => 'setCountryId',
        'state_id' => 'setStateId',
        'city_id' => 'setCityId',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'web_url' => 'setWebUrl',
        'facebook_url' => 'setFacebookUrl',
        'twitter_url' => 'setTwitterUrl',
        'git_hub_url' => 'setGitHubUrl',
        'linked_in_url' => 'setLinkedInUrl',
        'instagram_url' => 'setInstagramUrl',
        'you_tube_url' => 'setYouTubeUrl',
        'whats_app_number' => 'setWhatsAppNumber',
        'support_phone_number' => 'setSupportPhoneNumber',
        'verified' => 'setVerified',
        'business_name' => 'setBusinessName',
        'business_legal_name' => 'setBusinessLegalName',
        'twitter_username' => 'setTwitterUsername'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'timestamp' => 'getTimestamp',
        'qualified_name' => 'getQualifiedName',
        'tax_id' => 'getTaxId',
        'about' => 'getAbout',
        'wallet_id' => 'getWalletId',
        'social_feed_id' => 'getSocialFeedId',
        'business_industry_id' => 'getBusinessIndustryId',
        'business_segment_id' => 'getBusinessSegmentId',
        'social_profile_id' => 'getSocialProfileId',
        'language_id' => 'getLanguageId',
        'name' => 'getName',
        'duns' => 'getDuns',
        'slogan' => 'getSlogan',
        'legal_name' => 'getLegalName',
        'cover_url' => 'getCoverUrl',
        'avatar_url' => 'getAvatarUrl',
        'cart_id' => 'getCartId',
        'currency_id' => 'getCurrencyId',
        'timezone_id' => 'getTimezoneId',
        'country_id' => 'getCountryId',
        'state_id' => 'getStateId',
        'city_id' => 'getCityId',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'web_url' => 'getWebUrl',
        'facebook_url' => 'getFacebookUrl',
        'twitter_url' => 'getTwitterUrl',
        'git_hub_url' => 'getGitHubUrl',
        'linked_in_url' => 'getLinkedInUrl',
        'instagram_url' => 'getInstagramUrl',
        'you_tube_url' => 'getYouTubeUrl',
        'whats_app_number' => 'getWhatsAppNumber',
        'support_phone_number' => 'getSupportPhoneNumber',
        'verified' => 'getVerified',
        'business_name' => 'getBusinessName',
        'business_legal_name' => 'getBusinessLegalName',
        'twitter_username' => 'getTwitterUsername'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('qualified_name', $data ?? [], null);
        $this->setIfExists('tax_id', $data ?? [], null);
        $this->setIfExists('about', $data ?? [], null);
        $this->setIfExists('wallet_id', $data ?? [], null);
        $this->setIfExists('social_feed_id', $data ?? [], null);
        $this->setIfExists('business_industry_id', $data ?? [], null);
        $this->setIfExists('business_segment_id', $data ?? [], null);
        $this->setIfExists('social_profile_id', $data ?? [], null);
        $this->setIfExists('language_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('duns', $data ?? [], null);
        $this->setIfExists('slogan', $data ?? [], null);
        $this->setIfExists('legal_name', $data ?? [], null);
        $this->setIfExists('cover_url', $data ?? [], null);
        $this->setIfExists('avatar_url', $data ?? [], null);
        $this->setIfExists('cart_id', $data ?? [], null);
        $this->setIfExists('currency_id', $data ?? [], null);
        $this->setIfExists('timezone_id', $data ?? [], null);
        $this->setIfExists('country_id', $data ?? [], null);
        $this->setIfExists('state_id', $data ?? [], null);
        $this->setIfExists('city_id', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('web_url', $data ?? [], null);
        $this->setIfExists('facebook_url', $data ?? [], null);
        $this->setIfExists('twitter_url', $data ?? [], null);
        $this->setIfExists('git_hub_url', $data ?? [], null);
        $this->setIfExists('linked_in_url', $data ?? [], null);
        $this->setIfExists('instagram_url', $data ?? [], null);
        $this->setIfExists('you_tube_url', $data ?? [], null);
        $this->setIfExists('whats_app_number', $data ?? [], null);
        $this->setIfExists('support_phone_number', $data ?? [], null);
        $this->setIfExists('verified', $data ?? [], null);
        $this->setIfExists('business_name', $data ?? [], null);
        $this->setIfExists('business_legal_name', $data ?? [], null);
        $this->setIfExists('twitter_username', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets qualified_name
     *
     * @return string|null
     */
    public function getQualifiedName()
    {
        return $this->container['qualified_name'];
    }

    /**
     * Sets qualified_name
     *
     * @param string|null $qualified_name qualified_name
     *
     * @return self
     */
    public function setQualifiedName($qualified_name)
    {
        if (is_null($qualified_name)) {
            array_push($this->openAPINullablesSetToNull, 'qualified_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('qualified_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['qualified_name'] = $qualified_name;

        return $this;
    }

    /**
     * Gets tax_id
     *
     * @return string|null
     */
    public function getTaxId()
    {
        return $this->container['tax_id'];
    }

    /**
     * Sets tax_id
     *
     * @param string|null $tax_id tax_id
     *
     * @return self
     */
    public function setTaxId($tax_id)
    {
        if (is_null($tax_id)) {
            array_push($this->openAPINullablesSetToNull, 'tax_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tax_id'] = $tax_id;

        return $this;
    }

    /**
     * Gets about
     *
     * @return string|null
     */
    public function getAbout()
    {
        return $this->container['about'];
    }

    /**
     * Sets about
     *
     * @param string|null $about about
     *
     * @return self
     */
    public function setAbout($about)
    {
        if (is_null($about)) {
            array_push($this->openAPINullablesSetToNull, 'about');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('about', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['about'] = $about;

        return $this;
    }

    /**
     * Gets wallet_id
     *
     * @return string|null
     */
    public function getWalletId()
    {
        return $this->container['wallet_id'];
    }

    /**
     * Sets wallet_id
     *
     * @param string|null $wallet_id wallet_id
     *
     * @return self
     */
    public function setWalletId($wallet_id)
    {
        if (is_null($wallet_id)) {
            array_push($this->openAPINullablesSetToNull, 'wallet_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('wallet_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['wallet_id'] = $wallet_id;

        return $this;
    }

    /**
     * Gets social_feed_id
     *
     * @return string|null
     */
    public function getSocialFeedId()
    {
        return $this->container['social_feed_id'];
    }

    /**
     * Sets social_feed_id
     *
     * @param string|null $social_feed_id social_feed_id
     *
     * @return self
     */
    public function setSocialFeedId($social_feed_id)
    {
        if (is_null($social_feed_id)) {
            array_push($this->openAPINullablesSetToNull, 'social_feed_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('social_feed_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['social_feed_id'] = $social_feed_id;

        return $this;
    }

    /**
     * Gets business_industry_id
     *
     * @return string|null
     */
    public function getBusinessIndustryId()
    {
        return $this->container['business_industry_id'];
    }

    /**
     * Sets business_industry_id
     *
     * @param string|null $business_industry_id business_industry_id
     *
     * @return self
     */
    public function setBusinessIndustryId($business_industry_id)
    {
        if (is_null($business_industry_id)) {
            array_push($this->openAPINullablesSetToNull, 'business_industry_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_industry_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_industry_id'] = $business_industry_id;

        return $this;
    }

    /**
     * Gets business_segment_id
     *
     * @return string|null
     */
    public function getBusinessSegmentId()
    {
        return $this->container['business_segment_id'];
    }

    /**
     * Sets business_segment_id
     *
     * @param string|null $business_segment_id business_segment_id
     *
     * @return self
     */
    public function setBusinessSegmentId($business_segment_id)
    {
        if (is_null($business_segment_id)) {
            array_push($this->openAPINullablesSetToNull, 'business_segment_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_segment_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_segment_id'] = $business_segment_id;

        return $this;
    }

    /**
     * Gets social_profile_id
     *
     * @return string|null
     */
    public function getSocialProfileId()
    {
        return $this->container['social_profile_id'];
    }

    /**
     * Sets social_profile_id
     *
     * @param string|null $social_profile_id social_profile_id
     *
     * @return self
     */
    public function setSocialProfileId($social_profile_id)
    {
        if (is_null($social_profile_id)) {
            array_push($this->openAPINullablesSetToNull, 'social_profile_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('social_profile_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['social_profile_id'] = $social_profile_id;

        return $this;
    }

    /**
     * Gets language_id
     *
     * @return string|null
     */
    public function getLanguageId()
    {
        return $this->container['language_id'];
    }

    /**
     * Sets language_id
     *
     * @param string|null $language_id language_id
     *
     * @return self
     */
    public function setLanguageId($language_id)
    {
        if (is_null($language_id)) {
            array_push($this->openAPINullablesSetToNull, 'language_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('language_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['language_id'] = $language_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets duns
     *
     * @return string|null
     */
    public function getDuns()
    {
        return $this->container['duns'];
    }

    /**
     * Sets duns
     *
     * @param string|null $duns duns
     *
     * @return self
     */
    public function setDuns($duns)
    {
        if (is_null($duns)) {
            array_push($this->openAPINullablesSetToNull, 'duns');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('duns', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['duns'] = $duns;

        return $this;
    }

    /**
     * Gets slogan
     *
     * @return string|null
     */
    public function getSlogan()
    {
        return $this->container['slogan'];
    }

    /**
     * Sets slogan
     *
     * @param string|null $slogan slogan
     *
     * @return self
     */
    public function setSlogan($slogan)
    {
        if (is_null($slogan)) {
            array_push($this->openAPINullablesSetToNull, 'slogan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('slogan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['slogan'] = $slogan;

        return $this;
    }

    /**
     * Gets legal_name
     *
     * @return string|null
     */
    public function getLegalName()
    {
        return $this->container['legal_name'];
    }

    /**
     * Sets legal_name
     *
     * @param string|null $legal_name legal_name
     *
     * @return self
     */
    public function setLegalName($legal_name)
    {
        if (is_null($legal_name)) {
            array_push($this->openAPINullablesSetToNull, 'legal_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legal_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['legal_name'] = $legal_name;

        return $this;
    }

    /**
     * Gets cover_url
     *
     * @return string|null
     */
    public function getCoverUrl()
    {
        return $this->container['cover_url'];
    }

    /**
     * Sets cover_url
     *
     * @param string|null $cover_url cover_url
     *
     * @return self
     */
    public function setCoverUrl($cover_url)
    {
        if (is_null($cover_url)) {
            array_push($this->openAPINullablesSetToNull, 'cover_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cover_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cover_url'] = $cover_url;

        return $this;
    }

    /**
     * Gets avatar_url
     *
     * @return string|null
     */
    public function getAvatarUrl()
    {
        return $this->container['avatar_url'];
    }

    /**
     * Sets avatar_url
     *
     * @param string|null $avatar_url avatar_url
     *
     * @return self
     */
    public function setAvatarUrl($avatar_url)
    {
        if (is_null($avatar_url)) {
            array_push($this->openAPINullablesSetToNull, 'avatar_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avatar_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avatar_url'] = $avatar_url;

        return $this;
    }

    /**
     * Gets cart_id
     *
     * @return string|null
     */
    public function getCartId()
    {
        return $this->container['cart_id'];
    }

    /**
     * Sets cart_id
     *
     * @param string|null $cart_id cart_id
     *
     * @return self
     */
    public function setCartId($cart_id)
    {
        if (is_null($cart_id)) {
            array_push($this->openAPINullablesSetToNull, 'cart_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cart_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cart_id'] = $cart_id;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string|null
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string|null $currency_id currency_id
     *
     * @return self
     */
    public function setCurrencyId($currency_id)
    {
        if (is_null($currency_id)) {
            array_push($this->openAPINullablesSetToNull, 'currency_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets timezone_id
     *
     * @return string|null
     */
    public function getTimezoneId()
    {
        return $this->container['timezone_id'];
    }

    /**
     * Sets timezone_id
     *
     * @param string|null $timezone_id timezone_id
     *
     * @return self
     */
    public function setTimezoneId($timezone_id)
    {
        if (is_null($timezone_id)) {
            array_push($this->openAPINullablesSetToNull, 'timezone_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timezone_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timezone_id'] = $timezone_id;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return string|null
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param string|null $country_id country_id
     *
     * @return self
     */
    public function setCountryId($country_id)
    {
        if (is_null($country_id)) {
            array_push($this->openAPINullablesSetToNull, 'country_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets state_id
     *
     * @return string|null
     */
    public function getStateId()
    {
        return $this->container['state_id'];
    }

    /**
     * Sets state_id
     *
     * @param string|null $state_id state_id
     *
     * @return self
     */
    public function setStateId($state_id)
    {
        if (is_null($state_id)) {
            array_push($this->openAPINullablesSetToNull, 'state_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('state_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['state_id'] = $state_id;

        return $this;
    }

    /**
     * Gets city_id
     *
     * @return string|null
     */
    public function getCityId()
    {
        return $this->container['city_id'];
    }

    /**
     * Sets city_id
     *
     * @param string|null $city_id city_id
     *
     * @return self
     */
    public function setCityId($city_id)
    {
        if (is_null($city_id)) {
            array_push($this->openAPINullablesSetToNull, 'city_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['city_id'] = $city_id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            array_push($this->openAPINullablesSetToNull, 'phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets web_url
     *
     * @return string|null
     */
    public function getWebUrl()
    {
        return $this->container['web_url'];
    }

    /**
     * Sets web_url
     *
     * @param string|null $web_url web_url
     *
     * @return self
     */
    public function setWebUrl($web_url)
    {
        if (is_null($web_url)) {
            array_push($this->openAPINullablesSetToNull, 'web_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('web_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['web_url'] = $web_url;

        return $this;
    }

    /**
     * Gets facebook_url
     *
     * @return string|null
     */
    public function getFacebookUrl()
    {
        return $this->container['facebook_url'];
    }

    /**
     * Sets facebook_url
     *
     * @param string|null $facebook_url facebook_url
     *
     * @return self
     */
    public function setFacebookUrl($facebook_url)
    {
        if (is_null($facebook_url)) {
            array_push($this->openAPINullablesSetToNull, 'facebook_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('facebook_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['facebook_url'] = $facebook_url;

        return $this;
    }

    /**
     * Gets twitter_url
     *
     * @return string|null
     */
    public function getTwitterUrl()
    {
        return $this->container['twitter_url'];
    }

    /**
     * Sets twitter_url
     *
     * @param string|null $twitter_url twitter_url
     *
     * @return self
     */
    public function setTwitterUrl($twitter_url)
    {
        if (is_null($twitter_url)) {
            array_push($this->openAPINullablesSetToNull, 'twitter_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('twitter_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['twitter_url'] = $twitter_url;

        return $this;
    }

    /**
     * Gets git_hub_url
     *
     * @return string|null
     */
    public function getGitHubUrl()
    {
        return $this->container['git_hub_url'];
    }

    /**
     * Sets git_hub_url
     *
     * @param string|null $git_hub_url git_hub_url
     *
     * @return self
     */
    public function setGitHubUrl($git_hub_url)
    {
        if (is_null($git_hub_url)) {
            array_push($this->openAPINullablesSetToNull, 'git_hub_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('git_hub_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['git_hub_url'] = $git_hub_url;

        return $this;
    }

    /**
     * Gets linked_in_url
     *
     * @return string|null
     */
    public function getLinkedInUrl()
    {
        return $this->container['linked_in_url'];
    }

    /**
     * Sets linked_in_url
     *
     * @param string|null $linked_in_url linked_in_url
     *
     * @return self
     */
    public function setLinkedInUrl($linked_in_url)
    {
        if (is_null($linked_in_url)) {
            array_push($this->openAPINullablesSetToNull, 'linked_in_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('linked_in_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['linked_in_url'] = $linked_in_url;

        return $this;
    }

    /**
     * Gets instagram_url
     *
     * @return string|null
     */
    public function getInstagramUrl()
    {
        return $this->container['instagram_url'];
    }

    /**
     * Sets instagram_url
     *
     * @param string|null $instagram_url instagram_url
     *
     * @return self
     */
    public function setInstagramUrl($instagram_url)
    {
        if (is_null($instagram_url)) {
            array_push($this->openAPINullablesSetToNull, 'instagram_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('instagram_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['instagram_url'] = $instagram_url;

        return $this;
    }

    /**
     * Gets you_tube_url
     *
     * @return string|null
     */
    public function getYouTubeUrl()
    {
        return $this->container['you_tube_url'];
    }

    /**
     * Sets you_tube_url
     *
     * @param string|null $you_tube_url you_tube_url
     *
     * @return self
     */
    public function setYouTubeUrl($you_tube_url)
    {
        if (is_null($you_tube_url)) {
            array_push($this->openAPINullablesSetToNull, 'you_tube_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('you_tube_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['you_tube_url'] = $you_tube_url;

        return $this;
    }

    /**
     * Gets whats_app_number
     *
     * @return string|null
     */
    public function getWhatsAppNumber()
    {
        return $this->container['whats_app_number'];
    }

    /**
     * Sets whats_app_number
     *
     * @param string|null $whats_app_number whats_app_number
     *
     * @return self
     */
    public function setWhatsAppNumber($whats_app_number)
    {
        if (is_null($whats_app_number)) {
            array_push($this->openAPINullablesSetToNull, 'whats_app_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('whats_app_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['whats_app_number'] = $whats_app_number;

        return $this;
    }

    /**
     * Gets support_phone_number
     *
     * @return string|null
     */
    public function getSupportPhoneNumber()
    {
        return $this->container['support_phone_number'];
    }

    /**
     * Sets support_phone_number
     *
     * @param string|null $support_phone_number support_phone_number
     *
     * @return self
     */
    public function setSupportPhoneNumber($support_phone_number)
    {
        if (is_null($support_phone_number)) {
            array_push($this->openAPINullablesSetToNull, 'support_phone_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('support_phone_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['support_phone_number'] = $support_phone_number;

        return $this;
    }

    /**
     * Gets verified
     *
     * @return bool|null
     */
    public function getVerified()
    {
        return $this->container['verified'];
    }

    /**
     * Sets verified
     *
     * @param bool|null $verified verified
     *
     * @return self
     */
    public function setVerified($verified)
    {
        if (is_null($verified)) {
            throw new \InvalidArgumentException('non-nullable verified cannot be null');
        }
        $this->container['verified'] = $verified;

        return $this;
    }

    /**
     * Gets business_name
     *
     * @return string|null
     */
    public function getBusinessName()
    {
        return $this->container['business_name'];
    }

    /**
     * Sets business_name
     *
     * @param string|null $business_name business_name
     *
     * @return self
     */
    public function setBusinessName($business_name)
    {
        if (is_null($business_name)) {
            array_push($this->openAPINullablesSetToNull, 'business_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_name'] = $business_name;

        return $this;
    }

    /**
     * Gets business_legal_name
     *
     * @return string|null
     */
    public function getBusinessLegalName()
    {
        return $this->container['business_legal_name'];
    }

    /**
     * Sets business_legal_name
     *
     * @param string|null $business_legal_name business_legal_name
     *
     * @return self
     */
    public function setBusinessLegalName($business_legal_name)
    {
        if (is_null($business_legal_name)) {
            array_push($this->openAPINullablesSetToNull, 'business_legal_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_legal_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_legal_name'] = $business_legal_name;

        return $this;
    }

    /**
     * Gets twitter_username
     *
     * @return string|null
     */
    public function getTwitterUsername()
    {
        return $this->container['twitter_username'];
    }

    /**
     * Sets twitter_username
     *
     * @param string|null $twitter_username twitter_username
     *
     * @return self
     */
    public function setTwitterUsername($twitter_username)
    {
        if (is_null($twitter_username)) {
            array_push($this->openAPINullablesSetToNull, 'twitter_username');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('twitter_username', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['twitter_username'] = $twitter_username;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


