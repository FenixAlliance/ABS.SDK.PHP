<?php
/**
 * EmailTemplateUpdateDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MarketingService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EmailTemplateUpdateDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmailTemplateUpdateDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmailTemplateUpdateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order' => 'int',
        'slug' => 'string',
        'name' => 'string',
        'title' => 'string',
        'excerpt' => 'string',
        'password' => 'string',
        'description' => 'string',
        'highlight_image' => 'string',
        'canonical_url' => 'string',
        'seo_title' => 'string',
        'seo_key_words' => 'string',
        'seo_key_phrases' => 'string',
        'meta_description' => 'string',
        'twitter_image' => 'string',
        'twitter_title' => 'string',
        'twitter_description' => 'string',
        'facebook_image' => 'string',
        'facebook_title' => 'string',
        'facebook_description' => 'string',
        'featured_image_url' => 'string',
        'content' => 'string',
        'code' => 'string',
        'namespace' => 'string',
        'type_name' => 'string',
        'generated_code' => 'string',
        'compilation_path' => 'string',
        'html_content' => 'string',
        'c_sharp_content' => 'string',
        'razor_content' => 'string',
        'css_content' => 'string',
        'js_content' => 'string',
        'css_files' => 'string',
        'js_files' => 'string',
        'razor_generated_code' => 'string',
        'c_sharp_generated_code' => 'string',
        'precompiled_logic_size' => 'int',
        'precompiled_logic_size_long' => 'int',
        'precompiled_view_size' => 'int',
        'precompiled_view_size_long' => 'int',
        'precompiled_logic_view_size' => 'int',
        'template' => 'bool',
        'default' => 'bool',
        'enable' => 'bool',
        'enable_comments' => 'bool',
        'display_social_box' => 'bool',
        'published' => 'bool',
        'in_trash_can' => 'bool',
        'system_locked' => 'bool',
        'allow_pingbacks' => 'bool',
        'allow_trackbacks' => 'bool',
        'cornerstone_content' => 'bool',
        'is_essential_content' => 'bool',
        'allow_search_engine_indexing' => 'bool',
        'marketing_campaign_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'order' => 'int32',
        'slug' => null,
        'name' => null,
        'title' => null,
        'excerpt' => null,
        'password' => null,
        'description' => null,
        'highlight_image' => null,
        'canonical_url' => null,
        'seo_title' => null,
        'seo_key_words' => null,
        'seo_key_phrases' => null,
        'meta_description' => null,
        'twitter_image' => null,
        'twitter_title' => null,
        'twitter_description' => null,
        'facebook_image' => null,
        'facebook_title' => null,
        'facebook_description' => null,
        'featured_image_url' => null,
        'content' => null,
        'code' => null,
        'namespace' => null,
        'type_name' => null,
        'generated_code' => null,
        'compilation_path' => null,
        'html_content' => null,
        'c_sharp_content' => null,
        'razor_content' => null,
        'css_content' => null,
        'js_content' => null,
        'css_files' => null,
        'js_files' => null,
        'razor_generated_code' => null,
        'c_sharp_generated_code' => null,
        'precompiled_logic_size' => 'int32',
        'precompiled_logic_size_long' => 'int64',
        'precompiled_view_size' => 'int32',
        'precompiled_view_size_long' => 'int64',
        'precompiled_logic_view_size' => 'int32',
        'template' => null,
        'default' => null,
        'enable' => null,
        'enable_comments' => null,
        'display_social_box' => null,
        'published' => null,
        'in_trash_can' => null,
        'system_locked' => null,
        'allow_pingbacks' => null,
        'allow_trackbacks' => null,
        'cornerstone_content' => null,
        'is_essential_content' => null,
        'allow_search_engine_indexing' => null,
        'marketing_campaign_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'order' => false,
        'slug' => true,
        'name' => true,
        'title' => true,
        'excerpt' => true,
        'password' => true,
        'description' => true,
        'highlight_image' => true,
        'canonical_url' => true,
        'seo_title' => true,
        'seo_key_words' => true,
        'seo_key_phrases' => true,
        'meta_description' => true,
        'twitter_image' => true,
        'twitter_title' => true,
        'twitter_description' => true,
        'facebook_image' => true,
        'facebook_title' => true,
        'facebook_description' => true,
        'featured_image_url' => true,
        'content' => true,
        'code' => true,
        'namespace' => true,
        'type_name' => true,
        'generated_code' => true,
        'compilation_path' => true,
        'html_content' => true,
        'c_sharp_content' => true,
        'razor_content' => true,
        'css_content' => true,
        'js_content' => true,
        'css_files' => true,
        'js_files' => true,
        'razor_generated_code' => true,
        'c_sharp_generated_code' => true,
        'precompiled_logic_size' => false,
        'precompiled_logic_size_long' => false,
        'precompiled_view_size' => false,
        'precompiled_view_size_long' => false,
        'precompiled_logic_view_size' => false,
        'template' => false,
        'default' => false,
        'enable' => false,
        'enable_comments' => false,
        'display_social_box' => false,
        'published' => false,
        'in_trash_can' => false,
        'system_locked' => false,
        'allow_pingbacks' => false,
        'allow_trackbacks' => false,
        'cornerstone_content' => false,
        'is_essential_content' => false,
        'allow_search_engine_indexing' => false,
        'marketing_campaign_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order' => 'order',
        'slug' => 'slug',
        'name' => 'name',
        'title' => 'title',
        'excerpt' => 'excerpt',
        'password' => 'password',
        'description' => 'description',
        'highlight_image' => 'highlightImage',
        'canonical_url' => 'canonicalUrl',
        'seo_title' => 'seoTitle',
        'seo_key_words' => 'seoKeyWords',
        'seo_key_phrases' => 'seoKeyPhrases',
        'meta_description' => 'metaDescription',
        'twitter_image' => 'twitterImage',
        'twitter_title' => 'twitterTitle',
        'twitter_description' => 'twitterDescription',
        'facebook_image' => 'facebookImage',
        'facebook_title' => 'facebookTitle',
        'facebook_description' => 'facebookDescription',
        'featured_image_url' => 'featuredImageURL',
        'content' => 'content',
        'code' => 'code',
        'namespace' => 'namespace',
        'type_name' => 'typeName',
        'generated_code' => 'generatedCode',
        'compilation_path' => 'compilationPath',
        'html_content' => 'htmlContent',
        'c_sharp_content' => 'cSharpContent',
        'razor_content' => 'razorContent',
        'css_content' => 'cssContent',
        'js_content' => 'jsContent',
        'css_files' => 'cssFiles',
        'js_files' => 'jsFiles',
        'razor_generated_code' => 'razorGeneratedCode',
        'c_sharp_generated_code' => 'cSharpGeneratedCode',
        'precompiled_logic_size' => 'precompiledLogicSize',
        'precompiled_logic_size_long' => 'precompiledLogicSizeLong',
        'precompiled_view_size' => 'precompiledViewSize',
        'precompiled_view_size_long' => 'precompiledViewSizeLong',
        'precompiled_logic_view_size' => 'precompiledLogicViewSize',
        'template' => 'template',
        'default' => 'default',
        'enable' => 'enable',
        'enable_comments' => 'enableComments',
        'display_social_box' => 'displaySocialBox',
        'published' => 'published',
        'in_trash_can' => 'inTrashCan',
        'system_locked' => 'systemLocked',
        'allow_pingbacks' => 'allowPingbacks',
        'allow_trackbacks' => 'allowTrackbacks',
        'cornerstone_content' => 'cornerstoneContent',
        'is_essential_content' => 'isEssentialContent',
        'allow_search_engine_indexing' => 'allowSearchEngineIndexing',
        'marketing_campaign_id' => 'marketingCampaignId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order' => 'setOrder',
        'slug' => 'setSlug',
        'name' => 'setName',
        'title' => 'setTitle',
        'excerpt' => 'setExcerpt',
        'password' => 'setPassword',
        'description' => 'setDescription',
        'highlight_image' => 'setHighlightImage',
        'canonical_url' => 'setCanonicalUrl',
        'seo_title' => 'setSeoTitle',
        'seo_key_words' => 'setSeoKeyWords',
        'seo_key_phrases' => 'setSeoKeyPhrases',
        'meta_description' => 'setMetaDescription',
        'twitter_image' => 'setTwitterImage',
        'twitter_title' => 'setTwitterTitle',
        'twitter_description' => 'setTwitterDescription',
        'facebook_image' => 'setFacebookImage',
        'facebook_title' => 'setFacebookTitle',
        'facebook_description' => 'setFacebookDescription',
        'featured_image_url' => 'setFeaturedImageUrl',
        'content' => 'setContent',
        'code' => 'setCode',
        'namespace' => 'setNamespace',
        'type_name' => 'setTypeName',
        'generated_code' => 'setGeneratedCode',
        'compilation_path' => 'setCompilationPath',
        'html_content' => 'setHtmlContent',
        'c_sharp_content' => 'setCSharpContent',
        'razor_content' => 'setRazorContent',
        'css_content' => 'setCssContent',
        'js_content' => 'setJsContent',
        'css_files' => 'setCssFiles',
        'js_files' => 'setJsFiles',
        'razor_generated_code' => 'setRazorGeneratedCode',
        'c_sharp_generated_code' => 'setCSharpGeneratedCode',
        'precompiled_logic_size' => 'setPrecompiledLogicSize',
        'precompiled_logic_size_long' => 'setPrecompiledLogicSizeLong',
        'precompiled_view_size' => 'setPrecompiledViewSize',
        'precompiled_view_size_long' => 'setPrecompiledViewSizeLong',
        'precompiled_logic_view_size' => 'setPrecompiledLogicViewSize',
        'template' => 'setTemplate',
        'default' => 'setDefault',
        'enable' => 'setEnable',
        'enable_comments' => 'setEnableComments',
        'display_social_box' => 'setDisplaySocialBox',
        'published' => 'setPublished',
        'in_trash_can' => 'setInTrashCan',
        'system_locked' => 'setSystemLocked',
        'allow_pingbacks' => 'setAllowPingbacks',
        'allow_trackbacks' => 'setAllowTrackbacks',
        'cornerstone_content' => 'setCornerstoneContent',
        'is_essential_content' => 'setIsEssentialContent',
        'allow_search_engine_indexing' => 'setAllowSearchEngineIndexing',
        'marketing_campaign_id' => 'setMarketingCampaignId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order' => 'getOrder',
        'slug' => 'getSlug',
        'name' => 'getName',
        'title' => 'getTitle',
        'excerpt' => 'getExcerpt',
        'password' => 'getPassword',
        'description' => 'getDescription',
        'highlight_image' => 'getHighlightImage',
        'canonical_url' => 'getCanonicalUrl',
        'seo_title' => 'getSeoTitle',
        'seo_key_words' => 'getSeoKeyWords',
        'seo_key_phrases' => 'getSeoKeyPhrases',
        'meta_description' => 'getMetaDescription',
        'twitter_image' => 'getTwitterImage',
        'twitter_title' => 'getTwitterTitle',
        'twitter_description' => 'getTwitterDescription',
        'facebook_image' => 'getFacebookImage',
        'facebook_title' => 'getFacebookTitle',
        'facebook_description' => 'getFacebookDescription',
        'featured_image_url' => 'getFeaturedImageUrl',
        'content' => 'getContent',
        'code' => 'getCode',
        'namespace' => 'getNamespace',
        'type_name' => 'getTypeName',
        'generated_code' => 'getGeneratedCode',
        'compilation_path' => 'getCompilationPath',
        'html_content' => 'getHtmlContent',
        'c_sharp_content' => 'getCSharpContent',
        'razor_content' => 'getRazorContent',
        'css_content' => 'getCssContent',
        'js_content' => 'getJsContent',
        'css_files' => 'getCssFiles',
        'js_files' => 'getJsFiles',
        'razor_generated_code' => 'getRazorGeneratedCode',
        'c_sharp_generated_code' => 'getCSharpGeneratedCode',
        'precompiled_logic_size' => 'getPrecompiledLogicSize',
        'precompiled_logic_size_long' => 'getPrecompiledLogicSizeLong',
        'precompiled_view_size' => 'getPrecompiledViewSize',
        'precompiled_view_size_long' => 'getPrecompiledViewSizeLong',
        'precompiled_logic_view_size' => 'getPrecompiledLogicViewSize',
        'template' => 'getTemplate',
        'default' => 'getDefault',
        'enable' => 'getEnable',
        'enable_comments' => 'getEnableComments',
        'display_social_box' => 'getDisplaySocialBox',
        'published' => 'getPublished',
        'in_trash_can' => 'getInTrashCan',
        'system_locked' => 'getSystemLocked',
        'allow_pingbacks' => 'getAllowPingbacks',
        'allow_trackbacks' => 'getAllowTrackbacks',
        'cornerstone_content' => 'getCornerstoneContent',
        'is_essential_content' => 'getIsEssentialContent',
        'allow_search_engine_indexing' => 'getAllowSearchEngineIndexing',
        'marketing_campaign_id' => 'getMarketingCampaignId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('slug', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('excerpt', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('highlight_image', $data ?? [], null);
        $this->setIfExists('canonical_url', $data ?? [], null);
        $this->setIfExists('seo_title', $data ?? [], null);
        $this->setIfExists('seo_key_words', $data ?? [], null);
        $this->setIfExists('seo_key_phrases', $data ?? [], null);
        $this->setIfExists('meta_description', $data ?? [], null);
        $this->setIfExists('twitter_image', $data ?? [], null);
        $this->setIfExists('twitter_title', $data ?? [], null);
        $this->setIfExists('twitter_description', $data ?? [], null);
        $this->setIfExists('facebook_image', $data ?? [], null);
        $this->setIfExists('facebook_title', $data ?? [], null);
        $this->setIfExists('facebook_description', $data ?? [], null);
        $this->setIfExists('featured_image_url', $data ?? [], null);
        $this->setIfExists('content', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('namespace', $data ?? [], null);
        $this->setIfExists('type_name', $data ?? [], null);
        $this->setIfExists('generated_code', $data ?? [], null);
        $this->setIfExists('compilation_path', $data ?? [], null);
        $this->setIfExists('html_content', $data ?? [], null);
        $this->setIfExists('c_sharp_content', $data ?? [], null);
        $this->setIfExists('razor_content', $data ?? [], null);
        $this->setIfExists('css_content', $data ?? [], null);
        $this->setIfExists('js_content', $data ?? [], null);
        $this->setIfExists('css_files', $data ?? [], null);
        $this->setIfExists('js_files', $data ?? [], null);
        $this->setIfExists('razor_generated_code', $data ?? [], null);
        $this->setIfExists('c_sharp_generated_code', $data ?? [], null);
        $this->setIfExists('precompiled_logic_size', $data ?? [], null);
        $this->setIfExists('precompiled_logic_size_long', $data ?? [], null);
        $this->setIfExists('precompiled_view_size', $data ?? [], null);
        $this->setIfExists('precompiled_view_size_long', $data ?? [], null);
        $this->setIfExists('precompiled_logic_view_size', $data ?? [], null);
        $this->setIfExists('template', $data ?? [], null);
        $this->setIfExists('default', $data ?? [], null);
        $this->setIfExists('enable', $data ?? [], null);
        $this->setIfExists('enable_comments', $data ?? [], null);
        $this->setIfExists('display_social_box', $data ?? [], null);
        $this->setIfExists('published', $data ?? [], null);
        $this->setIfExists('in_trash_can', $data ?? [], null);
        $this->setIfExists('system_locked', $data ?? [], null);
        $this->setIfExists('allow_pingbacks', $data ?? [], null);
        $this->setIfExists('allow_trackbacks', $data ?? [], null);
        $this->setIfExists('cornerstone_content', $data ?? [], null);
        $this->setIfExists('is_essential_content', $data ?? [], null);
        $this->setIfExists('allow_search_engine_indexing', $data ?? [], null);
        $this->setIfExists('marketing_campaign_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['marketing_campaign_id']) && (mb_strlen($this->container['marketing_campaign_id']) > 36)) {
            $invalidProperties[] = "invalid value for 'marketing_campaign_id', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['marketing_campaign_id']) && (mb_strlen($this->container['marketing_campaign_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'marketing_campaign_id', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order
     *
     * @return int|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string|null
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string|null $slug slug
     *
     * @return self
     */
    public function setSlug($slug)
    {
        if (is_null($slug)) {
            array_push($this->openAPINullablesSetToNull, 'slug');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('slug', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets excerpt
     *
     * @return string|null
     */
    public function getExcerpt()
    {
        return $this->container['excerpt'];
    }

    /**
     * Sets excerpt
     *
     * @param string|null $excerpt excerpt
     *
     * @return self
     */
    public function setExcerpt($excerpt)
    {
        if (is_null($excerpt)) {
            array_push($this->openAPINullablesSetToNull, 'excerpt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('excerpt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['excerpt'] = $excerpt;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password password
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            array_push($this->openAPINullablesSetToNull, 'password');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('password', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets highlight_image
     *
     * @return string|null
     */
    public function getHighlightImage()
    {
        return $this->container['highlight_image'];
    }

    /**
     * Sets highlight_image
     *
     * @param string|null $highlight_image highlight_image
     *
     * @return self
     */
    public function setHighlightImage($highlight_image)
    {
        if (is_null($highlight_image)) {
            array_push($this->openAPINullablesSetToNull, 'highlight_image');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('highlight_image', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['highlight_image'] = $highlight_image;

        return $this;
    }

    /**
     * Gets canonical_url
     *
     * @return string|null
     */
    public function getCanonicalUrl()
    {
        return $this->container['canonical_url'];
    }

    /**
     * Sets canonical_url
     *
     * @param string|null $canonical_url canonical_url
     *
     * @return self
     */
    public function setCanonicalUrl($canonical_url)
    {
        if (is_null($canonical_url)) {
            array_push($this->openAPINullablesSetToNull, 'canonical_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('canonical_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['canonical_url'] = $canonical_url;

        return $this;
    }

    /**
     * Gets seo_title
     *
     * @return string|null
     */
    public function getSeoTitle()
    {
        return $this->container['seo_title'];
    }

    /**
     * Sets seo_title
     *
     * @param string|null $seo_title seo_title
     *
     * @return self
     */
    public function setSeoTitle($seo_title)
    {
        if (is_null($seo_title)) {
            array_push($this->openAPINullablesSetToNull, 'seo_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('seo_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['seo_title'] = $seo_title;

        return $this;
    }

    /**
     * Gets seo_key_words
     *
     * @return string|null
     */
    public function getSeoKeyWords()
    {
        return $this->container['seo_key_words'];
    }

    /**
     * Sets seo_key_words
     *
     * @param string|null $seo_key_words seo_key_words
     *
     * @return self
     */
    public function setSeoKeyWords($seo_key_words)
    {
        if (is_null($seo_key_words)) {
            array_push($this->openAPINullablesSetToNull, 'seo_key_words');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('seo_key_words', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['seo_key_words'] = $seo_key_words;

        return $this;
    }

    /**
     * Gets seo_key_phrases
     *
     * @return string|null
     */
    public function getSeoKeyPhrases()
    {
        return $this->container['seo_key_phrases'];
    }

    /**
     * Sets seo_key_phrases
     *
     * @param string|null $seo_key_phrases seo_key_phrases
     *
     * @return self
     */
    public function setSeoKeyPhrases($seo_key_phrases)
    {
        if (is_null($seo_key_phrases)) {
            array_push($this->openAPINullablesSetToNull, 'seo_key_phrases');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('seo_key_phrases', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['seo_key_phrases'] = $seo_key_phrases;

        return $this;
    }

    /**
     * Gets meta_description
     *
     * @return string|null
     */
    public function getMetaDescription()
    {
        return $this->container['meta_description'];
    }

    /**
     * Sets meta_description
     *
     * @param string|null $meta_description meta_description
     *
     * @return self
     */
    public function setMetaDescription($meta_description)
    {
        if (is_null($meta_description)) {
            array_push($this->openAPINullablesSetToNull, 'meta_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('meta_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['meta_description'] = $meta_description;

        return $this;
    }

    /**
     * Gets twitter_image
     *
     * @return string|null
     */
    public function getTwitterImage()
    {
        return $this->container['twitter_image'];
    }

    /**
     * Sets twitter_image
     *
     * @param string|null $twitter_image twitter_image
     *
     * @return self
     */
    public function setTwitterImage($twitter_image)
    {
        if (is_null($twitter_image)) {
            array_push($this->openAPINullablesSetToNull, 'twitter_image');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('twitter_image', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['twitter_image'] = $twitter_image;

        return $this;
    }

    /**
     * Gets twitter_title
     *
     * @return string|null
     */
    public function getTwitterTitle()
    {
        return $this->container['twitter_title'];
    }

    /**
     * Sets twitter_title
     *
     * @param string|null $twitter_title twitter_title
     *
     * @return self
     */
    public function setTwitterTitle($twitter_title)
    {
        if (is_null($twitter_title)) {
            array_push($this->openAPINullablesSetToNull, 'twitter_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('twitter_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['twitter_title'] = $twitter_title;

        return $this;
    }

    /**
     * Gets twitter_description
     *
     * @return string|null
     */
    public function getTwitterDescription()
    {
        return $this->container['twitter_description'];
    }

    /**
     * Sets twitter_description
     *
     * @param string|null $twitter_description twitter_description
     *
     * @return self
     */
    public function setTwitterDescription($twitter_description)
    {
        if (is_null($twitter_description)) {
            array_push($this->openAPINullablesSetToNull, 'twitter_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('twitter_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['twitter_description'] = $twitter_description;

        return $this;
    }

    /**
     * Gets facebook_image
     *
     * @return string|null
     */
    public function getFacebookImage()
    {
        return $this->container['facebook_image'];
    }

    /**
     * Sets facebook_image
     *
     * @param string|null $facebook_image facebook_image
     *
     * @return self
     */
    public function setFacebookImage($facebook_image)
    {
        if (is_null($facebook_image)) {
            array_push($this->openAPINullablesSetToNull, 'facebook_image');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('facebook_image', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['facebook_image'] = $facebook_image;

        return $this;
    }

    /**
     * Gets facebook_title
     *
     * @return string|null
     */
    public function getFacebookTitle()
    {
        return $this->container['facebook_title'];
    }

    /**
     * Sets facebook_title
     *
     * @param string|null $facebook_title facebook_title
     *
     * @return self
     */
    public function setFacebookTitle($facebook_title)
    {
        if (is_null($facebook_title)) {
            array_push($this->openAPINullablesSetToNull, 'facebook_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('facebook_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['facebook_title'] = $facebook_title;

        return $this;
    }

    /**
     * Gets facebook_description
     *
     * @return string|null
     */
    public function getFacebookDescription()
    {
        return $this->container['facebook_description'];
    }

    /**
     * Sets facebook_description
     *
     * @param string|null $facebook_description facebook_description
     *
     * @return self
     */
    public function setFacebookDescription($facebook_description)
    {
        if (is_null($facebook_description)) {
            array_push($this->openAPINullablesSetToNull, 'facebook_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('facebook_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['facebook_description'] = $facebook_description;

        return $this;
    }

    /**
     * Gets featured_image_url
     *
     * @return string|null
     */
    public function getFeaturedImageUrl()
    {
        return $this->container['featured_image_url'];
    }

    /**
     * Sets featured_image_url
     *
     * @param string|null $featured_image_url featured_image_url
     *
     * @return self
     */
    public function setFeaturedImageUrl($featured_image_url)
    {
        if (is_null($featured_image_url)) {
            array_push($this->openAPINullablesSetToNull, 'featured_image_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('featured_image_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['featured_image_url'] = $featured_image_url;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string|null
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string|null $content content
     *
     * @return self
     */
    public function setContent($content)
    {
        if (is_null($content)) {
            array_push($this->openAPINullablesSetToNull, 'content');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('content', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            array_push($this->openAPINullablesSetToNull, 'code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return string|null
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param string|null $namespace namespace
     *
     * @return self
     */
    public function setNamespace($namespace)
    {
        if (is_null($namespace)) {
            array_push($this->openAPINullablesSetToNull, 'namespace');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('namespace', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets type_name
     *
     * @return string|null
     */
    public function getTypeName()
    {
        return $this->container['type_name'];
    }

    /**
     * Sets type_name
     *
     * @param string|null $type_name type_name
     *
     * @return self
     */
    public function setTypeName($type_name)
    {
        if (is_null($type_name)) {
            array_push($this->openAPINullablesSetToNull, 'type_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type_name'] = $type_name;

        return $this;
    }

    /**
     * Gets generated_code
     *
     * @return string|null
     */
    public function getGeneratedCode()
    {
        return $this->container['generated_code'];
    }

    /**
     * Sets generated_code
     *
     * @param string|null $generated_code generated_code
     *
     * @return self
     */
    public function setGeneratedCode($generated_code)
    {
        if (is_null($generated_code)) {
            array_push($this->openAPINullablesSetToNull, 'generated_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('generated_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['generated_code'] = $generated_code;

        return $this;
    }

    /**
     * Gets compilation_path
     *
     * @return string|null
     */
    public function getCompilationPath()
    {
        return $this->container['compilation_path'];
    }

    /**
     * Sets compilation_path
     *
     * @param string|null $compilation_path compilation_path
     *
     * @return self
     */
    public function setCompilationPath($compilation_path)
    {
        if (is_null($compilation_path)) {
            array_push($this->openAPINullablesSetToNull, 'compilation_path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('compilation_path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['compilation_path'] = $compilation_path;

        return $this;
    }

    /**
     * Gets html_content
     *
     * @return string|null
     */
    public function getHtmlContent()
    {
        return $this->container['html_content'];
    }

    /**
     * Sets html_content
     *
     * @param string|null $html_content html_content
     *
     * @return self
     */
    public function setHtmlContent($html_content)
    {
        if (is_null($html_content)) {
            array_push($this->openAPINullablesSetToNull, 'html_content');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('html_content', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['html_content'] = $html_content;

        return $this;
    }

    /**
     * Gets c_sharp_content
     *
     * @return string|null
     */
    public function getCSharpContent()
    {
        return $this->container['c_sharp_content'];
    }

    /**
     * Sets c_sharp_content
     *
     * @param string|null $c_sharp_content c_sharp_content
     *
     * @return self
     */
    public function setCSharpContent($c_sharp_content)
    {
        if (is_null($c_sharp_content)) {
            array_push($this->openAPINullablesSetToNull, 'c_sharp_content');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_sharp_content', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['c_sharp_content'] = $c_sharp_content;

        return $this;
    }

    /**
     * Gets razor_content
     *
     * @return string|null
     */
    public function getRazorContent()
    {
        return $this->container['razor_content'];
    }

    /**
     * Sets razor_content
     *
     * @param string|null $razor_content razor_content
     *
     * @return self
     */
    public function setRazorContent($razor_content)
    {
        if (is_null($razor_content)) {
            array_push($this->openAPINullablesSetToNull, 'razor_content');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('razor_content', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['razor_content'] = $razor_content;

        return $this;
    }

    /**
     * Gets css_content
     *
     * @return string|null
     */
    public function getCssContent()
    {
        return $this->container['css_content'];
    }

    /**
     * Sets css_content
     *
     * @param string|null $css_content css_content
     *
     * @return self
     */
    public function setCssContent($css_content)
    {
        if (is_null($css_content)) {
            array_push($this->openAPINullablesSetToNull, 'css_content');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('css_content', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['css_content'] = $css_content;

        return $this;
    }

    /**
     * Gets js_content
     *
     * @return string|null
     */
    public function getJsContent()
    {
        return $this->container['js_content'];
    }

    /**
     * Sets js_content
     *
     * @param string|null $js_content js_content
     *
     * @return self
     */
    public function setJsContent($js_content)
    {
        if (is_null($js_content)) {
            array_push($this->openAPINullablesSetToNull, 'js_content');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('js_content', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['js_content'] = $js_content;

        return $this;
    }

    /**
     * Gets css_files
     *
     * @return string|null
     */
    public function getCssFiles()
    {
        return $this->container['css_files'];
    }

    /**
     * Sets css_files
     *
     * @param string|null $css_files css_files
     *
     * @return self
     */
    public function setCssFiles($css_files)
    {
        if (is_null($css_files)) {
            array_push($this->openAPINullablesSetToNull, 'css_files');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('css_files', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['css_files'] = $css_files;

        return $this;
    }

    /**
     * Gets js_files
     *
     * @return string|null
     */
    public function getJsFiles()
    {
        return $this->container['js_files'];
    }

    /**
     * Sets js_files
     *
     * @param string|null $js_files js_files
     *
     * @return self
     */
    public function setJsFiles($js_files)
    {
        if (is_null($js_files)) {
            array_push($this->openAPINullablesSetToNull, 'js_files');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('js_files', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['js_files'] = $js_files;

        return $this;
    }

    /**
     * Gets razor_generated_code
     *
     * @return string|null
     */
    public function getRazorGeneratedCode()
    {
        return $this->container['razor_generated_code'];
    }

    /**
     * Sets razor_generated_code
     *
     * @param string|null $razor_generated_code razor_generated_code
     *
     * @return self
     */
    public function setRazorGeneratedCode($razor_generated_code)
    {
        if (is_null($razor_generated_code)) {
            array_push($this->openAPINullablesSetToNull, 'razor_generated_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('razor_generated_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['razor_generated_code'] = $razor_generated_code;

        return $this;
    }

    /**
     * Gets c_sharp_generated_code
     *
     * @return string|null
     */
    public function getCSharpGeneratedCode()
    {
        return $this->container['c_sharp_generated_code'];
    }

    /**
     * Sets c_sharp_generated_code
     *
     * @param string|null $c_sharp_generated_code c_sharp_generated_code
     *
     * @return self
     */
    public function setCSharpGeneratedCode($c_sharp_generated_code)
    {
        if (is_null($c_sharp_generated_code)) {
            array_push($this->openAPINullablesSetToNull, 'c_sharp_generated_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_sharp_generated_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['c_sharp_generated_code'] = $c_sharp_generated_code;

        return $this;
    }

    /**
     * Gets precompiled_logic_size
     *
     * @return int|null
     */
    public function getPrecompiledLogicSize()
    {
        return $this->container['precompiled_logic_size'];
    }

    /**
     * Sets precompiled_logic_size
     *
     * @param int|null $precompiled_logic_size precompiled_logic_size
     *
     * @return self
     */
    public function setPrecompiledLogicSize($precompiled_logic_size)
    {
        if (is_null($precompiled_logic_size)) {
            throw new \InvalidArgumentException('non-nullable precompiled_logic_size cannot be null');
        }
        $this->container['precompiled_logic_size'] = $precompiled_logic_size;

        return $this;
    }

    /**
     * Gets precompiled_logic_size_long
     *
     * @return int|null
     */
    public function getPrecompiledLogicSizeLong()
    {
        return $this->container['precompiled_logic_size_long'];
    }

    /**
     * Sets precompiled_logic_size_long
     *
     * @param int|null $precompiled_logic_size_long precompiled_logic_size_long
     *
     * @return self
     */
    public function setPrecompiledLogicSizeLong($precompiled_logic_size_long)
    {
        if (is_null($precompiled_logic_size_long)) {
            throw new \InvalidArgumentException('non-nullable precompiled_logic_size_long cannot be null');
        }
        $this->container['precompiled_logic_size_long'] = $precompiled_logic_size_long;

        return $this;
    }

    /**
     * Gets precompiled_view_size
     *
     * @return int|null
     */
    public function getPrecompiledViewSize()
    {
        return $this->container['precompiled_view_size'];
    }

    /**
     * Sets precompiled_view_size
     *
     * @param int|null $precompiled_view_size precompiled_view_size
     *
     * @return self
     */
    public function setPrecompiledViewSize($precompiled_view_size)
    {
        if (is_null($precompiled_view_size)) {
            throw new \InvalidArgumentException('non-nullable precompiled_view_size cannot be null');
        }
        $this->container['precompiled_view_size'] = $precompiled_view_size;

        return $this;
    }

    /**
     * Gets precompiled_view_size_long
     *
     * @return int|null
     */
    public function getPrecompiledViewSizeLong()
    {
        return $this->container['precompiled_view_size_long'];
    }

    /**
     * Sets precompiled_view_size_long
     *
     * @param int|null $precompiled_view_size_long precompiled_view_size_long
     *
     * @return self
     */
    public function setPrecompiledViewSizeLong($precompiled_view_size_long)
    {
        if (is_null($precompiled_view_size_long)) {
            throw new \InvalidArgumentException('non-nullable precompiled_view_size_long cannot be null');
        }
        $this->container['precompiled_view_size_long'] = $precompiled_view_size_long;

        return $this;
    }

    /**
     * Gets precompiled_logic_view_size
     *
     * @return int|null
     */
    public function getPrecompiledLogicViewSize()
    {
        return $this->container['precompiled_logic_view_size'];
    }

    /**
     * Sets precompiled_logic_view_size
     *
     * @param int|null $precompiled_logic_view_size precompiled_logic_view_size
     *
     * @return self
     */
    public function setPrecompiledLogicViewSize($precompiled_logic_view_size)
    {
        if (is_null($precompiled_logic_view_size)) {
            throw new \InvalidArgumentException('non-nullable precompiled_logic_view_size cannot be null');
        }
        $this->container['precompiled_logic_view_size'] = $precompiled_logic_view_size;

        return $this;
    }

    /**
     * Gets template
     *
     * @return bool|null
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param bool|null $template template
     *
     * @return self
     */
    public function setTemplate($template)
    {
        if (is_null($template)) {
            throw new \InvalidArgumentException('non-nullable template cannot be null');
        }
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets default
     *
     * @return bool|null
     */
    public function getDefault()
    {
        return $this->container['default'];
    }

    /**
     * Sets default
     *
     * @param bool|null $default default
     *
     * @return self
     */
    public function setDefault($default)
    {
        if (is_null($default)) {
            throw new \InvalidArgumentException('non-nullable default cannot be null');
        }
        $this->container['default'] = $default;

        return $this;
    }

    /**
     * Gets enable
     *
     * @return bool|null
     */
    public function getEnable()
    {
        return $this->container['enable'];
    }

    /**
     * Sets enable
     *
     * @param bool|null $enable enable
     *
     * @return self
     */
    public function setEnable($enable)
    {
        if (is_null($enable)) {
            throw new \InvalidArgumentException('non-nullable enable cannot be null');
        }
        $this->container['enable'] = $enable;

        return $this;
    }

    /**
     * Gets enable_comments
     *
     * @return bool|null
     */
    public function getEnableComments()
    {
        return $this->container['enable_comments'];
    }

    /**
     * Sets enable_comments
     *
     * @param bool|null $enable_comments enable_comments
     *
     * @return self
     */
    public function setEnableComments($enable_comments)
    {
        if (is_null($enable_comments)) {
            throw new \InvalidArgumentException('non-nullable enable_comments cannot be null');
        }
        $this->container['enable_comments'] = $enable_comments;

        return $this;
    }

    /**
     * Gets display_social_box
     *
     * @return bool|null
     */
    public function getDisplaySocialBox()
    {
        return $this->container['display_social_box'];
    }

    /**
     * Sets display_social_box
     *
     * @param bool|null $display_social_box display_social_box
     *
     * @return self
     */
    public function setDisplaySocialBox($display_social_box)
    {
        if (is_null($display_social_box)) {
            throw new \InvalidArgumentException('non-nullable display_social_box cannot be null');
        }
        $this->container['display_social_box'] = $display_social_box;

        return $this;
    }

    /**
     * Gets published
     *
     * @return bool|null
     */
    public function getPublished()
    {
        return $this->container['published'];
    }

    /**
     * Sets published
     *
     * @param bool|null $published published
     *
     * @return self
     */
    public function setPublished($published)
    {
        if (is_null($published)) {
            throw new \InvalidArgumentException('non-nullable published cannot be null');
        }
        $this->container['published'] = $published;

        return $this;
    }

    /**
     * Gets in_trash_can
     *
     * @return bool|null
     */
    public function getInTrashCan()
    {
        return $this->container['in_trash_can'];
    }

    /**
     * Sets in_trash_can
     *
     * @param bool|null $in_trash_can in_trash_can
     *
     * @return self
     */
    public function setInTrashCan($in_trash_can)
    {
        if (is_null($in_trash_can)) {
            throw new \InvalidArgumentException('non-nullable in_trash_can cannot be null');
        }
        $this->container['in_trash_can'] = $in_trash_can;

        return $this;
    }

    /**
     * Gets system_locked
     *
     * @return bool|null
     */
    public function getSystemLocked()
    {
        return $this->container['system_locked'];
    }

    /**
     * Sets system_locked
     *
     * @param bool|null $system_locked system_locked
     *
     * @return self
     */
    public function setSystemLocked($system_locked)
    {
        if (is_null($system_locked)) {
            throw new \InvalidArgumentException('non-nullable system_locked cannot be null');
        }
        $this->container['system_locked'] = $system_locked;

        return $this;
    }

    /**
     * Gets allow_pingbacks
     *
     * @return bool|null
     */
    public function getAllowPingbacks()
    {
        return $this->container['allow_pingbacks'];
    }

    /**
     * Sets allow_pingbacks
     *
     * @param bool|null $allow_pingbacks allow_pingbacks
     *
     * @return self
     */
    public function setAllowPingbacks($allow_pingbacks)
    {
        if (is_null($allow_pingbacks)) {
            throw new \InvalidArgumentException('non-nullable allow_pingbacks cannot be null');
        }
        $this->container['allow_pingbacks'] = $allow_pingbacks;

        return $this;
    }

    /**
     * Gets allow_trackbacks
     *
     * @return bool|null
     */
    public function getAllowTrackbacks()
    {
        return $this->container['allow_trackbacks'];
    }

    /**
     * Sets allow_trackbacks
     *
     * @param bool|null $allow_trackbacks allow_trackbacks
     *
     * @return self
     */
    public function setAllowTrackbacks($allow_trackbacks)
    {
        if (is_null($allow_trackbacks)) {
            throw new \InvalidArgumentException('non-nullable allow_trackbacks cannot be null');
        }
        $this->container['allow_trackbacks'] = $allow_trackbacks;

        return $this;
    }

    /**
     * Gets cornerstone_content
     *
     * @return bool|null
     */
    public function getCornerstoneContent()
    {
        return $this->container['cornerstone_content'];
    }

    /**
     * Sets cornerstone_content
     *
     * @param bool|null $cornerstone_content cornerstone_content
     *
     * @return self
     */
    public function setCornerstoneContent($cornerstone_content)
    {
        if (is_null($cornerstone_content)) {
            throw new \InvalidArgumentException('non-nullable cornerstone_content cannot be null');
        }
        $this->container['cornerstone_content'] = $cornerstone_content;

        return $this;
    }

    /**
     * Gets is_essential_content
     *
     * @return bool|null
     */
    public function getIsEssentialContent()
    {
        return $this->container['is_essential_content'];
    }

    /**
     * Sets is_essential_content
     *
     * @param bool|null $is_essential_content is_essential_content
     *
     * @return self
     */
    public function setIsEssentialContent($is_essential_content)
    {
        if (is_null($is_essential_content)) {
            throw new \InvalidArgumentException('non-nullable is_essential_content cannot be null');
        }
        $this->container['is_essential_content'] = $is_essential_content;

        return $this;
    }

    /**
     * Gets allow_search_engine_indexing
     *
     * @return bool|null
     */
    public function getAllowSearchEngineIndexing()
    {
        return $this->container['allow_search_engine_indexing'];
    }

    /**
     * Sets allow_search_engine_indexing
     *
     * @param bool|null $allow_search_engine_indexing allow_search_engine_indexing
     *
     * @return self
     */
    public function setAllowSearchEngineIndexing($allow_search_engine_indexing)
    {
        if (is_null($allow_search_engine_indexing)) {
            throw new \InvalidArgumentException('non-nullable allow_search_engine_indexing cannot be null');
        }
        $this->container['allow_search_engine_indexing'] = $allow_search_engine_indexing;

        return $this;
    }

    /**
     * Gets marketing_campaign_id
     *
     * @return string|null
     */
    public function getMarketingCampaignId()
    {
        return $this->container['marketing_campaign_id'];
    }

    /**
     * Sets marketing_campaign_id
     *
     * @param string|null $marketing_campaign_id marketing_campaign_id
     *
     * @return self
     */
    public function setMarketingCampaignId($marketing_campaign_id)
    {
        if (is_null($marketing_campaign_id)) {
            array_push($this->openAPINullablesSetToNull, 'marketing_campaign_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('marketing_campaign_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($marketing_campaign_id) && (mb_strlen($marketing_campaign_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $marketing_campaign_id when calling EmailTemplateUpdateDto., must be smaller than or equal to 36.');
        }
        if (!is_null($marketing_campaign_id) && (mb_strlen($marketing_campaign_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $marketing_campaign_id when calling EmailTemplateUpdateDto., must be bigger than or equal to 0.');
        }

        $this->container['marketing_campaign_id'] = $marketing_campaign_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


