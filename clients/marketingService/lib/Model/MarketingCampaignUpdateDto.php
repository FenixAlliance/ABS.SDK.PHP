<?php
/**
 * MarketingCampaignUpdateDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MarketingService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MarketingCampaignUpdateDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MarketingCampaignUpdateDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MarketingCampaignUpdateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'offer' => 'string',
        'active' => 'bool',
        'proposed_start' => '\DateTime',
        'proposed_end' => '\DateTime',
        'actual_start' => '\DateTime',
        'actual_end' => '\DateTime',
        'code' => 'string',
        'allocated_budget' => 'float',
        'activity_cost' => 'float',
        'misc_cost' => 'float',
        'expected_response_percent' => 'float',
        'marketing_area_id' => 'string',
        'currency_id' => 'string',
        'tenant_id' => 'string',
        'enrolment_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'offer' => null,
        'active' => null,
        'proposed_start' => 'date-time',
        'proposed_end' => 'date-time',
        'actual_start' => 'date-time',
        'actual_end' => 'date-time',
        'code' => null,
        'allocated_budget' => 'double',
        'activity_cost' => 'double',
        'misc_cost' => 'double',
        'expected_response_percent' => 'double',
        'marketing_area_id' => null,
        'currency_id' => null,
        'tenant_id' => null,
        'enrolment_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => true,
        'offer' => true,
        'active' => false,
        'proposed_start' => false,
        'proposed_end' => false,
        'actual_start' => false,
        'actual_end' => false,
        'code' => true,
        'allocated_budget' => false,
        'activity_cost' => false,
        'misc_cost' => false,
        'expected_response_percent' => false,
        'marketing_area_id' => true,
        'currency_id' => true,
        'tenant_id' => true,
        'enrolment_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'offer' => 'offer',
        'active' => 'active',
        'proposed_start' => 'proposedStart',
        'proposed_end' => 'proposedEnd',
        'actual_start' => 'actualStart',
        'actual_end' => 'actualEnd',
        'code' => 'code',
        'allocated_budget' => 'allocatedBudget',
        'activity_cost' => 'activityCost',
        'misc_cost' => 'miscCost',
        'expected_response_percent' => 'expectedResponsePercent',
        'marketing_area_id' => 'marketingAreaId',
        'currency_id' => 'currencyId',
        'tenant_id' => 'tenantId',
        'enrolment_id' => 'enrolmentId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'offer' => 'setOffer',
        'active' => 'setActive',
        'proposed_start' => 'setProposedStart',
        'proposed_end' => 'setProposedEnd',
        'actual_start' => 'setActualStart',
        'actual_end' => 'setActualEnd',
        'code' => 'setCode',
        'allocated_budget' => 'setAllocatedBudget',
        'activity_cost' => 'setActivityCost',
        'misc_cost' => 'setMiscCost',
        'expected_response_percent' => 'setExpectedResponsePercent',
        'marketing_area_id' => 'setMarketingAreaId',
        'currency_id' => 'setCurrencyId',
        'tenant_id' => 'setTenantId',
        'enrolment_id' => 'setEnrolmentId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'offer' => 'getOffer',
        'active' => 'getActive',
        'proposed_start' => 'getProposedStart',
        'proposed_end' => 'getProposedEnd',
        'actual_start' => 'getActualStart',
        'actual_end' => 'getActualEnd',
        'code' => 'getCode',
        'allocated_budget' => 'getAllocatedBudget',
        'activity_cost' => 'getActivityCost',
        'misc_cost' => 'getMiscCost',
        'expected_response_percent' => 'getExpectedResponsePercent',
        'marketing_area_id' => 'getMarketingAreaId',
        'currency_id' => 'getCurrencyId',
        'tenant_id' => 'getTenantId',
        'enrolment_id' => 'getEnrolmentId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('offer', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('proposed_start', $data ?? [], null);
        $this->setIfExists('proposed_end', $data ?? [], null);
        $this->setIfExists('actual_start', $data ?? [], null);
        $this->setIfExists('actual_end', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('allocated_budget', $data ?? [], null);
        $this->setIfExists('activity_cost', $data ?? [], null);
        $this->setIfExists('misc_cost', $data ?? [], null);
        $this->setIfExists('expected_response_percent', $data ?? [], null);
        $this->setIfExists('marketing_area_id', $data ?? [], null);
        $this->setIfExists('currency_id', $data ?? [], null);
        $this->setIfExists('tenant_id', $data ?? [], null);
        $this->setIfExists('enrolment_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets offer
     *
     * @return string|null
     */
    public function getOffer()
    {
        return $this->container['offer'];
    }

    /**
     * Sets offer
     *
     * @param string|null $offer offer
     *
     * @return self
     */
    public function setOffer($offer)
    {
        if (is_null($offer)) {
            array_push($this->openAPINullablesSetToNull, 'offer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('offer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['offer'] = $offer;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets proposed_start
     *
     * @return \DateTime|null
     */
    public function getProposedStart()
    {
        return $this->container['proposed_start'];
    }

    /**
     * Sets proposed_start
     *
     * @param \DateTime|null $proposed_start proposed_start
     *
     * @return self
     */
    public function setProposedStart($proposed_start)
    {
        if (is_null($proposed_start)) {
            throw new \InvalidArgumentException('non-nullable proposed_start cannot be null');
        }
        $this->container['proposed_start'] = $proposed_start;

        return $this;
    }

    /**
     * Gets proposed_end
     *
     * @return \DateTime|null
     */
    public function getProposedEnd()
    {
        return $this->container['proposed_end'];
    }

    /**
     * Sets proposed_end
     *
     * @param \DateTime|null $proposed_end proposed_end
     *
     * @return self
     */
    public function setProposedEnd($proposed_end)
    {
        if (is_null($proposed_end)) {
            throw new \InvalidArgumentException('non-nullable proposed_end cannot be null');
        }
        $this->container['proposed_end'] = $proposed_end;

        return $this;
    }

    /**
     * Gets actual_start
     *
     * @return \DateTime|null
     */
    public function getActualStart()
    {
        return $this->container['actual_start'];
    }

    /**
     * Sets actual_start
     *
     * @param \DateTime|null $actual_start actual_start
     *
     * @return self
     */
    public function setActualStart($actual_start)
    {
        if (is_null($actual_start)) {
            throw new \InvalidArgumentException('non-nullable actual_start cannot be null');
        }
        $this->container['actual_start'] = $actual_start;

        return $this;
    }

    /**
     * Gets actual_end
     *
     * @return \DateTime|null
     */
    public function getActualEnd()
    {
        return $this->container['actual_end'];
    }

    /**
     * Sets actual_end
     *
     * @param \DateTime|null $actual_end actual_end
     *
     * @return self
     */
    public function setActualEnd($actual_end)
    {
        if (is_null($actual_end)) {
            throw new \InvalidArgumentException('non-nullable actual_end cannot be null');
        }
        $this->container['actual_end'] = $actual_end;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            array_push($this->openAPINullablesSetToNull, 'code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets allocated_budget
     *
     * @return float|null
     */
    public function getAllocatedBudget()
    {
        return $this->container['allocated_budget'];
    }

    /**
     * Sets allocated_budget
     *
     * @param float|null $allocated_budget allocated_budget
     *
     * @return self
     */
    public function setAllocatedBudget($allocated_budget)
    {
        if (is_null($allocated_budget)) {
            throw new \InvalidArgumentException('non-nullable allocated_budget cannot be null');
        }
        $this->container['allocated_budget'] = $allocated_budget;

        return $this;
    }

    /**
     * Gets activity_cost
     *
     * @return float|null
     */
    public function getActivityCost()
    {
        return $this->container['activity_cost'];
    }

    /**
     * Sets activity_cost
     *
     * @param float|null $activity_cost activity_cost
     *
     * @return self
     */
    public function setActivityCost($activity_cost)
    {
        if (is_null($activity_cost)) {
            throw new \InvalidArgumentException('non-nullable activity_cost cannot be null');
        }
        $this->container['activity_cost'] = $activity_cost;

        return $this;
    }

    /**
     * Gets misc_cost
     *
     * @return float|null
     */
    public function getMiscCost()
    {
        return $this->container['misc_cost'];
    }

    /**
     * Sets misc_cost
     *
     * @param float|null $misc_cost misc_cost
     *
     * @return self
     */
    public function setMiscCost($misc_cost)
    {
        if (is_null($misc_cost)) {
            throw new \InvalidArgumentException('non-nullable misc_cost cannot be null');
        }
        $this->container['misc_cost'] = $misc_cost;

        return $this;
    }

    /**
     * Gets expected_response_percent
     *
     * @return float|null
     */
    public function getExpectedResponsePercent()
    {
        return $this->container['expected_response_percent'];
    }

    /**
     * Sets expected_response_percent
     *
     * @param float|null $expected_response_percent expected_response_percent
     *
     * @return self
     */
    public function setExpectedResponsePercent($expected_response_percent)
    {
        if (is_null($expected_response_percent)) {
            throw new \InvalidArgumentException('non-nullable expected_response_percent cannot be null');
        }
        $this->container['expected_response_percent'] = $expected_response_percent;

        return $this;
    }

    /**
     * Gets marketing_area_id
     *
     * @return string|null
     */
    public function getMarketingAreaId()
    {
        return $this->container['marketing_area_id'];
    }

    /**
     * Sets marketing_area_id
     *
     * @param string|null $marketing_area_id marketing_area_id
     *
     * @return self
     */
    public function setMarketingAreaId($marketing_area_id)
    {
        if (is_null($marketing_area_id)) {
            array_push($this->openAPINullablesSetToNull, 'marketing_area_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('marketing_area_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['marketing_area_id'] = $marketing_area_id;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string|null
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string|null $currency_id currency_id
     *
     * @return self
     */
    public function setCurrencyId($currency_id)
    {
        if (is_null($currency_id)) {
            array_push($this->openAPINullablesSetToNull, 'currency_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string|null
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string|null $tenant_id tenant_id
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        if (is_null($tenant_id)) {
            array_push($this->openAPINullablesSetToNull, 'tenant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tenant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets enrolment_id
     *
     * @return string|null
     */
    public function getEnrolmentId()
    {
        return $this->container['enrolment_id'];
    }

    /**
     * Sets enrolment_id
     *
     * @param string|null $enrolment_id enrolment_id
     *
     * @return self
     */
    public function setEnrolmentId($enrolment_id)
    {
        if (is_null($enrolment_id)) {
            array_push($this->openAPINullablesSetToNull, 'enrolment_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enrolment_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enrolment_id'] = $enrolment_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


