<?php
/**
 * ProjectTimeLogUpdateDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TimeTrackerService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProjectTimeLogUpdateDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProjectTimeLogUpdateDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProjectTimeLogUpdateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'log_date' => '\DateTime',
        'time_span' => 'string',
        'comments' => 'string',
        'project_task_id' => 'string',
        'project_period_id' => 'string',
        'project_time_log_record_type' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'log_date' => 'date-time',
        'time_span' => null,
        'comments' => null,
        'project_task_id' => null,
        'project_period_id' => null,
        'project_time_log_record_type' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'log_date' => false,
        'time_span' => false,
        'comments' => true,
        'project_task_id' => true,
        'project_period_id' => true,
        'project_time_log_record_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'log_date' => 'logDate',
        'time_span' => 'timeSpan',
        'comments' => 'comments',
        'project_task_id' => 'projectTaskID',
        'project_period_id' => 'projectPeriodID',
        'project_time_log_record_type' => 'projectTimeLogRecordType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'log_date' => 'setLogDate',
        'time_span' => 'setTimeSpan',
        'comments' => 'setComments',
        'project_task_id' => 'setProjectTaskId',
        'project_period_id' => 'setProjectPeriodId',
        'project_time_log_record_type' => 'setProjectTimeLogRecordType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'log_date' => 'getLogDate',
        'time_span' => 'getTimeSpan',
        'comments' => 'getComments',
        'project_task_id' => 'getProjectTaskId',
        'project_period_id' => 'getProjectPeriodId',
        'project_time_log_record_type' => 'getProjectTimeLogRecordType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PROJECT_TIME_LOG_RECORD_TYPE_NUMBER_0 = 0;
    public const PROJECT_TIME_LOG_RECORD_TYPE_NUMBER_1 = 1;
    public const PROJECT_TIME_LOG_RECORD_TYPE_NUMBER_2 = 2;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProjectTimeLogRecordTypeAllowableValues()
    {
        return [
            self::PROJECT_TIME_LOG_RECORD_TYPE_NUMBER_0,
            self::PROJECT_TIME_LOG_RECORD_TYPE_NUMBER_1,
            self::PROJECT_TIME_LOG_RECORD_TYPE_NUMBER_2,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('log_date', $data ?? [], null);
        $this->setIfExists('time_span', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('project_task_id', $data ?? [], null);
        $this->setIfExists('project_period_id', $data ?? [], null);
        $this->setIfExists('project_time_log_record_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getProjectTimeLogRecordTypeAllowableValues();
        if (!is_null($this->container['project_time_log_record_type']) && !in_array($this->container['project_time_log_record_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'project_time_log_record_type', must be one of '%s'",
                $this->container['project_time_log_record_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets log_date
     *
     * @return \DateTime|null
     */
    public function getLogDate()
    {
        return $this->container['log_date'];
    }

    /**
     * Sets log_date
     *
     * @param \DateTime|null $log_date log_date
     *
     * @return self
     */
    public function setLogDate($log_date)
    {
        if (is_null($log_date)) {
            throw new \InvalidArgumentException('non-nullable log_date cannot be null');
        }
        $this->container['log_date'] = $log_date;

        return $this;
    }

    /**
     * Gets time_span
     *
     * @return string|null
     */
    public function getTimeSpan()
    {
        return $this->container['time_span'];
    }

    /**
     * Sets time_span
     *
     * @param string|null $time_span time_span
     *
     * @return self
     */
    public function setTimeSpan($time_span)
    {
        if (is_null($time_span)) {
            throw new \InvalidArgumentException('non-nullable time_span cannot be null');
        }
        $this->container['time_span'] = $time_span;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments comments
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            array_push($this->openAPINullablesSetToNull, 'comments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets project_task_id
     *
     * @return string|null
     */
    public function getProjectTaskId()
    {
        return $this->container['project_task_id'];
    }

    /**
     * Sets project_task_id
     *
     * @param string|null $project_task_id project_task_id
     *
     * @return self
     */
    public function setProjectTaskId($project_task_id)
    {
        if (is_null($project_task_id)) {
            array_push($this->openAPINullablesSetToNull, 'project_task_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('project_task_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['project_task_id'] = $project_task_id;

        return $this;
    }

    /**
     * Gets project_period_id
     *
     * @return string|null
     */
    public function getProjectPeriodId()
    {
        return $this->container['project_period_id'];
    }

    /**
     * Sets project_period_id
     *
     * @param string|null $project_period_id project_period_id
     *
     * @return self
     */
    public function setProjectPeriodId($project_period_id)
    {
        if (is_null($project_period_id)) {
            array_push($this->openAPINullablesSetToNull, 'project_period_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('project_period_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['project_period_id'] = $project_period_id;

        return $this;
    }

    /**
     * Gets project_time_log_record_type
     *
     * @return int|null
     */
    public function getProjectTimeLogRecordType()
    {
        return $this->container['project_time_log_record_type'];
    }

    /**
     * Sets project_time_log_record_type
     *
     * @param int|null $project_time_log_record_type project_time_log_record_type
     *
     * @return self
     */
    public function setProjectTimeLogRecordType($project_time_log_record_type)
    {
        if (is_null($project_time_log_record_type)) {
            throw new \InvalidArgumentException('non-nullable project_time_log_record_type cannot be null');
        }
        $allowedValues = $this->getProjectTimeLogRecordTypeAllowableValues();
        if (!in_array($project_time_log_record_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'project_time_log_record_type', must be one of '%s'",
                    $project_time_log_record_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['project_time_log_record_type'] = $project_time_log_record_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


