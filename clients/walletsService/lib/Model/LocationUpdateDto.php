<?php
/**
 * LocationUpdateDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * WalletsService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LocationUpdateDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LocationUpdateDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LocationUpdateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'title' => 'string',
        'email' => 'string',
        'phone' => 'string',
        'fax' => 'string',
        'address1' => 'string',
        'address2' => 'string',
        'address3' => 'string',
        'unit' => 'string',
        'city_id' => 'string',
        'state_id' => 'string',
        'postal_code' => 'string',
        'country_id' => 'string',
        'tenant_id' => 'string',
        'longitude' => 'float',
        'latitude' => 'float',
        'is_routable' => 'bool',
        'is_global_primary' => 'bool',
        'is_country_primary' => 'bool',
        'can_generate_labels' => 'bool',
        'is_default_sender_address' => 'bool',
        'is_default_return_address' => 'bool',
        'is_default_supping_location' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'title' => null,
        'email' => null,
        'phone' => null,
        'fax' => null,
        'address1' => null,
        'address2' => null,
        'address3' => null,
        'unit' => null,
        'city_id' => null,
        'state_id' => null,
        'postal_code' => null,
        'country_id' => null,
        'tenant_id' => null,
        'longitude' => 'double',
        'latitude' => 'double',
        'is_routable' => null,
        'is_global_primary' => null,
        'is_country_primary' => null,
        'can_generate_labels' => null,
        'is_default_sender_address' => null,
        'is_default_return_address' => null,
        'is_default_supping_location' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'title' => true,
        'email' => true,
        'phone' => true,
        'fax' => true,
        'address1' => true,
        'address2' => true,
        'address3' => true,
        'unit' => true,
        'city_id' => true,
        'state_id' => true,
        'postal_code' => true,
        'country_id' => true,
        'tenant_id' => true,
        'longitude' => false,
        'latitude' => false,
        'is_routable' => false,
        'is_global_primary' => false,
        'is_country_primary' => false,
        'can_generate_labels' => false,
        'is_default_sender_address' => false,
        'is_default_return_address' => false,
        'is_default_supping_location' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
        'email' => 'email',
        'phone' => 'phone',
        'fax' => 'fax',
        'address1' => 'address1',
        'address2' => 'address2',
        'address3' => 'address3',
        'unit' => 'unit',
        'city_id' => 'cityId',
        'state_id' => 'stateId',
        'postal_code' => 'postalCode',
        'country_id' => 'countryId',
        'tenant_id' => 'tenantId',
        'longitude' => 'longitude',
        'latitude' => 'latitude',
        'is_routable' => 'isRoutable',
        'is_global_primary' => 'isGlobalPrimary',
        'is_country_primary' => 'isCountryPrimary',
        'can_generate_labels' => 'canGenerateLabels',
        'is_default_sender_address' => 'isDefaultSenderAddress',
        'is_default_return_address' => 'isDefaultReturnAddress',
        'is_default_supping_location' => 'isDefaultSuppingLocation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'fax' => 'setFax',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'address3' => 'setAddress3',
        'unit' => 'setUnit',
        'city_id' => 'setCityId',
        'state_id' => 'setStateId',
        'postal_code' => 'setPostalCode',
        'country_id' => 'setCountryId',
        'tenant_id' => 'setTenantId',
        'longitude' => 'setLongitude',
        'latitude' => 'setLatitude',
        'is_routable' => 'setIsRoutable',
        'is_global_primary' => 'setIsGlobalPrimary',
        'is_country_primary' => 'setIsCountryPrimary',
        'can_generate_labels' => 'setCanGenerateLabels',
        'is_default_sender_address' => 'setIsDefaultSenderAddress',
        'is_default_return_address' => 'setIsDefaultReturnAddress',
        'is_default_supping_location' => 'setIsDefaultSuppingLocation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'fax' => 'getFax',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'address3' => 'getAddress3',
        'unit' => 'getUnit',
        'city_id' => 'getCityId',
        'state_id' => 'getStateId',
        'postal_code' => 'getPostalCode',
        'country_id' => 'getCountryId',
        'tenant_id' => 'getTenantId',
        'longitude' => 'getLongitude',
        'latitude' => 'getLatitude',
        'is_routable' => 'getIsRoutable',
        'is_global_primary' => 'getIsGlobalPrimary',
        'is_country_primary' => 'getIsCountryPrimary',
        'can_generate_labels' => 'getCanGenerateLabels',
        'is_default_sender_address' => 'getIsDefaultSenderAddress',
        'is_default_return_address' => 'getIsDefaultReturnAddress',
        'is_default_supping_location' => 'getIsDefaultSuppingLocation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('fax', $data ?? [], null);
        $this->setIfExists('address1', $data ?? [], null);
        $this->setIfExists('address2', $data ?? [], null);
        $this->setIfExists('address3', $data ?? [], null);
        $this->setIfExists('unit', $data ?? [], null);
        $this->setIfExists('city_id', $data ?? [], null);
        $this->setIfExists('state_id', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('country_id', $data ?? [], null);
        $this->setIfExists('tenant_id', $data ?? [], null);
        $this->setIfExists('longitude', $data ?? [], null);
        $this->setIfExists('latitude', $data ?? [], null);
        $this->setIfExists('is_routable', $data ?? [], null);
        $this->setIfExists('is_global_primary', $data ?? [], null);
        $this->setIfExists('is_country_primary', $data ?? [], null);
        $this->setIfExists('can_generate_labels', $data ?? [], null);
        $this->setIfExists('is_default_sender_address', $data ?? [], null);
        $this->setIfExists('is_default_return_address', $data ?? [], null);
        $this->setIfExists('is_default_supping_location', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            array_push($this->openAPINullablesSetToNull, 'phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string|null
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string|null $fax fax
     *
     * @return self
     */
    public function setFax($fax)
    {
        if (is_null($fax)) {
            array_push($this->openAPINullablesSetToNull, 'fax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string|null
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string|null $address1 address1
     *
     * @return self
     */
    public function setAddress1($address1)
    {
        if (is_null($address1)) {
            array_push($this->openAPINullablesSetToNull, 'address1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 address2
     *
     * @return self
     */
    public function setAddress2($address2)
    {
        if (is_null($address2)) {
            array_push($this->openAPINullablesSetToNull, 'address2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets address3
     *
     * @return string|null
     */
    public function getAddress3()
    {
        return $this->container['address3'];
    }

    /**
     * Sets address3
     *
     * @param string|null $address3 address3
     *
     * @return self
     */
    public function setAddress3($address3)
    {
        if (is_null($address3)) {
            array_push($this->openAPINullablesSetToNull, 'address3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address3'] = $address3;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string|null
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string|null $unit unit
     *
     * @return self
     */
    public function setUnit($unit)
    {
        if (is_null($unit)) {
            array_push($this->openAPINullablesSetToNull, 'unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets city_id
     *
     * @return string|null
     */
    public function getCityId()
    {
        return $this->container['city_id'];
    }

    /**
     * Sets city_id
     *
     * @param string|null $city_id city_id
     *
     * @return self
     */
    public function setCityId($city_id)
    {
        if (is_null($city_id)) {
            array_push($this->openAPINullablesSetToNull, 'city_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['city_id'] = $city_id;

        return $this;
    }

    /**
     * Gets state_id
     *
     * @return string|null
     */
    public function getStateId()
    {
        return $this->container['state_id'];
    }

    /**
     * Sets state_id
     *
     * @param string|null $state_id state_id
     *
     * @return self
     */
    public function setStateId($state_id)
    {
        if (is_null($state_id)) {
            array_push($this->openAPINullablesSetToNull, 'state_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('state_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['state_id'] = $state_id;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code postal_code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (is_null($postal_code)) {
            array_push($this->openAPINullablesSetToNull, 'postal_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postal_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return string|null
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param string|null $country_id country_id
     *
     * @return self
     */
    public function setCountryId($country_id)
    {
        if (is_null($country_id)) {
            array_push($this->openAPINullablesSetToNull, 'country_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string|null
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string|null $tenant_id tenant_id
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        if (is_null($tenant_id)) {
            array_push($this->openAPINullablesSetToNull, 'tenant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tenant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float|null
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float|null $longitude longitude
     *
     * @return self
     */
    public function setLongitude($longitude)
    {
        if (is_null($longitude)) {
            throw new \InvalidArgumentException('non-nullable longitude cannot be null');
        }
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float|null
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float|null $latitude latitude
     *
     * @return self
     */
    public function setLatitude($latitude)
    {
        if (is_null($latitude)) {
            throw new \InvalidArgumentException('non-nullable latitude cannot be null');
        }
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets is_routable
     *
     * @return bool|null
     */
    public function getIsRoutable()
    {
        return $this->container['is_routable'];
    }

    /**
     * Sets is_routable
     *
     * @param bool|null $is_routable is_routable
     *
     * @return self
     */
    public function setIsRoutable($is_routable)
    {
        if (is_null($is_routable)) {
            throw new \InvalidArgumentException('non-nullable is_routable cannot be null');
        }
        $this->container['is_routable'] = $is_routable;

        return $this;
    }

    /**
     * Gets is_global_primary
     *
     * @return bool|null
     */
    public function getIsGlobalPrimary()
    {
        return $this->container['is_global_primary'];
    }

    /**
     * Sets is_global_primary
     *
     * @param bool|null $is_global_primary is_global_primary
     *
     * @return self
     */
    public function setIsGlobalPrimary($is_global_primary)
    {
        if (is_null($is_global_primary)) {
            throw new \InvalidArgumentException('non-nullable is_global_primary cannot be null');
        }
        $this->container['is_global_primary'] = $is_global_primary;

        return $this;
    }

    /**
     * Gets is_country_primary
     *
     * @return bool|null
     */
    public function getIsCountryPrimary()
    {
        return $this->container['is_country_primary'];
    }

    /**
     * Sets is_country_primary
     *
     * @param bool|null $is_country_primary is_country_primary
     *
     * @return self
     */
    public function setIsCountryPrimary($is_country_primary)
    {
        if (is_null($is_country_primary)) {
            throw new \InvalidArgumentException('non-nullable is_country_primary cannot be null');
        }
        $this->container['is_country_primary'] = $is_country_primary;

        return $this;
    }

    /**
     * Gets can_generate_labels
     *
     * @return bool|null
     */
    public function getCanGenerateLabels()
    {
        return $this->container['can_generate_labels'];
    }

    /**
     * Sets can_generate_labels
     *
     * @param bool|null $can_generate_labels can_generate_labels
     *
     * @return self
     */
    public function setCanGenerateLabels($can_generate_labels)
    {
        if (is_null($can_generate_labels)) {
            throw new \InvalidArgumentException('non-nullable can_generate_labels cannot be null');
        }
        $this->container['can_generate_labels'] = $can_generate_labels;

        return $this;
    }

    /**
     * Gets is_default_sender_address
     *
     * @return bool|null
     */
    public function getIsDefaultSenderAddress()
    {
        return $this->container['is_default_sender_address'];
    }

    /**
     * Sets is_default_sender_address
     *
     * @param bool|null $is_default_sender_address is_default_sender_address
     *
     * @return self
     */
    public function setIsDefaultSenderAddress($is_default_sender_address)
    {
        if (is_null($is_default_sender_address)) {
            throw new \InvalidArgumentException('non-nullable is_default_sender_address cannot be null');
        }
        $this->container['is_default_sender_address'] = $is_default_sender_address;

        return $this;
    }

    /**
     * Gets is_default_return_address
     *
     * @return bool|null
     */
    public function getIsDefaultReturnAddress()
    {
        return $this->container['is_default_return_address'];
    }

    /**
     * Sets is_default_return_address
     *
     * @param bool|null $is_default_return_address is_default_return_address
     *
     * @return self
     */
    public function setIsDefaultReturnAddress($is_default_return_address)
    {
        if (is_null($is_default_return_address)) {
            throw new \InvalidArgumentException('non-nullable is_default_return_address cannot be null');
        }
        $this->container['is_default_return_address'] = $is_default_return_address;

        return $this;
    }

    /**
     * Gets is_default_supping_location
     *
     * @return bool|null
     */
    public function getIsDefaultSuppingLocation()
    {
        return $this->container['is_default_supping_location'];
    }

    /**
     * Sets is_default_supping_location
     *
     * @param bool|null $is_default_supping_location is_default_supping_location
     *
     * @return self
     */
    public function setIsDefaultSuppingLocation($is_default_supping_location)
    {
        if (is_null($is_default_supping_location)) {
            throw new \InvalidArgumentException('non-nullable is_default_supping_location cannot be null');
        }
        $this->container['is_default_supping_location'] = $is_default_supping_location;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


