<?php
/**
 * ContactDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * WalletsService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ContactDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ContactDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ContactDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'timestamp' => '\DateTime',
        'qualified_name' => 'string',
        'tenant_id' => 'string',
        'type' => 'int',
        'public_name' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'job_title' => 'string',
        'cover_url' => 'string',
        'avatar_url' => 'string',
        'country_id' => 'string',
        'timezone_id' => 'string',
        'language_id' => 'string',
        'social_profile_id' => 'string',
        'web_url' => 'string',
        'git_hub_url' => 'string',
        'twitch_url' => 'string',
        'reddit_url' => 'string',
        'tik_tok_url' => 'string',
        'website_url' => 'string',
        'twitter_url' => 'string',
        'facebook_url' => 'string',
        'you_tube_url' => 'string',
        'linked_in_url' => 'string',
        'instagram_url' => 'string',
        'github_username' => 'string',
        'duns' => 'string',
        'tax_id' => 'string',
        'email' => 'string',
        'about' => 'string',
        'street' => 'string',
        'cart_id' => 'string',
        'city_id' => 'string',
        'zip_code' => 'string',
        'state_id' => 'string',
        'wallet_id' => 'string',
        'fax_number' => 'string',
        'postal_code' => 'string',
        'currency_id' => 'string',
        'street_line1' => 'string',
        'street_line2' => 'string',
        'territory_id' => 'string',
        'mobile_phone' => 'string',
        'enrollment_id' => 'string',
        'annual_revenue' => 'string',
        'related_user_id' => 'string',
        'business_phone' => 'string',
        'owner_contact_id' => 'string',
        'related_tenant_id' => 'string',
        'activity_feed_id' => 'string',
        'parent_contact_id' => 'string',
        'identity_provider' => 'string',
        'partner_profile_id' => 'string',
        'primary_contact_id' => 'string',
        'active_directory_id' => 'string',
        'identity_provider_access_token' => 'string',
        'birthday' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'timestamp' => 'date-time',
        'qualified_name' => null,
        'tenant_id' => null,
        'type' => 'int32',
        'public_name' => null,
        'first_name' => null,
        'last_name' => null,
        'job_title' => null,
        'cover_url' => null,
        'avatar_url' => null,
        'country_id' => null,
        'timezone_id' => null,
        'language_id' => null,
        'social_profile_id' => null,
        'web_url' => null,
        'git_hub_url' => null,
        'twitch_url' => null,
        'reddit_url' => null,
        'tik_tok_url' => null,
        'website_url' => null,
        'twitter_url' => null,
        'facebook_url' => null,
        'you_tube_url' => null,
        'linked_in_url' => null,
        'instagram_url' => null,
        'github_username' => null,
        'duns' => null,
        'tax_id' => null,
        'email' => 'email',
        'about' => null,
        'street' => null,
        'cart_id' => null,
        'city_id' => null,
        'zip_code' => null,
        'state_id' => null,
        'wallet_id' => null,
        'fax_number' => null,
        'postal_code' => null,
        'currency_id' => null,
        'street_line1' => null,
        'street_line2' => null,
        'territory_id' => null,
        'mobile_phone' => null,
        'enrollment_id' => null,
        'annual_revenue' => null,
        'related_user_id' => null,
        'business_phone' => null,
        'owner_contact_id' => null,
        'related_tenant_id' => null,
        'activity_feed_id' => null,
        'parent_contact_id' => null,
        'identity_provider' => null,
        'partner_profile_id' => null,
        'primary_contact_id' => null,
        'active_directory_id' => null,
        'identity_provider_access_token' => null,
        'birthday' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'timestamp' => true,
        'qualified_name' => true,
        'tenant_id' => true,
        'type' => false,
        'public_name' => true,
        'first_name' => true,
        'last_name' => true,
        'job_title' => true,
        'cover_url' => true,
        'avatar_url' => true,
        'country_id' => true,
        'timezone_id' => true,
        'language_id' => true,
        'social_profile_id' => true,
        'web_url' => true,
        'git_hub_url' => true,
        'twitch_url' => true,
        'reddit_url' => true,
        'tik_tok_url' => true,
        'website_url' => true,
        'twitter_url' => true,
        'facebook_url' => true,
        'you_tube_url' => true,
        'linked_in_url' => true,
        'instagram_url' => true,
        'github_username' => true,
        'duns' => true,
        'tax_id' => true,
        'email' => true,
        'about' => true,
        'street' => true,
        'cart_id' => true,
        'city_id' => true,
        'zip_code' => true,
        'state_id' => true,
        'wallet_id' => true,
        'fax_number' => true,
        'postal_code' => true,
        'currency_id' => true,
        'street_line1' => true,
        'street_line2' => true,
        'territory_id' => true,
        'mobile_phone' => true,
        'enrollment_id' => true,
        'annual_revenue' => true,
        'related_user_id' => true,
        'business_phone' => true,
        'owner_contact_id' => true,
        'related_tenant_id' => true,
        'activity_feed_id' => true,
        'parent_contact_id' => true,
        'identity_provider' => true,
        'partner_profile_id' => true,
        'primary_contact_id' => true,
        'active_directory_id' => true,
        'identity_provider_access_token' => true,
        'birthday' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'timestamp' => 'timestamp',
        'qualified_name' => 'qualifiedName',
        'tenant_id' => 'tenantId',
        'type' => 'type',
        'public_name' => 'publicName',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'job_title' => 'jobTitle',
        'cover_url' => 'coverUrl',
        'avatar_url' => 'avatarUrl',
        'country_id' => 'countryId',
        'timezone_id' => 'timezoneId',
        'language_id' => 'languageId',
        'social_profile_id' => 'socialProfileId',
        'web_url' => 'webUrl',
        'git_hub_url' => 'gitHubUrl',
        'twitch_url' => 'twitchUrl',
        'reddit_url' => 'redditUrl',
        'tik_tok_url' => 'tikTokUrl',
        'website_url' => 'websiteUrl',
        'twitter_url' => 'twitterUrl',
        'facebook_url' => 'facebookUrl',
        'you_tube_url' => 'youTubeUrl',
        'linked_in_url' => 'linkedInUrl',
        'instagram_url' => 'instagramUrl',
        'github_username' => 'githubUsername',
        'duns' => 'duns',
        'tax_id' => 'taxId',
        'email' => 'email',
        'about' => 'about',
        'street' => 'street',
        'cart_id' => 'cartId',
        'city_id' => 'cityId',
        'zip_code' => 'zipCode',
        'state_id' => 'stateId',
        'wallet_id' => 'walletId',
        'fax_number' => 'faxNumber',
        'postal_code' => 'postalCode',
        'currency_id' => 'currencyId',
        'street_line1' => 'streetLine1',
        'street_line2' => 'streetLine2',
        'territory_id' => 'territoryId',
        'mobile_phone' => 'mobilePhone',
        'enrollment_id' => 'enrollmentId',
        'annual_revenue' => 'annualRevenue',
        'related_user_id' => 'relatedUserId',
        'business_phone' => 'businessPhone',
        'owner_contact_id' => 'ownerContactId',
        'related_tenant_id' => 'relatedTenantId',
        'activity_feed_id' => 'activityFeedId',
        'parent_contact_id' => 'parentContactId',
        'identity_provider' => 'identityProvider',
        'partner_profile_id' => 'partnerProfileId',
        'primary_contact_id' => 'primaryContactId',
        'active_directory_id' => 'activeDirectoryId',
        'identity_provider_access_token' => 'identityProviderAccessToken',
        'birthday' => 'birthday'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'timestamp' => 'setTimestamp',
        'qualified_name' => 'setQualifiedName',
        'tenant_id' => 'setTenantId',
        'type' => 'setType',
        'public_name' => 'setPublicName',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'job_title' => 'setJobTitle',
        'cover_url' => 'setCoverUrl',
        'avatar_url' => 'setAvatarUrl',
        'country_id' => 'setCountryId',
        'timezone_id' => 'setTimezoneId',
        'language_id' => 'setLanguageId',
        'social_profile_id' => 'setSocialProfileId',
        'web_url' => 'setWebUrl',
        'git_hub_url' => 'setGitHubUrl',
        'twitch_url' => 'setTwitchUrl',
        'reddit_url' => 'setRedditUrl',
        'tik_tok_url' => 'setTikTokUrl',
        'website_url' => 'setWebsiteUrl',
        'twitter_url' => 'setTwitterUrl',
        'facebook_url' => 'setFacebookUrl',
        'you_tube_url' => 'setYouTubeUrl',
        'linked_in_url' => 'setLinkedInUrl',
        'instagram_url' => 'setInstagramUrl',
        'github_username' => 'setGithubUsername',
        'duns' => 'setDuns',
        'tax_id' => 'setTaxId',
        'email' => 'setEmail',
        'about' => 'setAbout',
        'street' => 'setStreet',
        'cart_id' => 'setCartId',
        'city_id' => 'setCityId',
        'zip_code' => 'setZipCode',
        'state_id' => 'setStateId',
        'wallet_id' => 'setWalletId',
        'fax_number' => 'setFaxNumber',
        'postal_code' => 'setPostalCode',
        'currency_id' => 'setCurrencyId',
        'street_line1' => 'setStreetLine1',
        'street_line2' => 'setStreetLine2',
        'territory_id' => 'setTerritoryId',
        'mobile_phone' => 'setMobilePhone',
        'enrollment_id' => 'setEnrollmentId',
        'annual_revenue' => 'setAnnualRevenue',
        'related_user_id' => 'setRelatedUserId',
        'business_phone' => 'setBusinessPhone',
        'owner_contact_id' => 'setOwnerContactId',
        'related_tenant_id' => 'setRelatedTenantId',
        'activity_feed_id' => 'setActivityFeedId',
        'parent_contact_id' => 'setParentContactId',
        'identity_provider' => 'setIdentityProvider',
        'partner_profile_id' => 'setPartnerProfileId',
        'primary_contact_id' => 'setPrimaryContactId',
        'active_directory_id' => 'setActiveDirectoryId',
        'identity_provider_access_token' => 'setIdentityProviderAccessToken',
        'birthday' => 'setBirthday'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'timestamp' => 'getTimestamp',
        'qualified_name' => 'getQualifiedName',
        'tenant_id' => 'getTenantId',
        'type' => 'getType',
        'public_name' => 'getPublicName',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'job_title' => 'getJobTitle',
        'cover_url' => 'getCoverUrl',
        'avatar_url' => 'getAvatarUrl',
        'country_id' => 'getCountryId',
        'timezone_id' => 'getTimezoneId',
        'language_id' => 'getLanguageId',
        'social_profile_id' => 'getSocialProfileId',
        'web_url' => 'getWebUrl',
        'git_hub_url' => 'getGitHubUrl',
        'twitch_url' => 'getTwitchUrl',
        'reddit_url' => 'getRedditUrl',
        'tik_tok_url' => 'getTikTokUrl',
        'website_url' => 'getWebsiteUrl',
        'twitter_url' => 'getTwitterUrl',
        'facebook_url' => 'getFacebookUrl',
        'you_tube_url' => 'getYouTubeUrl',
        'linked_in_url' => 'getLinkedInUrl',
        'instagram_url' => 'getInstagramUrl',
        'github_username' => 'getGithubUsername',
        'duns' => 'getDuns',
        'tax_id' => 'getTaxId',
        'email' => 'getEmail',
        'about' => 'getAbout',
        'street' => 'getStreet',
        'cart_id' => 'getCartId',
        'city_id' => 'getCityId',
        'zip_code' => 'getZipCode',
        'state_id' => 'getStateId',
        'wallet_id' => 'getWalletId',
        'fax_number' => 'getFaxNumber',
        'postal_code' => 'getPostalCode',
        'currency_id' => 'getCurrencyId',
        'street_line1' => 'getStreetLine1',
        'street_line2' => 'getStreetLine2',
        'territory_id' => 'getTerritoryId',
        'mobile_phone' => 'getMobilePhone',
        'enrollment_id' => 'getEnrollmentId',
        'annual_revenue' => 'getAnnualRevenue',
        'related_user_id' => 'getRelatedUserId',
        'business_phone' => 'getBusinessPhone',
        'owner_contact_id' => 'getOwnerContactId',
        'related_tenant_id' => 'getRelatedTenantId',
        'activity_feed_id' => 'getActivityFeedId',
        'parent_contact_id' => 'getParentContactId',
        'identity_provider' => 'getIdentityProvider',
        'partner_profile_id' => 'getPartnerProfileId',
        'primary_contact_id' => 'getPrimaryContactId',
        'active_directory_id' => 'getActiveDirectoryId',
        'identity_provider_access_token' => 'getIdentityProviderAccessToken',
        'birthday' => 'getBirthday'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_NUMBER_0 = 0;
    public const TYPE_NUMBER_1 = 1;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_NUMBER_0,
            self::TYPE_NUMBER_1,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('qualified_name', $data ?? [], null);
        $this->setIfExists('tenant_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('public_name', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('job_title', $data ?? [], null);
        $this->setIfExists('cover_url', $data ?? [], null);
        $this->setIfExists('avatar_url', $data ?? [], null);
        $this->setIfExists('country_id', $data ?? [], null);
        $this->setIfExists('timezone_id', $data ?? [], null);
        $this->setIfExists('language_id', $data ?? [], null);
        $this->setIfExists('social_profile_id', $data ?? [], null);
        $this->setIfExists('web_url', $data ?? [], null);
        $this->setIfExists('git_hub_url', $data ?? [], null);
        $this->setIfExists('twitch_url', $data ?? [], null);
        $this->setIfExists('reddit_url', $data ?? [], null);
        $this->setIfExists('tik_tok_url', $data ?? [], null);
        $this->setIfExists('website_url', $data ?? [], null);
        $this->setIfExists('twitter_url', $data ?? [], null);
        $this->setIfExists('facebook_url', $data ?? [], null);
        $this->setIfExists('you_tube_url', $data ?? [], null);
        $this->setIfExists('linked_in_url', $data ?? [], null);
        $this->setIfExists('instagram_url', $data ?? [], null);
        $this->setIfExists('github_username', $data ?? [], null);
        $this->setIfExists('duns', $data ?? [], null);
        $this->setIfExists('tax_id', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('about', $data ?? [], null);
        $this->setIfExists('street', $data ?? [], null);
        $this->setIfExists('cart_id', $data ?? [], null);
        $this->setIfExists('city_id', $data ?? [], null);
        $this->setIfExists('zip_code', $data ?? [], null);
        $this->setIfExists('state_id', $data ?? [], null);
        $this->setIfExists('wallet_id', $data ?? [], null);
        $this->setIfExists('fax_number', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('currency_id', $data ?? [], null);
        $this->setIfExists('street_line1', $data ?? [], null);
        $this->setIfExists('street_line2', $data ?? [], null);
        $this->setIfExists('territory_id', $data ?? [], null);
        $this->setIfExists('mobile_phone', $data ?? [], null);
        $this->setIfExists('enrollment_id', $data ?? [], null);
        $this->setIfExists('annual_revenue', $data ?? [], null);
        $this->setIfExists('related_user_id', $data ?? [], null);
        $this->setIfExists('business_phone', $data ?? [], null);
        $this->setIfExists('owner_contact_id', $data ?? [], null);
        $this->setIfExists('related_tenant_id', $data ?? [], null);
        $this->setIfExists('activity_feed_id', $data ?? [], null);
        $this->setIfExists('parent_contact_id', $data ?? [], null);
        $this->setIfExists('identity_provider', $data ?? [], null);
        $this->setIfExists('partner_profile_id', $data ?? [], null);
        $this->setIfExists('primary_contact_id', $data ?? [], null);
        $this->setIfExists('active_directory_id', $data ?? [], null);
        $this->setIfExists('identity_provider_access_token', $data ?? [], null);
        $this->setIfExists('birthday', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets qualified_name
     *
     * @return string|null
     */
    public function getQualifiedName()
    {
        return $this->container['qualified_name'];
    }

    /**
     * Sets qualified_name
     *
     * @param string|null $qualified_name qualified_name
     *
     * @return self
     */
    public function setQualifiedName($qualified_name)
    {
        if (is_null($qualified_name)) {
            array_push($this->openAPINullablesSetToNull, 'qualified_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('qualified_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['qualified_name'] = $qualified_name;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string|null
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string|null $tenant_id tenant_id
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        if (is_null($tenant_id)) {
            array_push($this->openAPINullablesSetToNull, 'tenant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tenant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets public_name
     *
     * @return string|null
     */
    public function getPublicName()
    {
        return $this->container['public_name'];
    }

    /**
     * Sets public_name
     *
     * @param string|null $public_name public_name
     *
     * @return self
     */
    public function setPublicName($public_name)
    {
        if (is_null($public_name)) {
            array_push($this->openAPINullablesSetToNull, 'public_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('public_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['public_name'] = $public_name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            array_push($this->openAPINullablesSetToNull, 'first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            array_push($this->openAPINullablesSetToNull, 'last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string|null
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string|null $job_title job_title
     *
     * @return self
     */
    public function setJobTitle($job_title)
    {
        if (is_null($job_title)) {
            array_push($this->openAPINullablesSetToNull, 'job_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('job_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets cover_url
     *
     * @return string|null
     */
    public function getCoverUrl()
    {
        return $this->container['cover_url'];
    }

    /**
     * Sets cover_url
     *
     * @param string|null $cover_url cover_url
     *
     * @return self
     */
    public function setCoverUrl($cover_url)
    {
        if (is_null($cover_url)) {
            array_push($this->openAPINullablesSetToNull, 'cover_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cover_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cover_url'] = $cover_url;

        return $this;
    }

    /**
     * Gets avatar_url
     *
     * @return string|null
     */
    public function getAvatarUrl()
    {
        return $this->container['avatar_url'];
    }

    /**
     * Sets avatar_url
     *
     * @param string|null $avatar_url avatar_url
     *
     * @return self
     */
    public function setAvatarUrl($avatar_url)
    {
        if (is_null($avatar_url)) {
            array_push($this->openAPINullablesSetToNull, 'avatar_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avatar_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avatar_url'] = $avatar_url;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return string|null
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param string|null $country_id country_id
     *
     * @return self
     */
    public function setCountryId($country_id)
    {
        if (is_null($country_id)) {
            array_push($this->openAPINullablesSetToNull, 'country_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets timezone_id
     *
     * @return string|null
     */
    public function getTimezoneId()
    {
        return $this->container['timezone_id'];
    }

    /**
     * Sets timezone_id
     *
     * @param string|null $timezone_id timezone_id
     *
     * @return self
     */
    public function setTimezoneId($timezone_id)
    {
        if (is_null($timezone_id)) {
            array_push($this->openAPINullablesSetToNull, 'timezone_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timezone_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timezone_id'] = $timezone_id;

        return $this;
    }

    /**
     * Gets language_id
     *
     * @return string|null
     */
    public function getLanguageId()
    {
        return $this->container['language_id'];
    }

    /**
     * Sets language_id
     *
     * @param string|null $language_id language_id
     *
     * @return self
     */
    public function setLanguageId($language_id)
    {
        if (is_null($language_id)) {
            array_push($this->openAPINullablesSetToNull, 'language_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('language_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['language_id'] = $language_id;

        return $this;
    }

    /**
     * Gets social_profile_id
     *
     * @return string|null
     */
    public function getSocialProfileId()
    {
        return $this->container['social_profile_id'];
    }

    /**
     * Sets social_profile_id
     *
     * @param string|null $social_profile_id social_profile_id
     *
     * @return self
     */
    public function setSocialProfileId($social_profile_id)
    {
        if (is_null($social_profile_id)) {
            array_push($this->openAPINullablesSetToNull, 'social_profile_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('social_profile_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['social_profile_id'] = $social_profile_id;

        return $this;
    }

    /**
     * Gets web_url
     *
     * @return string|null
     */
    public function getWebUrl()
    {
        return $this->container['web_url'];
    }

    /**
     * Sets web_url
     *
     * @param string|null $web_url web_url
     *
     * @return self
     */
    public function setWebUrl($web_url)
    {
        if (is_null($web_url)) {
            array_push($this->openAPINullablesSetToNull, 'web_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('web_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['web_url'] = $web_url;

        return $this;
    }

    /**
     * Gets git_hub_url
     *
     * @return string|null
     */
    public function getGitHubUrl()
    {
        return $this->container['git_hub_url'];
    }

    /**
     * Sets git_hub_url
     *
     * @param string|null $git_hub_url git_hub_url
     *
     * @return self
     */
    public function setGitHubUrl($git_hub_url)
    {
        if (is_null($git_hub_url)) {
            array_push($this->openAPINullablesSetToNull, 'git_hub_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('git_hub_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['git_hub_url'] = $git_hub_url;

        return $this;
    }

    /**
     * Gets twitch_url
     *
     * @return string|null
     */
    public function getTwitchUrl()
    {
        return $this->container['twitch_url'];
    }

    /**
     * Sets twitch_url
     *
     * @param string|null $twitch_url twitch_url
     *
     * @return self
     */
    public function setTwitchUrl($twitch_url)
    {
        if (is_null($twitch_url)) {
            array_push($this->openAPINullablesSetToNull, 'twitch_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('twitch_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['twitch_url'] = $twitch_url;

        return $this;
    }

    /**
     * Gets reddit_url
     *
     * @return string|null
     */
    public function getRedditUrl()
    {
        return $this->container['reddit_url'];
    }

    /**
     * Sets reddit_url
     *
     * @param string|null $reddit_url reddit_url
     *
     * @return self
     */
    public function setRedditUrl($reddit_url)
    {
        if (is_null($reddit_url)) {
            array_push($this->openAPINullablesSetToNull, 'reddit_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reddit_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reddit_url'] = $reddit_url;

        return $this;
    }

    /**
     * Gets tik_tok_url
     *
     * @return string|null
     */
    public function getTikTokUrl()
    {
        return $this->container['tik_tok_url'];
    }

    /**
     * Sets tik_tok_url
     *
     * @param string|null $tik_tok_url tik_tok_url
     *
     * @return self
     */
    public function setTikTokUrl($tik_tok_url)
    {
        if (is_null($tik_tok_url)) {
            array_push($this->openAPINullablesSetToNull, 'tik_tok_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tik_tok_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tik_tok_url'] = $tik_tok_url;

        return $this;
    }

    /**
     * Gets website_url
     *
     * @return string|null
     */
    public function getWebsiteUrl()
    {
        return $this->container['website_url'];
    }

    /**
     * Sets website_url
     *
     * @param string|null $website_url website_url
     *
     * @return self
     */
    public function setWebsiteUrl($website_url)
    {
        if (is_null($website_url)) {
            array_push($this->openAPINullablesSetToNull, 'website_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('website_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['website_url'] = $website_url;

        return $this;
    }

    /**
     * Gets twitter_url
     *
     * @return string|null
     */
    public function getTwitterUrl()
    {
        return $this->container['twitter_url'];
    }

    /**
     * Sets twitter_url
     *
     * @param string|null $twitter_url twitter_url
     *
     * @return self
     */
    public function setTwitterUrl($twitter_url)
    {
        if (is_null($twitter_url)) {
            array_push($this->openAPINullablesSetToNull, 'twitter_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('twitter_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['twitter_url'] = $twitter_url;

        return $this;
    }

    /**
     * Gets facebook_url
     *
     * @return string|null
     */
    public function getFacebookUrl()
    {
        return $this->container['facebook_url'];
    }

    /**
     * Sets facebook_url
     *
     * @param string|null $facebook_url facebook_url
     *
     * @return self
     */
    public function setFacebookUrl($facebook_url)
    {
        if (is_null($facebook_url)) {
            array_push($this->openAPINullablesSetToNull, 'facebook_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('facebook_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['facebook_url'] = $facebook_url;

        return $this;
    }

    /**
     * Gets you_tube_url
     *
     * @return string|null
     */
    public function getYouTubeUrl()
    {
        return $this->container['you_tube_url'];
    }

    /**
     * Sets you_tube_url
     *
     * @param string|null $you_tube_url you_tube_url
     *
     * @return self
     */
    public function setYouTubeUrl($you_tube_url)
    {
        if (is_null($you_tube_url)) {
            array_push($this->openAPINullablesSetToNull, 'you_tube_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('you_tube_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['you_tube_url'] = $you_tube_url;

        return $this;
    }

    /**
     * Gets linked_in_url
     *
     * @return string|null
     */
    public function getLinkedInUrl()
    {
        return $this->container['linked_in_url'];
    }

    /**
     * Sets linked_in_url
     *
     * @param string|null $linked_in_url linked_in_url
     *
     * @return self
     */
    public function setLinkedInUrl($linked_in_url)
    {
        if (is_null($linked_in_url)) {
            array_push($this->openAPINullablesSetToNull, 'linked_in_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('linked_in_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['linked_in_url'] = $linked_in_url;

        return $this;
    }

    /**
     * Gets instagram_url
     *
     * @return string|null
     */
    public function getInstagramUrl()
    {
        return $this->container['instagram_url'];
    }

    /**
     * Sets instagram_url
     *
     * @param string|null $instagram_url instagram_url
     *
     * @return self
     */
    public function setInstagramUrl($instagram_url)
    {
        if (is_null($instagram_url)) {
            array_push($this->openAPINullablesSetToNull, 'instagram_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('instagram_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['instagram_url'] = $instagram_url;

        return $this;
    }

    /**
     * Gets github_username
     *
     * @return string|null
     */
    public function getGithubUsername()
    {
        return $this->container['github_username'];
    }

    /**
     * Sets github_username
     *
     * @param string|null $github_username github_username
     *
     * @return self
     */
    public function setGithubUsername($github_username)
    {
        if (is_null($github_username)) {
            array_push($this->openAPINullablesSetToNull, 'github_username');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('github_username', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['github_username'] = $github_username;

        return $this;
    }

    /**
     * Gets duns
     *
     * @return string|null
     */
    public function getDuns()
    {
        return $this->container['duns'];
    }

    /**
     * Sets duns
     *
     * @param string|null $duns duns
     *
     * @return self
     */
    public function setDuns($duns)
    {
        if (is_null($duns)) {
            array_push($this->openAPINullablesSetToNull, 'duns');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('duns', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['duns'] = $duns;

        return $this;
    }

    /**
     * Gets tax_id
     *
     * @return string|null
     */
    public function getTaxId()
    {
        return $this->container['tax_id'];
    }

    /**
     * Sets tax_id
     *
     * @param string|null $tax_id tax_id
     *
     * @return self
     */
    public function setTaxId($tax_id)
    {
        if (is_null($tax_id)) {
            array_push($this->openAPINullablesSetToNull, 'tax_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tax_id'] = $tax_id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets about
     *
     * @return string|null
     */
    public function getAbout()
    {
        return $this->container['about'];
    }

    /**
     * Sets about
     *
     * @param string|null $about about
     *
     * @return self
     */
    public function setAbout($about)
    {
        if (is_null($about)) {
            array_push($this->openAPINullablesSetToNull, 'about');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('about', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['about'] = $about;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string|null
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string|null $street street
     *
     * @return self
     */
    public function setStreet($street)
    {
        if (is_null($street)) {
            array_push($this->openAPINullablesSetToNull, 'street');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets cart_id
     *
     * @return string|null
     */
    public function getCartId()
    {
        return $this->container['cart_id'];
    }

    /**
     * Sets cart_id
     *
     * @param string|null $cart_id cart_id
     *
     * @return self
     */
    public function setCartId($cart_id)
    {
        if (is_null($cart_id)) {
            array_push($this->openAPINullablesSetToNull, 'cart_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cart_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cart_id'] = $cart_id;

        return $this;
    }

    /**
     * Gets city_id
     *
     * @return string|null
     */
    public function getCityId()
    {
        return $this->container['city_id'];
    }

    /**
     * Sets city_id
     *
     * @param string|null $city_id city_id
     *
     * @return self
     */
    public function setCityId($city_id)
    {
        if (is_null($city_id)) {
            array_push($this->openAPINullablesSetToNull, 'city_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['city_id'] = $city_id;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string|null
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string|null $zip_code zip_code
     *
     * @return self
     */
    public function setZipCode($zip_code)
    {
        if (is_null($zip_code)) {
            array_push($this->openAPINullablesSetToNull, 'zip_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zip_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets state_id
     *
     * @return string|null
     */
    public function getStateId()
    {
        return $this->container['state_id'];
    }

    /**
     * Sets state_id
     *
     * @param string|null $state_id state_id
     *
     * @return self
     */
    public function setStateId($state_id)
    {
        if (is_null($state_id)) {
            array_push($this->openAPINullablesSetToNull, 'state_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('state_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['state_id'] = $state_id;

        return $this;
    }

    /**
     * Gets wallet_id
     *
     * @return string|null
     */
    public function getWalletId()
    {
        return $this->container['wallet_id'];
    }

    /**
     * Sets wallet_id
     *
     * @param string|null $wallet_id wallet_id
     *
     * @return self
     */
    public function setWalletId($wallet_id)
    {
        if (is_null($wallet_id)) {
            array_push($this->openAPINullablesSetToNull, 'wallet_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('wallet_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['wallet_id'] = $wallet_id;

        return $this;
    }

    /**
     * Gets fax_number
     *
     * @return string|null
     */
    public function getFaxNumber()
    {
        return $this->container['fax_number'];
    }

    /**
     * Sets fax_number
     *
     * @param string|null $fax_number fax_number
     *
     * @return self
     */
    public function setFaxNumber($fax_number)
    {
        if (is_null($fax_number)) {
            array_push($this->openAPINullablesSetToNull, 'fax_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fax_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fax_number'] = $fax_number;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code postal_code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (is_null($postal_code)) {
            array_push($this->openAPINullablesSetToNull, 'postal_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postal_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string|null
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string|null $currency_id currency_id
     *
     * @return self
     */
    public function setCurrencyId($currency_id)
    {
        if (is_null($currency_id)) {
            array_push($this->openAPINullablesSetToNull, 'currency_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets street_line1
     *
     * @return string|null
     */
    public function getStreetLine1()
    {
        return $this->container['street_line1'];
    }

    /**
     * Sets street_line1
     *
     * @param string|null $street_line1 street_line1
     *
     * @return self
     */
    public function setStreetLine1($street_line1)
    {
        if (is_null($street_line1)) {
            array_push($this->openAPINullablesSetToNull, 'street_line1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_line1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['street_line1'] = $street_line1;

        return $this;
    }

    /**
     * Gets street_line2
     *
     * @return string|null
     */
    public function getStreetLine2()
    {
        return $this->container['street_line2'];
    }

    /**
     * Sets street_line2
     *
     * @param string|null $street_line2 street_line2
     *
     * @return self
     */
    public function setStreetLine2($street_line2)
    {
        if (is_null($street_line2)) {
            array_push($this->openAPINullablesSetToNull, 'street_line2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_line2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['street_line2'] = $street_line2;

        return $this;
    }

    /**
     * Gets territory_id
     *
     * @return string|null
     */
    public function getTerritoryId()
    {
        return $this->container['territory_id'];
    }

    /**
     * Sets territory_id
     *
     * @param string|null $territory_id territory_id
     *
     * @return self
     */
    public function setTerritoryId($territory_id)
    {
        if (is_null($territory_id)) {
            array_push($this->openAPINullablesSetToNull, 'territory_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('territory_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['territory_id'] = $territory_id;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return string|null
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param string|null $mobile_phone mobile_phone
     *
     * @return self
     */
    public function setMobilePhone($mobile_phone)
    {
        if (is_null($mobile_phone)) {
            array_push($this->openAPINullablesSetToNull, 'mobile_phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mobile_phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets enrollment_id
     *
     * @return string|null
     */
    public function getEnrollmentId()
    {
        return $this->container['enrollment_id'];
    }

    /**
     * Sets enrollment_id
     *
     * @param string|null $enrollment_id enrollment_id
     *
     * @return self
     */
    public function setEnrollmentId($enrollment_id)
    {
        if (is_null($enrollment_id)) {
            array_push($this->openAPINullablesSetToNull, 'enrollment_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enrollment_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enrollment_id'] = $enrollment_id;

        return $this;
    }

    /**
     * Gets annual_revenue
     *
     * @return string|null
     */
    public function getAnnualRevenue()
    {
        return $this->container['annual_revenue'];
    }

    /**
     * Sets annual_revenue
     *
     * @param string|null $annual_revenue annual_revenue
     *
     * @return self
     */
    public function setAnnualRevenue($annual_revenue)
    {
        if (is_null($annual_revenue)) {
            array_push($this->openAPINullablesSetToNull, 'annual_revenue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('annual_revenue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['annual_revenue'] = $annual_revenue;

        return $this;
    }

    /**
     * Gets related_user_id
     *
     * @return string|null
     */
    public function getRelatedUserId()
    {
        return $this->container['related_user_id'];
    }

    /**
     * Sets related_user_id
     *
     * @param string|null $related_user_id related_user_id
     *
     * @return self
     */
    public function setRelatedUserId($related_user_id)
    {
        if (is_null($related_user_id)) {
            array_push($this->openAPINullablesSetToNull, 'related_user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('related_user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['related_user_id'] = $related_user_id;

        return $this;
    }

    /**
     * Gets business_phone
     *
     * @return string|null
     */
    public function getBusinessPhone()
    {
        return $this->container['business_phone'];
    }

    /**
     * Sets business_phone
     *
     * @param string|null $business_phone business_phone
     *
     * @return self
     */
    public function setBusinessPhone($business_phone)
    {
        if (is_null($business_phone)) {
            array_push($this->openAPINullablesSetToNull, 'business_phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_phone'] = $business_phone;

        return $this;
    }

    /**
     * Gets owner_contact_id
     *
     * @return string|null
     */
    public function getOwnerContactId()
    {
        return $this->container['owner_contact_id'];
    }

    /**
     * Sets owner_contact_id
     *
     * @param string|null $owner_contact_id owner_contact_id
     *
     * @return self
     */
    public function setOwnerContactId($owner_contact_id)
    {
        if (is_null($owner_contact_id)) {
            array_push($this->openAPINullablesSetToNull, 'owner_contact_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('owner_contact_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['owner_contact_id'] = $owner_contact_id;

        return $this;
    }

    /**
     * Gets related_tenant_id
     *
     * @return string|null
     */
    public function getRelatedTenantId()
    {
        return $this->container['related_tenant_id'];
    }

    /**
     * Sets related_tenant_id
     *
     * @param string|null $related_tenant_id related_tenant_id
     *
     * @return self
     */
    public function setRelatedTenantId($related_tenant_id)
    {
        if (is_null($related_tenant_id)) {
            array_push($this->openAPINullablesSetToNull, 'related_tenant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('related_tenant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['related_tenant_id'] = $related_tenant_id;

        return $this;
    }

    /**
     * Gets activity_feed_id
     *
     * @return string|null
     */
    public function getActivityFeedId()
    {
        return $this->container['activity_feed_id'];
    }

    /**
     * Sets activity_feed_id
     *
     * @param string|null $activity_feed_id activity_feed_id
     *
     * @return self
     */
    public function setActivityFeedId($activity_feed_id)
    {
        if (is_null($activity_feed_id)) {
            array_push($this->openAPINullablesSetToNull, 'activity_feed_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('activity_feed_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['activity_feed_id'] = $activity_feed_id;

        return $this;
    }

    /**
     * Gets parent_contact_id
     *
     * @return string|null
     */
    public function getParentContactId()
    {
        return $this->container['parent_contact_id'];
    }

    /**
     * Sets parent_contact_id
     *
     * @param string|null $parent_contact_id parent_contact_id
     *
     * @return self
     */
    public function setParentContactId($parent_contact_id)
    {
        if (is_null($parent_contact_id)) {
            array_push($this->openAPINullablesSetToNull, 'parent_contact_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_contact_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_contact_id'] = $parent_contact_id;

        return $this;
    }

    /**
     * Gets identity_provider
     *
     * @return string|null
     */
    public function getIdentityProvider()
    {
        return $this->container['identity_provider'];
    }

    /**
     * Sets identity_provider
     *
     * @param string|null $identity_provider identity_provider
     *
     * @return self
     */
    public function setIdentityProvider($identity_provider)
    {
        if (is_null($identity_provider)) {
            array_push($this->openAPINullablesSetToNull, 'identity_provider');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('identity_provider', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['identity_provider'] = $identity_provider;

        return $this;
    }

    /**
     * Gets partner_profile_id
     *
     * @return string|null
     */
    public function getPartnerProfileId()
    {
        return $this->container['partner_profile_id'];
    }

    /**
     * Sets partner_profile_id
     *
     * @param string|null $partner_profile_id partner_profile_id
     *
     * @return self
     */
    public function setPartnerProfileId($partner_profile_id)
    {
        if (is_null($partner_profile_id)) {
            array_push($this->openAPINullablesSetToNull, 'partner_profile_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('partner_profile_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['partner_profile_id'] = $partner_profile_id;

        return $this;
    }

    /**
     * Gets primary_contact_id
     *
     * @return string|null
     */
    public function getPrimaryContactId()
    {
        return $this->container['primary_contact_id'];
    }

    /**
     * Sets primary_contact_id
     *
     * @param string|null $primary_contact_id primary_contact_id
     *
     * @return self
     */
    public function setPrimaryContactId($primary_contact_id)
    {
        if (is_null($primary_contact_id)) {
            array_push($this->openAPINullablesSetToNull, 'primary_contact_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('primary_contact_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['primary_contact_id'] = $primary_contact_id;

        return $this;
    }

    /**
     * Gets active_directory_id
     *
     * @return string|null
     */
    public function getActiveDirectoryId()
    {
        return $this->container['active_directory_id'];
    }

    /**
     * Sets active_directory_id
     *
     * @param string|null $active_directory_id active_directory_id
     *
     * @return self
     */
    public function setActiveDirectoryId($active_directory_id)
    {
        if (is_null($active_directory_id)) {
            array_push($this->openAPINullablesSetToNull, 'active_directory_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('active_directory_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['active_directory_id'] = $active_directory_id;

        return $this;
    }

    /**
     * Gets identity_provider_access_token
     *
     * @return string|null
     */
    public function getIdentityProviderAccessToken()
    {
        return $this->container['identity_provider_access_token'];
    }

    /**
     * Sets identity_provider_access_token
     *
     * @param string|null $identity_provider_access_token identity_provider_access_token
     *
     * @return self
     */
    public function setIdentityProviderAccessToken($identity_provider_access_token)
    {
        if (is_null($identity_provider_access_token)) {
            array_push($this->openAPINullablesSetToNull, 'identity_provider_access_token');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('identity_provider_access_token', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['identity_provider_access_token'] = $identity_provider_access_token;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return \DateTime|null
     */
    public function getBirthday()
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param \DateTime|null $birthday birthday
     *
     * @return self
     */
    public function setBirthday($birthday)
    {
        if (is_null($birthday)) {
            array_push($this->openAPINullablesSetToNull, 'birthday');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birthday', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['birthday'] = $birthday;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


