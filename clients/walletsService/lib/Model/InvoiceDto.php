<?php
/**
 * InvoiceDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * WalletsService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InvoiceDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InvoiceDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvoiceDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'timestamp' => '\DateTime',
        'closed' => 'bool',
        'type' => 'string',
        'title' => 'string',
        'user_id' => 'string',
        'tenant_id' => 'string',
        'currency_id' => 'string',
        'description' => 'string',
        'price_list_id' => 'string',
        'enrollment_id' => 'string',
        'individual_id' => 'string',
        'organization_id' => 'string',
        'receiver_tenant_id' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'company_name' => 'string',
        'billing_email' => 'string',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'postal_code' => 'string',
        'country_id' => 'string',
        'state_id' => 'string',
        'city_id' => 'string',
        'customer_notes' => 'string',
        'forex_rate' => 'float',
        'total' => 'float',
        'total_taxes' => 'float',
        'total_tax_base' => 'float',
        'total_discounts' => 'float',
        'total_surcharges' => 'float',
        'total_global_discounts' => 'float',
        'total_global_surcharges' => 'float',
        'total_taxes_in_usd' => 'float',
        'total_amount_in_usd' => 'float',
        'total_profit_in_usd' => 'float',
        'total_tax_base_in_usd' => 'float',
        'total_discounts_in_usd' => 'float',
        'total_surcharges_in_usd' => 'float',
        'total_detail_amount_in_usd' => 'float',
        'total_global_discounts_in_usd' => 'float',
        'total_global_surcharges_in_usd' => 'float',
        'total_withholding_taxes_in_usd' => 'float',
        'total_shipping_cost_in_usd' => 'float',
        'total_shipping_taxes_in_usd' => 'float',
        'currency' => '\OpenAPI\Client\Model\Currency',
        'total_in_usd' => '\OpenAPI\Client\Model\Money',
        'total_tax_amount_in_usd' => '\OpenAPI\Client\Model\Money',
        'total_tax_base_amount_in_usd' => '\OpenAPI\Client\Model\Money',
        'total_discounts_amount_in_usd' => '\OpenAPI\Client\Model\Money',
        'total_surcharges_amount_in_usd' => '\OpenAPI\Client\Model\Money',
        'total_global_discounts_amount_in_usd' => '\OpenAPI\Client\Model\Money',
        'total_global_surcharges_amount_in_usd' => '\OpenAPI\Client\Model\Money',
        'total_amount' => '\OpenAPI\Client\Model\Money',
        'total_tax_amount' => '\OpenAPI\Client\Model\Money',
        'total_tax_base_amount' => '\OpenAPI\Client\Model\Money',
        'total_discounts_amount' => '\OpenAPI\Client\Model\Money',
        'total_surcharges_amount' => '\OpenAPI\Client\Model\Money',
        'total_global_discounts_amount' => '\OpenAPI\Client\Model\Money',
        'total_global_surcharges_amount' => '\OpenAPI\Client\Model\Money',
        'paid' => 'bool',
        'number' => 'int',
        'notes' => 'string',
        'order_id' => 'string',
        'enumeration' => 'string',
        'payment_mode_id' => 'string',
        'enumeration_range_id' => 'string',
        'emisor_billing_profile_id' => 'string',
        'receiver_billing_profile_id' => 'string',
        'emisor_wallet_account_id' => 'string',
        'receiver_wallet_account_id' => 'string',
        'payment_due' => '\DateTime',
        'invoice_type' => 'int',
        'document_type' => 'int',
        'invoice_status' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'timestamp' => 'date-time',
        'closed' => null,
        'type' => null,
        'title' => null,
        'user_id' => null,
        'tenant_id' => null,
        'currency_id' => null,
        'description' => null,
        'price_list_id' => null,
        'enrollment_id' => null,
        'individual_id' => null,
        'organization_id' => null,
        'receiver_tenant_id' => null,
        'first_name' => null,
        'last_name' => null,
        'company_name' => null,
        'billing_email' => null,
        'address_line1' => null,
        'address_line2' => null,
        'postal_code' => null,
        'country_id' => null,
        'state_id' => null,
        'city_id' => null,
        'customer_notes' => null,
        'forex_rate' => 'double',
        'total' => 'double',
        'total_taxes' => 'double',
        'total_tax_base' => 'double',
        'total_discounts' => 'double',
        'total_surcharges' => 'double',
        'total_global_discounts' => 'double',
        'total_global_surcharges' => 'double',
        'total_taxes_in_usd' => 'double',
        'total_amount_in_usd' => 'double',
        'total_profit_in_usd' => 'double',
        'total_tax_base_in_usd' => 'double',
        'total_discounts_in_usd' => 'double',
        'total_surcharges_in_usd' => 'double',
        'total_detail_amount_in_usd' => 'double',
        'total_global_discounts_in_usd' => 'double',
        'total_global_surcharges_in_usd' => 'double',
        'total_withholding_taxes_in_usd' => 'double',
        'total_shipping_cost_in_usd' => 'double',
        'total_shipping_taxes_in_usd' => 'double',
        'currency' => null,
        'total_in_usd' => null,
        'total_tax_amount_in_usd' => null,
        'total_tax_base_amount_in_usd' => null,
        'total_discounts_amount_in_usd' => null,
        'total_surcharges_amount_in_usd' => null,
        'total_global_discounts_amount_in_usd' => null,
        'total_global_surcharges_amount_in_usd' => null,
        'total_amount' => null,
        'total_tax_amount' => null,
        'total_tax_base_amount' => null,
        'total_discounts_amount' => null,
        'total_surcharges_amount' => null,
        'total_global_discounts_amount' => null,
        'total_global_surcharges_amount' => null,
        'paid' => null,
        'number' => 'int64',
        'notes' => null,
        'order_id' => null,
        'enumeration' => null,
        'payment_mode_id' => null,
        'enumeration_range_id' => null,
        'emisor_billing_profile_id' => null,
        'receiver_billing_profile_id' => null,
        'emisor_wallet_account_id' => null,
        'receiver_wallet_account_id' => null,
        'payment_due' => 'date-time',
        'invoice_type' => 'int32',
        'document_type' => 'int32',
        'invoice_status' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'timestamp' => true,
        'closed' => false,
        'type' => true,
        'title' => true,
        'user_id' => true,
        'tenant_id' => true,
        'currency_id' => true,
        'description' => true,
        'price_list_id' => true,
        'enrollment_id' => true,
        'individual_id' => true,
        'organization_id' => true,
        'receiver_tenant_id' => true,
        'first_name' => true,
        'last_name' => true,
        'company_name' => true,
        'billing_email' => true,
        'address_line1' => true,
        'address_line2' => true,
        'postal_code' => true,
        'country_id' => true,
        'state_id' => true,
        'city_id' => true,
        'customer_notes' => true,
        'forex_rate' => false,
        'total' => false,
        'total_taxes' => false,
        'total_tax_base' => false,
        'total_discounts' => false,
        'total_surcharges' => false,
        'total_global_discounts' => false,
        'total_global_surcharges' => false,
        'total_taxes_in_usd' => false,
        'total_amount_in_usd' => false,
        'total_profit_in_usd' => false,
        'total_tax_base_in_usd' => false,
        'total_discounts_in_usd' => false,
        'total_surcharges_in_usd' => false,
        'total_detail_amount_in_usd' => false,
        'total_global_discounts_in_usd' => false,
        'total_global_surcharges_in_usd' => false,
        'total_withholding_taxes_in_usd' => false,
        'total_shipping_cost_in_usd' => false,
        'total_shipping_taxes_in_usd' => false,
        'currency' => false,
        'total_in_usd' => false,
        'total_tax_amount_in_usd' => false,
        'total_tax_base_amount_in_usd' => false,
        'total_discounts_amount_in_usd' => false,
        'total_surcharges_amount_in_usd' => false,
        'total_global_discounts_amount_in_usd' => false,
        'total_global_surcharges_amount_in_usd' => false,
        'total_amount' => false,
        'total_tax_amount' => false,
        'total_tax_base_amount' => false,
        'total_discounts_amount' => false,
        'total_surcharges_amount' => false,
        'total_global_discounts_amount' => false,
        'total_global_surcharges_amount' => false,
        'paid' => false,
        'number' => false,
        'notes' => true,
        'order_id' => true,
        'enumeration' => true,
        'payment_mode_id' => true,
        'enumeration_range_id' => true,
        'emisor_billing_profile_id' => true,
        'receiver_billing_profile_id' => true,
        'emisor_wallet_account_id' => true,
        'receiver_wallet_account_id' => true,
        'payment_due' => true,
        'invoice_type' => false,
        'document_type' => false,
        'invoice_status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'timestamp' => 'timestamp',
        'closed' => 'closed',
        'type' => 'type',
        'title' => 'title',
        'user_id' => 'userId',
        'tenant_id' => 'tenantId',
        'currency_id' => 'currencyId',
        'description' => 'description',
        'price_list_id' => 'priceListId',
        'enrollment_id' => 'enrollmentId',
        'individual_id' => 'individualId',
        'organization_id' => 'organizationId',
        'receiver_tenant_id' => 'receiverTenantId',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'company_name' => 'companyName',
        'billing_email' => 'billingEmail',
        'address_line1' => 'addressLine1',
        'address_line2' => 'addressLine2',
        'postal_code' => 'postalCode',
        'country_id' => 'countryId',
        'state_id' => 'stateId',
        'city_id' => 'cityId',
        'customer_notes' => 'customerNotes',
        'forex_rate' => 'forexRate',
        'total' => 'total',
        'total_taxes' => 'totalTaxes',
        'total_tax_base' => 'totalTaxBase',
        'total_discounts' => 'totalDiscounts',
        'total_surcharges' => 'totalSurcharges',
        'total_global_discounts' => 'totalGlobalDiscounts',
        'total_global_surcharges' => 'totalGlobalSurcharges',
        'total_taxes_in_usd' => 'totalTaxesInUsd',
        'total_amount_in_usd' => 'totalAmountInUsd',
        'total_profit_in_usd' => 'totalProfitInUsd',
        'total_tax_base_in_usd' => 'totalTaxBaseInUsd',
        'total_discounts_in_usd' => 'totalDiscountsInUsd',
        'total_surcharges_in_usd' => 'totalSurchargesInUsd',
        'total_detail_amount_in_usd' => 'totalDetailAmountInUsd',
        'total_global_discounts_in_usd' => 'totalGlobalDiscountsInUsd',
        'total_global_surcharges_in_usd' => 'totalGlobalSurchargesInUsd',
        'total_withholding_taxes_in_usd' => 'totalWithholdingTaxesInUsd',
        'total_shipping_cost_in_usd' => 'totalShippingCostInUsd',
        'total_shipping_taxes_in_usd' => 'totalShippingTaxesInUsd',
        'currency' => 'currency',
        'total_in_usd' => 'totalInUsd',
        'total_tax_amount_in_usd' => 'totalTaxAmountInUsd',
        'total_tax_base_amount_in_usd' => 'totalTaxBaseAmountInUsd',
        'total_discounts_amount_in_usd' => 'totalDiscountsAmountInUsd',
        'total_surcharges_amount_in_usd' => 'totalSurchargesAmountInUsd',
        'total_global_discounts_amount_in_usd' => 'totalGlobalDiscountsAmountInUsd',
        'total_global_surcharges_amount_in_usd' => 'totalGlobalSurchargesAmountInUsd',
        'total_amount' => 'totalAmount',
        'total_tax_amount' => 'totalTaxAmount',
        'total_tax_base_amount' => 'totalTaxBaseAmount',
        'total_discounts_amount' => 'totalDiscountsAmount',
        'total_surcharges_amount' => 'totalSurchargesAmount',
        'total_global_discounts_amount' => 'totalGlobalDiscountsAmount',
        'total_global_surcharges_amount' => 'totalGlobalSurchargesAmount',
        'paid' => 'paid',
        'number' => 'number',
        'notes' => 'notes',
        'order_id' => 'orderId',
        'enumeration' => 'enumeration',
        'payment_mode_id' => 'paymentModeId',
        'enumeration_range_id' => 'enumerationRangeId',
        'emisor_billing_profile_id' => 'emisorBillingProfileId',
        'receiver_billing_profile_id' => 'receiverBillingProfileId',
        'emisor_wallet_account_id' => 'emisorWalletAccountId',
        'receiver_wallet_account_id' => 'receiverWalletAccountId',
        'payment_due' => 'paymentDue',
        'invoice_type' => 'invoiceType',
        'document_type' => 'documentType',
        'invoice_status' => 'invoiceStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'timestamp' => 'setTimestamp',
        'closed' => 'setClosed',
        'type' => 'setType',
        'title' => 'setTitle',
        'user_id' => 'setUserId',
        'tenant_id' => 'setTenantId',
        'currency_id' => 'setCurrencyId',
        'description' => 'setDescription',
        'price_list_id' => 'setPriceListId',
        'enrollment_id' => 'setEnrollmentId',
        'individual_id' => 'setIndividualId',
        'organization_id' => 'setOrganizationId',
        'receiver_tenant_id' => 'setReceiverTenantId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'company_name' => 'setCompanyName',
        'billing_email' => 'setBillingEmail',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'postal_code' => 'setPostalCode',
        'country_id' => 'setCountryId',
        'state_id' => 'setStateId',
        'city_id' => 'setCityId',
        'customer_notes' => 'setCustomerNotes',
        'forex_rate' => 'setForexRate',
        'total' => 'setTotal',
        'total_taxes' => 'setTotalTaxes',
        'total_tax_base' => 'setTotalTaxBase',
        'total_discounts' => 'setTotalDiscounts',
        'total_surcharges' => 'setTotalSurcharges',
        'total_global_discounts' => 'setTotalGlobalDiscounts',
        'total_global_surcharges' => 'setTotalGlobalSurcharges',
        'total_taxes_in_usd' => 'setTotalTaxesInUsd',
        'total_amount_in_usd' => 'setTotalAmountInUsd',
        'total_profit_in_usd' => 'setTotalProfitInUsd',
        'total_tax_base_in_usd' => 'setTotalTaxBaseInUsd',
        'total_discounts_in_usd' => 'setTotalDiscountsInUsd',
        'total_surcharges_in_usd' => 'setTotalSurchargesInUsd',
        'total_detail_amount_in_usd' => 'setTotalDetailAmountInUsd',
        'total_global_discounts_in_usd' => 'setTotalGlobalDiscountsInUsd',
        'total_global_surcharges_in_usd' => 'setTotalGlobalSurchargesInUsd',
        'total_withholding_taxes_in_usd' => 'setTotalWithholdingTaxesInUsd',
        'total_shipping_cost_in_usd' => 'setTotalShippingCostInUsd',
        'total_shipping_taxes_in_usd' => 'setTotalShippingTaxesInUsd',
        'currency' => 'setCurrency',
        'total_in_usd' => 'setTotalInUsd',
        'total_tax_amount_in_usd' => 'setTotalTaxAmountInUsd',
        'total_tax_base_amount_in_usd' => 'setTotalTaxBaseAmountInUsd',
        'total_discounts_amount_in_usd' => 'setTotalDiscountsAmountInUsd',
        'total_surcharges_amount_in_usd' => 'setTotalSurchargesAmountInUsd',
        'total_global_discounts_amount_in_usd' => 'setTotalGlobalDiscountsAmountInUsd',
        'total_global_surcharges_amount_in_usd' => 'setTotalGlobalSurchargesAmountInUsd',
        'total_amount' => 'setTotalAmount',
        'total_tax_amount' => 'setTotalTaxAmount',
        'total_tax_base_amount' => 'setTotalTaxBaseAmount',
        'total_discounts_amount' => 'setTotalDiscountsAmount',
        'total_surcharges_amount' => 'setTotalSurchargesAmount',
        'total_global_discounts_amount' => 'setTotalGlobalDiscountsAmount',
        'total_global_surcharges_amount' => 'setTotalGlobalSurchargesAmount',
        'paid' => 'setPaid',
        'number' => 'setNumber',
        'notes' => 'setNotes',
        'order_id' => 'setOrderId',
        'enumeration' => 'setEnumeration',
        'payment_mode_id' => 'setPaymentModeId',
        'enumeration_range_id' => 'setEnumerationRangeId',
        'emisor_billing_profile_id' => 'setEmisorBillingProfileId',
        'receiver_billing_profile_id' => 'setReceiverBillingProfileId',
        'emisor_wallet_account_id' => 'setEmisorWalletAccountId',
        'receiver_wallet_account_id' => 'setReceiverWalletAccountId',
        'payment_due' => 'setPaymentDue',
        'invoice_type' => 'setInvoiceType',
        'document_type' => 'setDocumentType',
        'invoice_status' => 'setInvoiceStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'timestamp' => 'getTimestamp',
        'closed' => 'getClosed',
        'type' => 'getType',
        'title' => 'getTitle',
        'user_id' => 'getUserId',
        'tenant_id' => 'getTenantId',
        'currency_id' => 'getCurrencyId',
        'description' => 'getDescription',
        'price_list_id' => 'getPriceListId',
        'enrollment_id' => 'getEnrollmentId',
        'individual_id' => 'getIndividualId',
        'organization_id' => 'getOrganizationId',
        'receiver_tenant_id' => 'getReceiverTenantId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'company_name' => 'getCompanyName',
        'billing_email' => 'getBillingEmail',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'postal_code' => 'getPostalCode',
        'country_id' => 'getCountryId',
        'state_id' => 'getStateId',
        'city_id' => 'getCityId',
        'customer_notes' => 'getCustomerNotes',
        'forex_rate' => 'getForexRate',
        'total' => 'getTotal',
        'total_taxes' => 'getTotalTaxes',
        'total_tax_base' => 'getTotalTaxBase',
        'total_discounts' => 'getTotalDiscounts',
        'total_surcharges' => 'getTotalSurcharges',
        'total_global_discounts' => 'getTotalGlobalDiscounts',
        'total_global_surcharges' => 'getTotalGlobalSurcharges',
        'total_taxes_in_usd' => 'getTotalTaxesInUsd',
        'total_amount_in_usd' => 'getTotalAmountInUsd',
        'total_profit_in_usd' => 'getTotalProfitInUsd',
        'total_tax_base_in_usd' => 'getTotalTaxBaseInUsd',
        'total_discounts_in_usd' => 'getTotalDiscountsInUsd',
        'total_surcharges_in_usd' => 'getTotalSurchargesInUsd',
        'total_detail_amount_in_usd' => 'getTotalDetailAmountInUsd',
        'total_global_discounts_in_usd' => 'getTotalGlobalDiscountsInUsd',
        'total_global_surcharges_in_usd' => 'getTotalGlobalSurchargesInUsd',
        'total_withholding_taxes_in_usd' => 'getTotalWithholdingTaxesInUsd',
        'total_shipping_cost_in_usd' => 'getTotalShippingCostInUsd',
        'total_shipping_taxes_in_usd' => 'getTotalShippingTaxesInUsd',
        'currency' => 'getCurrency',
        'total_in_usd' => 'getTotalInUsd',
        'total_tax_amount_in_usd' => 'getTotalTaxAmountInUsd',
        'total_tax_base_amount_in_usd' => 'getTotalTaxBaseAmountInUsd',
        'total_discounts_amount_in_usd' => 'getTotalDiscountsAmountInUsd',
        'total_surcharges_amount_in_usd' => 'getTotalSurchargesAmountInUsd',
        'total_global_discounts_amount_in_usd' => 'getTotalGlobalDiscountsAmountInUsd',
        'total_global_surcharges_amount_in_usd' => 'getTotalGlobalSurchargesAmountInUsd',
        'total_amount' => 'getTotalAmount',
        'total_tax_amount' => 'getTotalTaxAmount',
        'total_tax_base_amount' => 'getTotalTaxBaseAmount',
        'total_discounts_amount' => 'getTotalDiscountsAmount',
        'total_surcharges_amount' => 'getTotalSurchargesAmount',
        'total_global_discounts_amount' => 'getTotalGlobalDiscountsAmount',
        'total_global_surcharges_amount' => 'getTotalGlobalSurchargesAmount',
        'paid' => 'getPaid',
        'number' => 'getNumber',
        'notes' => 'getNotes',
        'order_id' => 'getOrderId',
        'enumeration' => 'getEnumeration',
        'payment_mode_id' => 'getPaymentModeId',
        'enumeration_range_id' => 'getEnumerationRangeId',
        'emisor_billing_profile_id' => 'getEmisorBillingProfileId',
        'receiver_billing_profile_id' => 'getReceiverBillingProfileId',
        'emisor_wallet_account_id' => 'getEmisorWalletAccountId',
        'receiver_wallet_account_id' => 'getReceiverWalletAccountId',
        'payment_due' => 'getPaymentDue',
        'invoice_type' => 'getInvoiceType',
        'document_type' => 'getDocumentType',
        'invoice_status' => 'getInvoiceStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const INVOICE_TYPE_NUMBER_0 = 0;
    public const INVOICE_TYPE_NUMBER_1 = 1;
    public const DOCUMENT_TYPE_NUMBER_0 = 0;
    public const DOCUMENT_TYPE_NUMBER_1 = 1;
    public const DOCUMENT_TYPE_NUMBER_2 = 2;
    public const INVOICE_STATUS_NUMBER_0 = 0;
    public const INVOICE_STATUS_NUMBER_1 = 1;
    public const INVOICE_STATUS_NUMBER_2 = 2;
    public const INVOICE_STATUS_NUMBER_3 = 3;
    public const INVOICE_STATUS_NUMBER_4 = 4;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvoiceTypeAllowableValues()
    {
        return [
            self::INVOICE_TYPE_NUMBER_0,
            self::INVOICE_TYPE_NUMBER_1,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentTypeAllowableValues()
    {
        return [
            self::DOCUMENT_TYPE_NUMBER_0,
            self::DOCUMENT_TYPE_NUMBER_1,
            self::DOCUMENT_TYPE_NUMBER_2,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvoiceStatusAllowableValues()
    {
        return [
            self::INVOICE_STATUS_NUMBER_0,
            self::INVOICE_STATUS_NUMBER_1,
            self::INVOICE_STATUS_NUMBER_2,
            self::INVOICE_STATUS_NUMBER_3,
            self::INVOICE_STATUS_NUMBER_4,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('closed', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('tenant_id', $data ?? [], null);
        $this->setIfExists('currency_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('price_list_id', $data ?? [], null);
        $this->setIfExists('enrollment_id', $data ?? [], null);
        $this->setIfExists('individual_id', $data ?? [], null);
        $this->setIfExists('organization_id', $data ?? [], null);
        $this->setIfExists('receiver_tenant_id', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('company_name', $data ?? [], null);
        $this->setIfExists('billing_email', $data ?? [], null);
        $this->setIfExists('address_line1', $data ?? [], null);
        $this->setIfExists('address_line2', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('country_id', $data ?? [], null);
        $this->setIfExists('state_id', $data ?? [], null);
        $this->setIfExists('city_id', $data ?? [], null);
        $this->setIfExists('customer_notes', $data ?? [], null);
        $this->setIfExists('forex_rate', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('total_taxes', $data ?? [], null);
        $this->setIfExists('total_tax_base', $data ?? [], null);
        $this->setIfExists('total_discounts', $data ?? [], null);
        $this->setIfExists('total_surcharges', $data ?? [], null);
        $this->setIfExists('total_global_discounts', $data ?? [], null);
        $this->setIfExists('total_global_surcharges', $data ?? [], null);
        $this->setIfExists('total_taxes_in_usd', $data ?? [], null);
        $this->setIfExists('total_amount_in_usd', $data ?? [], null);
        $this->setIfExists('total_profit_in_usd', $data ?? [], null);
        $this->setIfExists('total_tax_base_in_usd', $data ?? [], null);
        $this->setIfExists('total_discounts_in_usd', $data ?? [], null);
        $this->setIfExists('total_surcharges_in_usd', $data ?? [], null);
        $this->setIfExists('total_detail_amount_in_usd', $data ?? [], null);
        $this->setIfExists('total_global_discounts_in_usd', $data ?? [], null);
        $this->setIfExists('total_global_surcharges_in_usd', $data ?? [], null);
        $this->setIfExists('total_withholding_taxes_in_usd', $data ?? [], null);
        $this->setIfExists('total_shipping_cost_in_usd', $data ?? [], null);
        $this->setIfExists('total_shipping_taxes_in_usd', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('total_in_usd', $data ?? [], null);
        $this->setIfExists('total_tax_amount_in_usd', $data ?? [], null);
        $this->setIfExists('total_tax_base_amount_in_usd', $data ?? [], null);
        $this->setIfExists('total_discounts_amount_in_usd', $data ?? [], null);
        $this->setIfExists('total_surcharges_amount_in_usd', $data ?? [], null);
        $this->setIfExists('total_global_discounts_amount_in_usd', $data ?? [], null);
        $this->setIfExists('total_global_surcharges_amount_in_usd', $data ?? [], null);
        $this->setIfExists('total_amount', $data ?? [], null);
        $this->setIfExists('total_tax_amount', $data ?? [], null);
        $this->setIfExists('total_tax_base_amount', $data ?? [], null);
        $this->setIfExists('total_discounts_amount', $data ?? [], null);
        $this->setIfExists('total_surcharges_amount', $data ?? [], null);
        $this->setIfExists('total_global_discounts_amount', $data ?? [], null);
        $this->setIfExists('total_global_surcharges_amount', $data ?? [], null);
        $this->setIfExists('paid', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('enumeration', $data ?? [], null);
        $this->setIfExists('payment_mode_id', $data ?? [], null);
        $this->setIfExists('enumeration_range_id', $data ?? [], null);
        $this->setIfExists('emisor_billing_profile_id', $data ?? [], null);
        $this->setIfExists('receiver_billing_profile_id', $data ?? [], null);
        $this->setIfExists('emisor_wallet_account_id', $data ?? [], null);
        $this->setIfExists('receiver_wallet_account_id', $data ?? [], null);
        $this->setIfExists('payment_due', $data ?? [], null);
        $this->setIfExists('invoice_type', $data ?? [], null);
        $this->setIfExists('document_type', $data ?? [], null);
        $this->setIfExists('invoice_status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getInvoiceTypeAllowableValues();
        if (!is_null($this->container['invoice_type']) && !in_array($this->container['invoice_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'invoice_type', must be one of '%s'",
                $this->container['invoice_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!is_null($this->container['document_type']) && !in_array($this->container['document_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'document_type', must be one of '%s'",
                $this->container['document_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInvoiceStatusAllowableValues();
        if (!is_null($this->container['invoice_status']) && !in_array($this->container['invoice_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'invoice_status', must be one of '%s'",
                $this->container['invoice_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets closed
     *
     * @return bool|null
     */
    public function getClosed()
    {
        return $this->container['closed'];
    }

    /**
     * Sets closed
     *
     * @param bool|null $closed closed
     *
     * @return self
     */
    public function setClosed($closed)
    {
        if (is_null($closed)) {
            throw new \InvalidArgumentException('non-nullable closed cannot be null');
        }
        $this->container['closed'] = $closed;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            array_push($this->openAPINullablesSetToNull, 'user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string|null
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string|null $tenant_id tenant_id
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        if (is_null($tenant_id)) {
            array_push($this->openAPINullablesSetToNull, 'tenant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tenant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string|null
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string|null $currency_id currency_id
     *
     * @return self
     */
    public function setCurrencyId($currency_id)
    {
        if (is_null($currency_id)) {
            array_push($this->openAPINullablesSetToNull, 'currency_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets price_list_id
     *
     * @return string|null
     */
    public function getPriceListId()
    {
        return $this->container['price_list_id'];
    }

    /**
     * Sets price_list_id
     *
     * @param string|null $price_list_id price_list_id
     *
     * @return self
     */
    public function setPriceListId($price_list_id)
    {
        if (is_null($price_list_id)) {
            array_push($this->openAPINullablesSetToNull, 'price_list_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price_list_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price_list_id'] = $price_list_id;

        return $this;
    }

    /**
     * Gets enrollment_id
     *
     * @return string|null
     */
    public function getEnrollmentId()
    {
        return $this->container['enrollment_id'];
    }

    /**
     * Sets enrollment_id
     *
     * @param string|null $enrollment_id enrollment_id
     *
     * @return self
     */
    public function setEnrollmentId($enrollment_id)
    {
        if (is_null($enrollment_id)) {
            array_push($this->openAPINullablesSetToNull, 'enrollment_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enrollment_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enrollment_id'] = $enrollment_id;

        return $this;
    }

    /**
     * Gets individual_id
     *
     * @return string|null
     */
    public function getIndividualId()
    {
        return $this->container['individual_id'];
    }

    /**
     * Sets individual_id
     *
     * @param string|null $individual_id individual_id
     *
     * @return self
     */
    public function setIndividualId($individual_id)
    {
        if (is_null($individual_id)) {
            array_push($this->openAPINullablesSetToNull, 'individual_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('individual_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['individual_id'] = $individual_id;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return string|null
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param string|null $organization_id organization_id
     *
     * @return self
     */
    public function setOrganizationId($organization_id)
    {
        if (is_null($organization_id)) {
            array_push($this->openAPINullablesSetToNull, 'organization_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets receiver_tenant_id
     *
     * @return string|null
     */
    public function getReceiverTenantId()
    {
        return $this->container['receiver_tenant_id'];
    }

    /**
     * Sets receiver_tenant_id
     *
     * @param string|null $receiver_tenant_id receiver_tenant_id
     *
     * @return self
     */
    public function setReceiverTenantId($receiver_tenant_id)
    {
        if (is_null($receiver_tenant_id)) {
            array_push($this->openAPINullablesSetToNull, 'receiver_tenant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('receiver_tenant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['receiver_tenant_id'] = $receiver_tenant_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            array_push($this->openAPINullablesSetToNull, 'first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            array_push($this->openAPINullablesSetToNull, 'last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string|null $company_name company_name
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {
        if (is_null($company_name)) {
            array_push($this->openAPINullablesSetToNull, 'company_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets billing_email
     *
     * @return string|null
     */
    public function getBillingEmail()
    {
        return $this->container['billing_email'];
    }

    /**
     * Sets billing_email
     *
     * @param string|null $billing_email billing_email
     *
     * @return self
     */
    public function setBillingEmail($billing_email)
    {
        if (is_null($billing_email)) {
            array_push($this->openAPINullablesSetToNull, 'billing_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_email'] = $billing_email;

        return $this;
    }

    /**
     * Gets address_line1
     *
     * @return string|null
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param string|null $address_line1 address_line1
     *
     * @return self
     */
    public function setAddressLine1($address_line1)
    {
        if (is_null($address_line1)) {
            array_push($this->openAPINullablesSetToNull, 'address_line1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_line1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     *
     * @return string|null
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     *
     * @param string|null $address_line2 address_line2
     *
     * @return self
     */
    public function setAddressLine2($address_line2)
    {
        if (is_null($address_line2)) {
            array_push($this->openAPINullablesSetToNull, 'address_line2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_line2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code postal_code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (is_null($postal_code)) {
            array_push($this->openAPINullablesSetToNull, 'postal_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postal_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return string|null
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param string|null $country_id country_id
     *
     * @return self
     */
    public function setCountryId($country_id)
    {
        if (is_null($country_id)) {
            array_push($this->openAPINullablesSetToNull, 'country_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets state_id
     *
     * @return string|null
     */
    public function getStateId()
    {
        return $this->container['state_id'];
    }

    /**
     * Sets state_id
     *
     * @param string|null $state_id state_id
     *
     * @return self
     */
    public function setStateId($state_id)
    {
        if (is_null($state_id)) {
            array_push($this->openAPINullablesSetToNull, 'state_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('state_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['state_id'] = $state_id;

        return $this;
    }

    /**
     * Gets city_id
     *
     * @return string|null
     */
    public function getCityId()
    {
        return $this->container['city_id'];
    }

    /**
     * Sets city_id
     *
     * @param string|null $city_id city_id
     *
     * @return self
     */
    public function setCityId($city_id)
    {
        if (is_null($city_id)) {
            array_push($this->openAPINullablesSetToNull, 'city_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['city_id'] = $city_id;

        return $this;
    }

    /**
     * Gets customer_notes
     *
     * @return string|null
     */
    public function getCustomerNotes()
    {
        return $this->container['customer_notes'];
    }

    /**
     * Sets customer_notes
     *
     * @param string|null $customer_notes customer_notes
     *
     * @return self
     */
    public function setCustomerNotes($customer_notes)
    {
        if (is_null($customer_notes)) {
            array_push($this->openAPINullablesSetToNull, 'customer_notes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_notes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_notes'] = $customer_notes;

        return $this;
    }

    /**
     * Gets forex_rate
     *
     * @return float|null
     */
    public function getForexRate()
    {
        return $this->container['forex_rate'];
    }

    /**
     * Sets forex_rate
     *
     * @param float|null $forex_rate forex_rate
     *
     * @return self
     */
    public function setForexRate($forex_rate)
    {
        if (is_null($forex_rate)) {
            throw new \InvalidArgumentException('non-nullable forex_rate cannot be null');
        }
        $this->container['forex_rate'] = $forex_rate;

        return $this;
    }

    /**
     * Gets total
     *
     * @return float|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param float|null $total total
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets total_taxes
     *
     * @return float|null
     */
    public function getTotalTaxes()
    {
        return $this->container['total_taxes'];
    }

    /**
     * Sets total_taxes
     *
     * @param float|null $total_taxes total_taxes
     *
     * @return self
     */
    public function setTotalTaxes($total_taxes)
    {
        if (is_null($total_taxes)) {
            throw new \InvalidArgumentException('non-nullable total_taxes cannot be null');
        }
        $this->container['total_taxes'] = $total_taxes;

        return $this;
    }

    /**
     * Gets total_tax_base
     *
     * @return float|null
     */
    public function getTotalTaxBase()
    {
        return $this->container['total_tax_base'];
    }

    /**
     * Sets total_tax_base
     *
     * @param float|null $total_tax_base total_tax_base
     *
     * @return self
     */
    public function setTotalTaxBase($total_tax_base)
    {
        if (is_null($total_tax_base)) {
            throw new \InvalidArgumentException('non-nullable total_tax_base cannot be null');
        }
        $this->container['total_tax_base'] = $total_tax_base;

        return $this;
    }

    /**
     * Gets total_discounts
     *
     * @return float|null
     */
    public function getTotalDiscounts()
    {
        return $this->container['total_discounts'];
    }

    /**
     * Sets total_discounts
     *
     * @param float|null $total_discounts total_discounts
     *
     * @return self
     */
    public function setTotalDiscounts($total_discounts)
    {
        if (is_null($total_discounts)) {
            throw new \InvalidArgumentException('non-nullable total_discounts cannot be null');
        }
        $this->container['total_discounts'] = $total_discounts;

        return $this;
    }

    /**
     * Gets total_surcharges
     *
     * @return float|null
     */
    public function getTotalSurcharges()
    {
        return $this->container['total_surcharges'];
    }

    /**
     * Sets total_surcharges
     *
     * @param float|null $total_surcharges total_surcharges
     *
     * @return self
     */
    public function setTotalSurcharges($total_surcharges)
    {
        if (is_null($total_surcharges)) {
            throw new \InvalidArgumentException('non-nullable total_surcharges cannot be null');
        }
        $this->container['total_surcharges'] = $total_surcharges;

        return $this;
    }

    /**
     * Gets total_global_discounts
     *
     * @return float|null
     */
    public function getTotalGlobalDiscounts()
    {
        return $this->container['total_global_discounts'];
    }

    /**
     * Sets total_global_discounts
     *
     * @param float|null $total_global_discounts total_global_discounts
     *
     * @return self
     */
    public function setTotalGlobalDiscounts($total_global_discounts)
    {
        if (is_null($total_global_discounts)) {
            throw new \InvalidArgumentException('non-nullable total_global_discounts cannot be null');
        }
        $this->container['total_global_discounts'] = $total_global_discounts;

        return $this;
    }

    /**
     * Gets total_global_surcharges
     *
     * @return float|null
     */
    public function getTotalGlobalSurcharges()
    {
        return $this->container['total_global_surcharges'];
    }

    /**
     * Sets total_global_surcharges
     *
     * @param float|null $total_global_surcharges total_global_surcharges
     *
     * @return self
     */
    public function setTotalGlobalSurcharges($total_global_surcharges)
    {
        if (is_null($total_global_surcharges)) {
            throw new \InvalidArgumentException('non-nullable total_global_surcharges cannot be null');
        }
        $this->container['total_global_surcharges'] = $total_global_surcharges;

        return $this;
    }

    /**
     * Gets total_taxes_in_usd
     *
     * @return float|null
     */
    public function getTotalTaxesInUsd()
    {
        return $this->container['total_taxes_in_usd'];
    }

    /**
     * Sets total_taxes_in_usd
     *
     * @param float|null $total_taxes_in_usd total_taxes_in_usd
     *
     * @return self
     */
    public function setTotalTaxesInUsd($total_taxes_in_usd)
    {
        if (is_null($total_taxes_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_taxes_in_usd cannot be null');
        }
        $this->container['total_taxes_in_usd'] = $total_taxes_in_usd;

        return $this;
    }

    /**
     * Gets total_amount_in_usd
     *
     * @return float|null
     */
    public function getTotalAmountInUsd()
    {
        return $this->container['total_amount_in_usd'];
    }

    /**
     * Sets total_amount_in_usd
     *
     * @param float|null $total_amount_in_usd total_amount_in_usd
     *
     * @return self
     */
    public function setTotalAmountInUsd($total_amount_in_usd)
    {
        if (is_null($total_amount_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_amount_in_usd cannot be null');
        }
        $this->container['total_amount_in_usd'] = $total_amount_in_usd;

        return $this;
    }

    /**
     * Gets total_profit_in_usd
     *
     * @return float|null
     */
    public function getTotalProfitInUsd()
    {
        return $this->container['total_profit_in_usd'];
    }

    /**
     * Sets total_profit_in_usd
     *
     * @param float|null $total_profit_in_usd total_profit_in_usd
     *
     * @return self
     */
    public function setTotalProfitInUsd($total_profit_in_usd)
    {
        if (is_null($total_profit_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_profit_in_usd cannot be null');
        }
        $this->container['total_profit_in_usd'] = $total_profit_in_usd;

        return $this;
    }

    /**
     * Gets total_tax_base_in_usd
     *
     * @return float|null
     */
    public function getTotalTaxBaseInUsd()
    {
        return $this->container['total_tax_base_in_usd'];
    }

    /**
     * Sets total_tax_base_in_usd
     *
     * @param float|null $total_tax_base_in_usd total_tax_base_in_usd
     *
     * @return self
     */
    public function setTotalTaxBaseInUsd($total_tax_base_in_usd)
    {
        if (is_null($total_tax_base_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_tax_base_in_usd cannot be null');
        }
        $this->container['total_tax_base_in_usd'] = $total_tax_base_in_usd;

        return $this;
    }

    /**
     * Gets total_discounts_in_usd
     *
     * @return float|null
     */
    public function getTotalDiscountsInUsd()
    {
        return $this->container['total_discounts_in_usd'];
    }

    /**
     * Sets total_discounts_in_usd
     *
     * @param float|null $total_discounts_in_usd total_discounts_in_usd
     *
     * @return self
     */
    public function setTotalDiscountsInUsd($total_discounts_in_usd)
    {
        if (is_null($total_discounts_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_discounts_in_usd cannot be null');
        }
        $this->container['total_discounts_in_usd'] = $total_discounts_in_usd;

        return $this;
    }

    /**
     * Gets total_surcharges_in_usd
     *
     * @return float|null
     */
    public function getTotalSurchargesInUsd()
    {
        return $this->container['total_surcharges_in_usd'];
    }

    /**
     * Sets total_surcharges_in_usd
     *
     * @param float|null $total_surcharges_in_usd total_surcharges_in_usd
     *
     * @return self
     */
    public function setTotalSurchargesInUsd($total_surcharges_in_usd)
    {
        if (is_null($total_surcharges_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_surcharges_in_usd cannot be null');
        }
        $this->container['total_surcharges_in_usd'] = $total_surcharges_in_usd;

        return $this;
    }

    /**
     * Gets total_detail_amount_in_usd
     *
     * @return float|null
     */
    public function getTotalDetailAmountInUsd()
    {
        return $this->container['total_detail_amount_in_usd'];
    }

    /**
     * Sets total_detail_amount_in_usd
     *
     * @param float|null $total_detail_amount_in_usd total_detail_amount_in_usd
     *
     * @return self
     */
    public function setTotalDetailAmountInUsd($total_detail_amount_in_usd)
    {
        if (is_null($total_detail_amount_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_detail_amount_in_usd cannot be null');
        }
        $this->container['total_detail_amount_in_usd'] = $total_detail_amount_in_usd;

        return $this;
    }

    /**
     * Gets total_global_discounts_in_usd
     *
     * @return float|null
     */
    public function getTotalGlobalDiscountsInUsd()
    {
        return $this->container['total_global_discounts_in_usd'];
    }

    /**
     * Sets total_global_discounts_in_usd
     *
     * @param float|null $total_global_discounts_in_usd total_global_discounts_in_usd
     *
     * @return self
     */
    public function setTotalGlobalDiscountsInUsd($total_global_discounts_in_usd)
    {
        if (is_null($total_global_discounts_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_global_discounts_in_usd cannot be null');
        }
        $this->container['total_global_discounts_in_usd'] = $total_global_discounts_in_usd;

        return $this;
    }

    /**
     * Gets total_global_surcharges_in_usd
     *
     * @return float|null
     */
    public function getTotalGlobalSurchargesInUsd()
    {
        return $this->container['total_global_surcharges_in_usd'];
    }

    /**
     * Sets total_global_surcharges_in_usd
     *
     * @param float|null $total_global_surcharges_in_usd total_global_surcharges_in_usd
     *
     * @return self
     */
    public function setTotalGlobalSurchargesInUsd($total_global_surcharges_in_usd)
    {
        if (is_null($total_global_surcharges_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_global_surcharges_in_usd cannot be null');
        }
        $this->container['total_global_surcharges_in_usd'] = $total_global_surcharges_in_usd;

        return $this;
    }

    /**
     * Gets total_withholding_taxes_in_usd
     *
     * @return float|null
     */
    public function getTotalWithholdingTaxesInUsd()
    {
        return $this->container['total_withholding_taxes_in_usd'];
    }

    /**
     * Sets total_withholding_taxes_in_usd
     *
     * @param float|null $total_withholding_taxes_in_usd total_withholding_taxes_in_usd
     *
     * @return self
     */
    public function setTotalWithholdingTaxesInUsd($total_withholding_taxes_in_usd)
    {
        if (is_null($total_withholding_taxes_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_withholding_taxes_in_usd cannot be null');
        }
        $this->container['total_withholding_taxes_in_usd'] = $total_withholding_taxes_in_usd;

        return $this;
    }

    /**
     * Gets total_shipping_cost_in_usd
     *
     * @return float|null
     */
    public function getTotalShippingCostInUsd()
    {
        return $this->container['total_shipping_cost_in_usd'];
    }

    /**
     * Sets total_shipping_cost_in_usd
     *
     * @param float|null $total_shipping_cost_in_usd total_shipping_cost_in_usd
     *
     * @return self
     */
    public function setTotalShippingCostInUsd($total_shipping_cost_in_usd)
    {
        if (is_null($total_shipping_cost_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_shipping_cost_in_usd cannot be null');
        }
        $this->container['total_shipping_cost_in_usd'] = $total_shipping_cost_in_usd;

        return $this;
    }

    /**
     * Gets total_shipping_taxes_in_usd
     *
     * @return float|null
     */
    public function getTotalShippingTaxesInUsd()
    {
        return $this->container['total_shipping_taxes_in_usd'];
    }

    /**
     * Sets total_shipping_taxes_in_usd
     *
     * @param float|null $total_shipping_taxes_in_usd total_shipping_taxes_in_usd
     *
     * @return self
     */
    public function setTotalShippingTaxesInUsd($total_shipping_taxes_in_usd)
    {
        if (is_null($total_shipping_taxes_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_shipping_taxes_in_usd cannot be null');
        }
        $this->container['total_shipping_taxes_in_usd'] = $total_shipping_taxes_in_usd;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \OpenAPI\Client\Model\Currency|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \OpenAPI\Client\Model\Currency|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets total_in_usd
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getTotalInUsd()
    {
        return $this->container['total_in_usd'];
    }

    /**
     * Sets total_in_usd
     *
     * @param \OpenAPI\Client\Model\Money|null $total_in_usd total_in_usd
     *
     * @return self
     */
    public function setTotalInUsd($total_in_usd)
    {
        if (is_null($total_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_in_usd cannot be null');
        }
        $this->container['total_in_usd'] = $total_in_usd;

        return $this;
    }

    /**
     * Gets total_tax_amount_in_usd
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getTotalTaxAmountInUsd()
    {
        return $this->container['total_tax_amount_in_usd'];
    }

    /**
     * Sets total_tax_amount_in_usd
     *
     * @param \OpenAPI\Client\Model\Money|null $total_tax_amount_in_usd total_tax_amount_in_usd
     *
     * @return self
     */
    public function setTotalTaxAmountInUsd($total_tax_amount_in_usd)
    {
        if (is_null($total_tax_amount_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_tax_amount_in_usd cannot be null');
        }
        $this->container['total_tax_amount_in_usd'] = $total_tax_amount_in_usd;

        return $this;
    }

    /**
     * Gets total_tax_base_amount_in_usd
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getTotalTaxBaseAmountInUsd()
    {
        return $this->container['total_tax_base_amount_in_usd'];
    }

    /**
     * Sets total_tax_base_amount_in_usd
     *
     * @param \OpenAPI\Client\Model\Money|null $total_tax_base_amount_in_usd total_tax_base_amount_in_usd
     *
     * @return self
     */
    public function setTotalTaxBaseAmountInUsd($total_tax_base_amount_in_usd)
    {
        if (is_null($total_tax_base_amount_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_tax_base_amount_in_usd cannot be null');
        }
        $this->container['total_tax_base_amount_in_usd'] = $total_tax_base_amount_in_usd;

        return $this;
    }

    /**
     * Gets total_discounts_amount_in_usd
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getTotalDiscountsAmountInUsd()
    {
        return $this->container['total_discounts_amount_in_usd'];
    }

    /**
     * Sets total_discounts_amount_in_usd
     *
     * @param \OpenAPI\Client\Model\Money|null $total_discounts_amount_in_usd total_discounts_amount_in_usd
     *
     * @return self
     */
    public function setTotalDiscountsAmountInUsd($total_discounts_amount_in_usd)
    {
        if (is_null($total_discounts_amount_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_discounts_amount_in_usd cannot be null');
        }
        $this->container['total_discounts_amount_in_usd'] = $total_discounts_amount_in_usd;

        return $this;
    }

    /**
     * Gets total_surcharges_amount_in_usd
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getTotalSurchargesAmountInUsd()
    {
        return $this->container['total_surcharges_amount_in_usd'];
    }

    /**
     * Sets total_surcharges_amount_in_usd
     *
     * @param \OpenAPI\Client\Model\Money|null $total_surcharges_amount_in_usd total_surcharges_amount_in_usd
     *
     * @return self
     */
    public function setTotalSurchargesAmountInUsd($total_surcharges_amount_in_usd)
    {
        if (is_null($total_surcharges_amount_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_surcharges_amount_in_usd cannot be null');
        }
        $this->container['total_surcharges_amount_in_usd'] = $total_surcharges_amount_in_usd;

        return $this;
    }

    /**
     * Gets total_global_discounts_amount_in_usd
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getTotalGlobalDiscountsAmountInUsd()
    {
        return $this->container['total_global_discounts_amount_in_usd'];
    }

    /**
     * Sets total_global_discounts_amount_in_usd
     *
     * @param \OpenAPI\Client\Model\Money|null $total_global_discounts_amount_in_usd total_global_discounts_amount_in_usd
     *
     * @return self
     */
    public function setTotalGlobalDiscountsAmountInUsd($total_global_discounts_amount_in_usd)
    {
        if (is_null($total_global_discounts_amount_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_global_discounts_amount_in_usd cannot be null');
        }
        $this->container['total_global_discounts_amount_in_usd'] = $total_global_discounts_amount_in_usd;

        return $this;
    }

    /**
     * Gets total_global_surcharges_amount_in_usd
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getTotalGlobalSurchargesAmountInUsd()
    {
        return $this->container['total_global_surcharges_amount_in_usd'];
    }

    /**
     * Sets total_global_surcharges_amount_in_usd
     *
     * @param \OpenAPI\Client\Model\Money|null $total_global_surcharges_amount_in_usd total_global_surcharges_amount_in_usd
     *
     * @return self
     */
    public function setTotalGlobalSurchargesAmountInUsd($total_global_surcharges_amount_in_usd)
    {
        if (is_null($total_global_surcharges_amount_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_global_surcharges_amount_in_usd cannot be null');
        }
        $this->container['total_global_surcharges_amount_in_usd'] = $total_global_surcharges_amount_in_usd;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $total_amount total_amount
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        if (is_null($total_amount)) {
            throw new \InvalidArgumentException('non-nullable total_amount cannot be null');
        }
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets total_tax_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getTotalTaxAmount()
    {
        return $this->container['total_tax_amount'];
    }

    /**
     * Sets total_tax_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $total_tax_amount total_tax_amount
     *
     * @return self
     */
    public function setTotalTaxAmount($total_tax_amount)
    {
        if (is_null($total_tax_amount)) {
            throw new \InvalidArgumentException('non-nullable total_tax_amount cannot be null');
        }
        $this->container['total_tax_amount'] = $total_tax_amount;

        return $this;
    }

    /**
     * Gets total_tax_base_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getTotalTaxBaseAmount()
    {
        return $this->container['total_tax_base_amount'];
    }

    /**
     * Sets total_tax_base_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $total_tax_base_amount total_tax_base_amount
     *
     * @return self
     */
    public function setTotalTaxBaseAmount($total_tax_base_amount)
    {
        if (is_null($total_tax_base_amount)) {
            throw new \InvalidArgumentException('non-nullable total_tax_base_amount cannot be null');
        }
        $this->container['total_tax_base_amount'] = $total_tax_base_amount;

        return $this;
    }

    /**
     * Gets total_discounts_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getTotalDiscountsAmount()
    {
        return $this->container['total_discounts_amount'];
    }

    /**
     * Sets total_discounts_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $total_discounts_amount total_discounts_amount
     *
     * @return self
     */
    public function setTotalDiscountsAmount($total_discounts_amount)
    {
        if (is_null($total_discounts_amount)) {
            throw new \InvalidArgumentException('non-nullable total_discounts_amount cannot be null');
        }
        $this->container['total_discounts_amount'] = $total_discounts_amount;

        return $this;
    }

    /**
     * Gets total_surcharges_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getTotalSurchargesAmount()
    {
        return $this->container['total_surcharges_amount'];
    }

    /**
     * Sets total_surcharges_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $total_surcharges_amount total_surcharges_amount
     *
     * @return self
     */
    public function setTotalSurchargesAmount($total_surcharges_amount)
    {
        if (is_null($total_surcharges_amount)) {
            throw new \InvalidArgumentException('non-nullable total_surcharges_amount cannot be null');
        }
        $this->container['total_surcharges_amount'] = $total_surcharges_amount;

        return $this;
    }

    /**
     * Gets total_global_discounts_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getTotalGlobalDiscountsAmount()
    {
        return $this->container['total_global_discounts_amount'];
    }

    /**
     * Sets total_global_discounts_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $total_global_discounts_amount total_global_discounts_amount
     *
     * @return self
     */
    public function setTotalGlobalDiscountsAmount($total_global_discounts_amount)
    {
        if (is_null($total_global_discounts_amount)) {
            throw new \InvalidArgumentException('non-nullable total_global_discounts_amount cannot be null');
        }
        $this->container['total_global_discounts_amount'] = $total_global_discounts_amount;

        return $this;
    }

    /**
     * Gets total_global_surcharges_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getTotalGlobalSurchargesAmount()
    {
        return $this->container['total_global_surcharges_amount'];
    }

    /**
     * Sets total_global_surcharges_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $total_global_surcharges_amount total_global_surcharges_amount
     *
     * @return self
     */
    public function setTotalGlobalSurchargesAmount($total_global_surcharges_amount)
    {
        if (is_null($total_global_surcharges_amount)) {
            throw new \InvalidArgumentException('non-nullable total_global_surcharges_amount cannot be null');
        }
        $this->container['total_global_surcharges_amount'] = $total_global_surcharges_amount;

        return $this;
    }

    /**
     * Gets paid
     *
     * @return bool|null
     */
    public function getPaid()
    {
        return $this->container['paid'];
    }

    /**
     * Sets paid
     *
     * @param bool|null $paid paid
     *
     * @return self
     */
    public function setPaid($paid)
    {
        if (is_null($paid)) {
            throw new \InvalidArgumentException('non-nullable paid cannot be null');
        }
        $this->container['paid'] = $paid;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int|null $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes notes
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            array_push($this->openAPINullablesSetToNull, 'notes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('notes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id order_id
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            array_push($this->openAPINullablesSetToNull, 'order_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets enumeration
     *
     * @return string|null
     */
    public function getEnumeration()
    {
        return $this->container['enumeration'];
    }

    /**
     * Sets enumeration
     *
     * @param string|null $enumeration enumeration
     *
     * @return self
     */
    public function setEnumeration($enumeration)
    {
        if (is_null($enumeration)) {
            array_push($this->openAPINullablesSetToNull, 'enumeration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enumeration', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enumeration'] = $enumeration;

        return $this;
    }

    /**
     * Gets payment_mode_id
     *
     * @return string|null
     */
    public function getPaymentModeId()
    {
        return $this->container['payment_mode_id'];
    }

    /**
     * Sets payment_mode_id
     *
     * @param string|null $payment_mode_id payment_mode_id
     *
     * @return self
     */
    public function setPaymentModeId($payment_mode_id)
    {
        if (is_null($payment_mode_id)) {
            array_push($this->openAPINullablesSetToNull, 'payment_mode_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_mode_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_mode_id'] = $payment_mode_id;

        return $this;
    }

    /**
     * Gets enumeration_range_id
     *
     * @return string|null
     */
    public function getEnumerationRangeId()
    {
        return $this->container['enumeration_range_id'];
    }

    /**
     * Sets enumeration_range_id
     *
     * @param string|null $enumeration_range_id enumeration_range_id
     *
     * @return self
     */
    public function setEnumerationRangeId($enumeration_range_id)
    {
        if (is_null($enumeration_range_id)) {
            array_push($this->openAPINullablesSetToNull, 'enumeration_range_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enumeration_range_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enumeration_range_id'] = $enumeration_range_id;

        return $this;
    }

    /**
     * Gets emisor_billing_profile_id
     *
     * @return string|null
     */
    public function getEmisorBillingProfileId()
    {
        return $this->container['emisor_billing_profile_id'];
    }

    /**
     * Sets emisor_billing_profile_id
     *
     * @param string|null $emisor_billing_profile_id emisor_billing_profile_id
     *
     * @return self
     */
    public function setEmisorBillingProfileId($emisor_billing_profile_id)
    {
        if (is_null($emisor_billing_profile_id)) {
            array_push($this->openAPINullablesSetToNull, 'emisor_billing_profile_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('emisor_billing_profile_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['emisor_billing_profile_id'] = $emisor_billing_profile_id;

        return $this;
    }

    /**
     * Gets receiver_billing_profile_id
     *
     * @return string|null
     */
    public function getReceiverBillingProfileId()
    {
        return $this->container['receiver_billing_profile_id'];
    }

    /**
     * Sets receiver_billing_profile_id
     *
     * @param string|null $receiver_billing_profile_id receiver_billing_profile_id
     *
     * @return self
     */
    public function setReceiverBillingProfileId($receiver_billing_profile_id)
    {
        if (is_null($receiver_billing_profile_id)) {
            array_push($this->openAPINullablesSetToNull, 'receiver_billing_profile_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('receiver_billing_profile_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['receiver_billing_profile_id'] = $receiver_billing_profile_id;

        return $this;
    }

    /**
     * Gets emisor_wallet_account_id
     *
     * @return string|null
     */
    public function getEmisorWalletAccountId()
    {
        return $this->container['emisor_wallet_account_id'];
    }

    /**
     * Sets emisor_wallet_account_id
     *
     * @param string|null $emisor_wallet_account_id emisor_wallet_account_id
     *
     * @return self
     */
    public function setEmisorWalletAccountId($emisor_wallet_account_id)
    {
        if (is_null($emisor_wallet_account_id)) {
            array_push($this->openAPINullablesSetToNull, 'emisor_wallet_account_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('emisor_wallet_account_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['emisor_wallet_account_id'] = $emisor_wallet_account_id;

        return $this;
    }

    /**
     * Gets receiver_wallet_account_id
     *
     * @return string|null
     */
    public function getReceiverWalletAccountId()
    {
        return $this->container['receiver_wallet_account_id'];
    }

    /**
     * Sets receiver_wallet_account_id
     *
     * @param string|null $receiver_wallet_account_id receiver_wallet_account_id
     *
     * @return self
     */
    public function setReceiverWalletAccountId($receiver_wallet_account_id)
    {
        if (is_null($receiver_wallet_account_id)) {
            array_push($this->openAPINullablesSetToNull, 'receiver_wallet_account_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('receiver_wallet_account_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['receiver_wallet_account_id'] = $receiver_wallet_account_id;

        return $this;
    }

    /**
     * Gets payment_due
     *
     * @return \DateTime|null
     */
    public function getPaymentDue()
    {
        return $this->container['payment_due'];
    }

    /**
     * Sets payment_due
     *
     * @param \DateTime|null $payment_due payment_due
     *
     * @return self
     */
    public function setPaymentDue($payment_due)
    {
        if (is_null($payment_due)) {
            array_push($this->openAPINullablesSetToNull, 'payment_due');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_due', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_due'] = $payment_due;

        return $this;
    }

    /**
     * Gets invoice_type
     *
     * @return int|null
     */
    public function getInvoiceType()
    {
        return $this->container['invoice_type'];
    }

    /**
     * Sets invoice_type
     *
     * @param int|null $invoice_type invoice_type
     *
     * @return self
     */
    public function setInvoiceType($invoice_type)
    {
        if (is_null($invoice_type)) {
            throw new \InvalidArgumentException('non-nullable invoice_type cannot be null');
        }
        $allowedValues = $this->getInvoiceTypeAllowableValues();
        if (!in_array($invoice_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'invoice_type', must be one of '%s'",
                    $invoice_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invoice_type'] = $invoice_type;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return int|null
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param int|null $document_type document_type
     *
     * @return self
     */
    public function setDocumentType($document_type)
    {
        if (is_null($document_type)) {
            throw new \InvalidArgumentException('non-nullable document_type cannot be null');
        }
        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!in_array($document_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'document_type', must be one of '%s'",
                    $document_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets invoice_status
     *
     * @return int|null
     */
    public function getInvoiceStatus()
    {
        return $this->container['invoice_status'];
    }

    /**
     * Sets invoice_status
     *
     * @param int|null $invoice_status invoice_status
     *
     * @return self
     */
    public function setInvoiceStatus($invoice_status)
    {
        if (is_null($invoice_status)) {
            throw new \InvalidArgumentException('non-nullable invoice_status cannot be null');
        }
        $allowedValues = $this->getInvoiceStatusAllowableValues();
        if (!in_array($invoice_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'invoice_status', must be one of '%s'",
                    $invoice_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invoice_status'] = $invoice_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


