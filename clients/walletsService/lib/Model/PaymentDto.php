<?php
/**
 * PaymentDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * WalletsService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PaymentDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'timestamp' => '\DateTime',
        'time_stamp' => '\DateTime',
        'test' => 'bool',
        'invoice_id' => 'string',
        'tenant_id' => 'string',
        'emisor_wallet_id' => 'string',
        'receiver_wallet_id' => 'string',
        'currency_id' => 'string',
        'forex_rate' => 'float',
        'total_cost' => 'float',
        'total_taxes' => 'float',
        'closed' => 'bool',
        'data' => 'string',
        'data_label' => 'string',
        'data1' => 'string',
        'data1_label' => 'string',
        'response' => 'string',
        'authorization' => 'string',
        'reference_code' => 'string',
        'correlation_code' => 'string',
        'last_updated' => '\DateTime',
        'on_behalf_of' => 'int',
        'payment_type' => 'int',
        'payment_status' => 'int',
        'base_cost' => 'float',
        'signature' => 'string',
        'signature_mismatch' => 'bool',
        'is_external' => 'bool',
        'marked_for_revision' => 'bool',
        'forex_rates_snapshot' => 'string',
        'official_id' => 'string',
        'official_id_expedition_date' => '\DateTime',
        'fiscal_identification_type_id' => 'string',
        'billing_address' => 'string',
        'phone' => 'string',
        'cellphone' => 'string',
        'department' => 'string',
        'city' => 'string',
        'country_id' => 'string',
        'location_id' => 'string',
        'entitlement_id' => 'string',
        'anti_fraud_score' => 'float',
        'call_record_url' => 'string',
        'called' => 'bool',
        'verified' => 'bool',
        'payer_picture_timestamp' => 'string',
        'payer_picture' => 'string',
        'identification_picture_timestamp' => 'string',
        'identification_picture' => 'string',
        'identification_back_picture' => 'string',
        'identification_back_picture_timestamp' => 'string',
        'ip_lookup_id' => 'string',
        'order_id' => 'string',
        'accounting_entry_id' => 'string',
        'payment_gateway_id' => 'string',
        'bank_account_id' => 'string',
        'enrolment_id' => 'string',
        'bank_id' => 'string',
        'payment_token_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'timestamp' => 'date-time',
        'time_stamp' => 'date-time',
        'test' => null,
        'invoice_id' => null,
        'tenant_id' => null,
        'emisor_wallet_id' => null,
        'receiver_wallet_id' => null,
        'currency_id' => null,
        'forex_rate' => 'double',
        'total_cost' => 'double',
        'total_taxes' => 'double',
        'closed' => null,
        'data' => null,
        'data_label' => null,
        'data1' => null,
        'data1_label' => null,
        'response' => null,
        'authorization' => null,
        'reference_code' => null,
        'correlation_code' => null,
        'last_updated' => 'date-time',
        'on_behalf_of' => 'int32',
        'payment_type' => 'int32',
        'payment_status' => 'int32',
        'base_cost' => 'double',
        'signature' => null,
        'signature_mismatch' => null,
        'is_external' => null,
        'marked_for_revision' => null,
        'forex_rates_snapshot' => null,
        'official_id' => null,
        'official_id_expedition_date' => 'date-time',
        'fiscal_identification_type_id' => null,
        'billing_address' => null,
        'phone' => null,
        'cellphone' => null,
        'department' => null,
        'city' => null,
        'country_id' => null,
        'location_id' => null,
        'entitlement_id' => null,
        'anti_fraud_score' => 'double',
        'call_record_url' => null,
        'called' => null,
        'verified' => null,
        'payer_picture_timestamp' => null,
        'payer_picture' => null,
        'identification_picture_timestamp' => null,
        'identification_picture' => null,
        'identification_back_picture' => null,
        'identification_back_picture_timestamp' => null,
        'ip_lookup_id' => null,
        'order_id' => null,
        'accounting_entry_id' => null,
        'payment_gateway_id' => null,
        'bank_account_id' => null,
        'enrolment_id' => null,
        'bank_id' => null,
        'payment_token_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'timestamp' => true,
        'time_stamp' => false,
        'test' => false,
        'invoice_id' => true,
        'tenant_id' => true,
        'emisor_wallet_id' => true,
        'receiver_wallet_id' => true,
        'currency_id' => true,
        'forex_rate' => false,
        'total_cost' => false,
        'total_taxes' => false,
        'closed' => false,
        'data' => true,
        'data_label' => true,
        'data1' => true,
        'data1_label' => true,
        'response' => true,
        'authorization' => true,
        'reference_code' => true,
        'correlation_code' => true,
        'last_updated' => false,
        'on_behalf_of' => false,
        'payment_type' => false,
        'payment_status' => false,
        'base_cost' => false,
        'signature' => true,
        'signature_mismatch' => false,
        'is_external' => false,
        'marked_for_revision' => false,
        'forex_rates_snapshot' => true,
        'official_id' => true,
        'official_id_expedition_date' => false,
        'fiscal_identification_type_id' => true,
        'billing_address' => true,
        'phone' => true,
        'cellphone' => true,
        'department' => true,
        'city' => true,
        'country_id' => true,
        'location_id' => true,
        'entitlement_id' => true,
        'anti_fraud_score' => false,
        'call_record_url' => true,
        'called' => false,
        'verified' => false,
        'payer_picture_timestamp' => true,
        'payer_picture' => true,
        'identification_picture_timestamp' => true,
        'identification_picture' => true,
        'identification_back_picture' => true,
        'identification_back_picture_timestamp' => true,
        'ip_lookup_id' => true,
        'order_id' => true,
        'accounting_entry_id' => true,
        'payment_gateway_id' => true,
        'bank_account_id' => true,
        'enrolment_id' => true,
        'bank_id' => true,
        'payment_token_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'timestamp' => 'timestamp',
        'time_stamp' => 'timeStamp',
        'test' => 'test',
        'invoice_id' => 'invoiceId',
        'tenant_id' => 'tenantId',
        'emisor_wallet_id' => 'emisorWalletId',
        'receiver_wallet_id' => 'receiverWalletId',
        'currency_id' => 'currencyId',
        'forex_rate' => 'forexRate',
        'total_cost' => 'totalCost',
        'total_taxes' => 'totalTaxes',
        'closed' => 'closed',
        'data' => 'data',
        'data_label' => 'dataLabel',
        'data1' => 'data1',
        'data1_label' => 'data1Label',
        'response' => 'response',
        'authorization' => 'authorization',
        'reference_code' => 'referenceCode',
        'correlation_code' => 'correlationCode',
        'last_updated' => 'lastUpdated',
        'on_behalf_of' => 'onBehalfOf',
        'payment_type' => 'paymentType',
        'payment_status' => 'paymentStatus',
        'base_cost' => 'baseCost',
        'signature' => 'signature',
        'signature_mismatch' => 'signatureMismatch',
        'is_external' => 'isExternal',
        'marked_for_revision' => 'markedForRevision',
        'forex_rates_snapshot' => 'forexRatesSnapshot',
        'official_id' => 'officialId',
        'official_id_expedition_date' => 'officialIdExpeditionDate',
        'fiscal_identification_type_id' => 'fiscalIdentificationTypeId',
        'billing_address' => 'billingAddress',
        'phone' => 'phone',
        'cellphone' => 'cellphone',
        'department' => 'department',
        'city' => 'city',
        'country_id' => 'countryId',
        'location_id' => 'locationId',
        'entitlement_id' => 'entitlementId',
        'anti_fraud_score' => 'antiFraudScore',
        'call_record_url' => 'callRecordURL',
        'called' => 'called',
        'verified' => 'verified',
        'payer_picture_timestamp' => 'payerPictureTimestamp',
        'payer_picture' => 'payerPicture',
        'identification_picture_timestamp' => 'identificationPictureTimestamp',
        'identification_picture' => 'identificationPicture',
        'identification_back_picture' => 'identificationBackPicture',
        'identification_back_picture_timestamp' => 'identificationBackPictureTimestamp',
        'ip_lookup_id' => 'ipLookupId',
        'order_id' => 'orderId',
        'accounting_entry_id' => 'accountingEntryId',
        'payment_gateway_id' => 'paymentGatewayId',
        'bank_account_id' => 'bankAccountId',
        'enrolment_id' => 'enrolmentId',
        'bank_id' => 'bankId',
        'payment_token_id' => 'paymentTokenId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'timestamp' => 'setTimestamp',
        'time_stamp' => 'setTimeStamp',
        'test' => 'setTest',
        'invoice_id' => 'setInvoiceId',
        'tenant_id' => 'setTenantId',
        'emisor_wallet_id' => 'setEmisorWalletId',
        'receiver_wallet_id' => 'setReceiverWalletId',
        'currency_id' => 'setCurrencyId',
        'forex_rate' => 'setForexRate',
        'total_cost' => 'setTotalCost',
        'total_taxes' => 'setTotalTaxes',
        'closed' => 'setClosed',
        'data' => 'setData',
        'data_label' => 'setDataLabel',
        'data1' => 'setData1',
        'data1_label' => 'setData1Label',
        'response' => 'setResponse',
        'authorization' => 'setAuthorization',
        'reference_code' => 'setReferenceCode',
        'correlation_code' => 'setCorrelationCode',
        'last_updated' => 'setLastUpdated',
        'on_behalf_of' => 'setOnBehalfOf',
        'payment_type' => 'setPaymentType',
        'payment_status' => 'setPaymentStatus',
        'base_cost' => 'setBaseCost',
        'signature' => 'setSignature',
        'signature_mismatch' => 'setSignatureMismatch',
        'is_external' => 'setIsExternal',
        'marked_for_revision' => 'setMarkedForRevision',
        'forex_rates_snapshot' => 'setForexRatesSnapshot',
        'official_id' => 'setOfficialId',
        'official_id_expedition_date' => 'setOfficialIdExpeditionDate',
        'fiscal_identification_type_id' => 'setFiscalIdentificationTypeId',
        'billing_address' => 'setBillingAddress',
        'phone' => 'setPhone',
        'cellphone' => 'setCellphone',
        'department' => 'setDepartment',
        'city' => 'setCity',
        'country_id' => 'setCountryId',
        'location_id' => 'setLocationId',
        'entitlement_id' => 'setEntitlementId',
        'anti_fraud_score' => 'setAntiFraudScore',
        'call_record_url' => 'setCallRecordUrl',
        'called' => 'setCalled',
        'verified' => 'setVerified',
        'payer_picture_timestamp' => 'setPayerPictureTimestamp',
        'payer_picture' => 'setPayerPicture',
        'identification_picture_timestamp' => 'setIdentificationPictureTimestamp',
        'identification_picture' => 'setIdentificationPicture',
        'identification_back_picture' => 'setIdentificationBackPicture',
        'identification_back_picture_timestamp' => 'setIdentificationBackPictureTimestamp',
        'ip_lookup_id' => 'setIpLookupId',
        'order_id' => 'setOrderId',
        'accounting_entry_id' => 'setAccountingEntryId',
        'payment_gateway_id' => 'setPaymentGatewayId',
        'bank_account_id' => 'setBankAccountId',
        'enrolment_id' => 'setEnrolmentId',
        'bank_id' => 'setBankId',
        'payment_token_id' => 'setPaymentTokenId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'timestamp' => 'getTimestamp',
        'time_stamp' => 'getTimeStamp',
        'test' => 'getTest',
        'invoice_id' => 'getInvoiceId',
        'tenant_id' => 'getTenantId',
        'emisor_wallet_id' => 'getEmisorWalletId',
        'receiver_wallet_id' => 'getReceiverWalletId',
        'currency_id' => 'getCurrencyId',
        'forex_rate' => 'getForexRate',
        'total_cost' => 'getTotalCost',
        'total_taxes' => 'getTotalTaxes',
        'closed' => 'getClosed',
        'data' => 'getData',
        'data_label' => 'getDataLabel',
        'data1' => 'getData1',
        'data1_label' => 'getData1Label',
        'response' => 'getResponse',
        'authorization' => 'getAuthorization',
        'reference_code' => 'getReferenceCode',
        'correlation_code' => 'getCorrelationCode',
        'last_updated' => 'getLastUpdated',
        'on_behalf_of' => 'getOnBehalfOf',
        'payment_type' => 'getPaymentType',
        'payment_status' => 'getPaymentStatus',
        'base_cost' => 'getBaseCost',
        'signature' => 'getSignature',
        'signature_mismatch' => 'getSignatureMismatch',
        'is_external' => 'getIsExternal',
        'marked_for_revision' => 'getMarkedForRevision',
        'forex_rates_snapshot' => 'getForexRatesSnapshot',
        'official_id' => 'getOfficialId',
        'official_id_expedition_date' => 'getOfficialIdExpeditionDate',
        'fiscal_identification_type_id' => 'getFiscalIdentificationTypeId',
        'billing_address' => 'getBillingAddress',
        'phone' => 'getPhone',
        'cellphone' => 'getCellphone',
        'department' => 'getDepartment',
        'city' => 'getCity',
        'country_id' => 'getCountryId',
        'location_id' => 'getLocationId',
        'entitlement_id' => 'getEntitlementId',
        'anti_fraud_score' => 'getAntiFraudScore',
        'call_record_url' => 'getCallRecordUrl',
        'called' => 'getCalled',
        'verified' => 'getVerified',
        'payer_picture_timestamp' => 'getPayerPictureTimestamp',
        'payer_picture' => 'getPayerPicture',
        'identification_picture_timestamp' => 'getIdentificationPictureTimestamp',
        'identification_picture' => 'getIdentificationPicture',
        'identification_back_picture' => 'getIdentificationBackPicture',
        'identification_back_picture_timestamp' => 'getIdentificationBackPictureTimestamp',
        'ip_lookup_id' => 'getIpLookupId',
        'order_id' => 'getOrderId',
        'accounting_entry_id' => 'getAccountingEntryId',
        'payment_gateway_id' => 'getPaymentGatewayId',
        'bank_account_id' => 'getBankAccountId',
        'enrolment_id' => 'getEnrolmentId',
        'bank_id' => 'getBankId',
        'payment_token_id' => 'getPaymentTokenId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ON_BEHALF_OF_NUMBER_0 = 0;
    public const ON_BEHALF_OF_NUMBER_1 = 1;
    public const ON_BEHALF_OF_NUMBER_2 = 2;
    public const ON_BEHALF_OF_NUMBER_3 = 3;
    public const PAYMENT_TYPE_NUMBER_0 = 0;
    public const PAYMENT_TYPE_NUMBER_1 = 1;
    public const PAYMENT_TYPE_NUMBER_2 = 2;
    public const PAYMENT_STATUS_NUMBER_0 = 0;
    public const PAYMENT_STATUS_NUMBER_1 = 1;
    public const PAYMENT_STATUS_NUMBER_2 = 2;
    public const PAYMENT_STATUS_NUMBER_3 = 3;
    public const PAYMENT_STATUS_NUMBER_4 = 4;
    public const PAYMENT_STATUS_NUMBER_5 = 5;
    public const PAYMENT_STATUS_NUMBER_6 = 6;
    public const PAYMENT_STATUS_NUMBER_7 = 7;
    public const PAYMENT_STATUS_NUMBER_8 = 8;
    public const PAYMENT_STATUS_NUMBER_9 = 9;
    public const PAYMENT_STATUS_NUMBER_10 = 10;
    public const PAYMENT_STATUS_NUMBER_11 = 11;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOnBehalfOfAllowableValues()
    {
        return [
            self::ON_BEHALF_OF_NUMBER_0,
            self::ON_BEHALF_OF_NUMBER_1,
            self::ON_BEHALF_OF_NUMBER_2,
            self::ON_BEHALF_OF_NUMBER_3,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentTypeAllowableValues()
    {
        return [
            self::PAYMENT_TYPE_NUMBER_0,
            self::PAYMENT_TYPE_NUMBER_1,
            self::PAYMENT_TYPE_NUMBER_2,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentStatusAllowableValues()
    {
        return [
            self::PAYMENT_STATUS_NUMBER_0,
            self::PAYMENT_STATUS_NUMBER_1,
            self::PAYMENT_STATUS_NUMBER_2,
            self::PAYMENT_STATUS_NUMBER_3,
            self::PAYMENT_STATUS_NUMBER_4,
            self::PAYMENT_STATUS_NUMBER_5,
            self::PAYMENT_STATUS_NUMBER_6,
            self::PAYMENT_STATUS_NUMBER_7,
            self::PAYMENT_STATUS_NUMBER_8,
            self::PAYMENT_STATUS_NUMBER_9,
            self::PAYMENT_STATUS_NUMBER_10,
            self::PAYMENT_STATUS_NUMBER_11,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('time_stamp', $data ?? [], null);
        $this->setIfExists('test', $data ?? [], null);
        $this->setIfExists('invoice_id', $data ?? [], null);
        $this->setIfExists('tenant_id', $data ?? [], null);
        $this->setIfExists('emisor_wallet_id', $data ?? [], null);
        $this->setIfExists('receiver_wallet_id', $data ?? [], null);
        $this->setIfExists('currency_id', $data ?? [], null);
        $this->setIfExists('forex_rate', $data ?? [], null);
        $this->setIfExists('total_cost', $data ?? [], null);
        $this->setIfExists('total_taxes', $data ?? [], null);
        $this->setIfExists('closed', $data ?? [], null);
        $this->setIfExists('data', $data ?? [], null);
        $this->setIfExists('data_label', $data ?? [], null);
        $this->setIfExists('data1', $data ?? [], null);
        $this->setIfExists('data1_label', $data ?? [], null);
        $this->setIfExists('response', $data ?? [], null);
        $this->setIfExists('authorization', $data ?? [], null);
        $this->setIfExists('reference_code', $data ?? [], null);
        $this->setIfExists('correlation_code', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('on_behalf_of', $data ?? [], null);
        $this->setIfExists('payment_type', $data ?? [], null);
        $this->setIfExists('payment_status', $data ?? [], null);
        $this->setIfExists('base_cost', $data ?? [], null);
        $this->setIfExists('signature', $data ?? [], null);
        $this->setIfExists('signature_mismatch', $data ?? [], null);
        $this->setIfExists('is_external', $data ?? [], null);
        $this->setIfExists('marked_for_revision', $data ?? [], null);
        $this->setIfExists('forex_rates_snapshot', $data ?? [], null);
        $this->setIfExists('official_id', $data ?? [], null);
        $this->setIfExists('official_id_expedition_date', $data ?? [], null);
        $this->setIfExists('fiscal_identification_type_id', $data ?? [], null);
        $this->setIfExists('billing_address', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('cellphone', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('country_id', $data ?? [], null);
        $this->setIfExists('location_id', $data ?? [], null);
        $this->setIfExists('entitlement_id', $data ?? [], null);
        $this->setIfExists('anti_fraud_score', $data ?? [], null);
        $this->setIfExists('call_record_url', $data ?? [], null);
        $this->setIfExists('called', $data ?? [], null);
        $this->setIfExists('verified', $data ?? [], null);
        $this->setIfExists('payer_picture_timestamp', $data ?? [], null);
        $this->setIfExists('payer_picture', $data ?? [], null);
        $this->setIfExists('identification_picture_timestamp', $data ?? [], null);
        $this->setIfExists('identification_picture', $data ?? [], null);
        $this->setIfExists('identification_back_picture', $data ?? [], null);
        $this->setIfExists('identification_back_picture_timestamp', $data ?? [], null);
        $this->setIfExists('ip_lookup_id', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('accounting_entry_id', $data ?? [], null);
        $this->setIfExists('payment_gateway_id', $data ?? [], null);
        $this->setIfExists('bank_account_id', $data ?? [], null);
        $this->setIfExists('enrolment_id', $data ?? [], null);
        $this->setIfExists('bank_id', $data ?? [], null);
        $this->setIfExists('payment_token_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOnBehalfOfAllowableValues();
        if (!is_null($this->container['on_behalf_of']) && !in_array($this->container['on_behalf_of'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'on_behalf_of', must be one of '%s'",
                $this->container['on_behalf_of'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!is_null($this->container['payment_type']) && !in_array($this->container['payment_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_type', must be one of '%s'",
                $this->container['payment_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($this->container['payment_status']) && !in_array($this->container['payment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_status', must be one of '%s'",
                $this->container['payment_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets time_stamp
     *
     * @return \DateTime|null
     */
    public function getTimeStamp()
    {
        return $this->container['time_stamp'];
    }

    /**
     * Sets time_stamp
     *
     * @param \DateTime|null $time_stamp time_stamp
     *
     * @return self
     */
    public function setTimeStamp($time_stamp)
    {
        if (is_null($time_stamp)) {
            throw new \InvalidArgumentException('non-nullable time_stamp cannot be null');
        }
        $this->container['time_stamp'] = $time_stamp;

        return $this;
    }

    /**
     * Gets test
     *
     * @return bool|null
     */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
     * Sets test
     *
     * @param bool|null $test test
     *
     * @return self
     */
    public function setTest($test)
    {
        if (is_null($test)) {
            throw new \InvalidArgumentException('non-nullable test cannot be null');
        }
        $this->container['test'] = $test;

        return $this;
    }

    /**
     * Gets invoice_id
     *
     * @return string|null
     */
    public function getInvoiceId()
    {
        return $this->container['invoice_id'];
    }

    /**
     * Sets invoice_id
     *
     * @param string|null $invoice_id invoice_id
     *
     * @return self
     */
    public function setInvoiceId($invoice_id)
    {
        if (is_null($invoice_id)) {
            array_push($this->openAPINullablesSetToNull, 'invoice_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoice_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoice_id'] = $invoice_id;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string|null
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string|null $tenant_id tenant_id
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        if (is_null($tenant_id)) {
            array_push($this->openAPINullablesSetToNull, 'tenant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tenant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets emisor_wallet_id
     *
     * @return string|null
     */
    public function getEmisorWalletId()
    {
        return $this->container['emisor_wallet_id'];
    }

    /**
     * Sets emisor_wallet_id
     *
     * @param string|null $emisor_wallet_id emisor_wallet_id
     *
     * @return self
     */
    public function setEmisorWalletId($emisor_wallet_id)
    {
        if (is_null($emisor_wallet_id)) {
            array_push($this->openAPINullablesSetToNull, 'emisor_wallet_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('emisor_wallet_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['emisor_wallet_id'] = $emisor_wallet_id;

        return $this;
    }

    /**
     * Gets receiver_wallet_id
     *
     * @return string|null
     */
    public function getReceiverWalletId()
    {
        return $this->container['receiver_wallet_id'];
    }

    /**
     * Sets receiver_wallet_id
     *
     * @param string|null $receiver_wallet_id receiver_wallet_id
     *
     * @return self
     */
    public function setReceiverWalletId($receiver_wallet_id)
    {
        if (is_null($receiver_wallet_id)) {
            array_push($this->openAPINullablesSetToNull, 'receiver_wallet_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('receiver_wallet_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['receiver_wallet_id'] = $receiver_wallet_id;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string|null
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string|null $currency_id currency_id
     *
     * @return self
     */
    public function setCurrencyId($currency_id)
    {
        if (is_null($currency_id)) {
            array_push($this->openAPINullablesSetToNull, 'currency_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets forex_rate
     *
     * @return float|null
     */
    public function getForexRate()
    {
        return $this->container['forex_rate'];
    }

    /**
     * Sets forex_rate
     *
     * @param float|null $forex_rate forex_rate
     *
     * @return self
     */
    public function setForexRate($forex_rate)
    {
        if (is_null($forex_rate)) {
            throw new \InvalidArgumentException('non-nullable forex_rate cannot be null');
        }
        $this->container['forex_rate'] = $forex_rate;

        return $this;
    }

    /**
     * Gets total_cost
     *
     * @return float|null
     */
    public function getTotalCost()
    {
        return $this->container['total_cost'];
    }

    /**
     * Sets total_cost
     *
     * @param float|null $total_cost total_cost
     *
     * @return self
     */
    public function setTotalCost($total_cost)
    {
        if (is_null($total_cost)) {
            throw new \InvalidArgumentException('non-nullable total_cost cannot be null');
        }
        $this->container['total_cost'] = $total_cost;

        return $this;
    }

    /**
     * Gets total_taxes
     *
     * @return float|null
     */
    public function getTotalTaxes()
    {
        return $this->container['total_taxes'];
    }

    /**
     * Sets total_taxes
     *
     * @param float|null $total_taxes total_taxes
     *
     * @return self
     */
    public function setTotalTaxes($total_taxes)
    {
        if (is_null($total_taxes)) {
            throw new \InvalidArgumentException('non-nullable total_taxes cannot be null');
        }
        $this->container['total_taxes'] = $total_taxes;

        return $this;
    }

    /**
     * Gets closed
     *
     * @return bool|null
     */
    public function getClosed()
    {
        return $this->container['closed'];
    }

    /**
     * Sets closed
     *
     * @param bool|null $closed closed
     *
     * @return self
     */
    public function setClosed($closed)
    {
        if (is_null($closed)) {
            throw new \InvalidArgumentException('non-nullable closed cannot be null');
        }
        $this->container['closed'] = $closed;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data data
     *
     * @return self
     */
    public function setData($data)
    {
        if (is_null($data)) {
            array_push($this->openAPINullablesSetToNull, 'data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets data_label
     *
     * @return string|null
     */
    public function getDataLabel()
    {
        return $this->container['data_label'];
    }

    /**
     * Sets data_label
     *
     * @param string|null $data_label data_label
     *
     * @return self
     */
    public function setDataLabel($data_label)
    {
        if (is_null($data_label)) {
            array_push($this->openAPINullablesSetToNull, 'data_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_label'] = $data_label;

        return $this;
    }

    /**
     * Gets data1
     *
     * @return string|null
     */
    public function getData1()
    {
        return $this->container['data1'];
    }

    /**
     * Sets data1
     *
     * @param string|null $data1 data1
     *
     * @return self
     */
    public function setData1($data1)
    {
        if (is_null($data1)) {
            array_push($this->openAPINullablesSetToNull, 'data1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data1'] = $data1;

        return $this;
    }

    /**
     * Gets data1_label
     *
     * @return string|null
     */
    public function getData1Label()
    {
        return $this->container['data1_label'];
    }

    /**
     * Sets data1_label
     *
     * @param string|null $data1_label data1_label
     *
     * @return self
     */
    public function setData1Label($data1_label)
    {
        if (is_null($data1_label)) {
            array_push($this->openAPINullablesSetToNull, 'data1_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data1_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data1_label'] = $data1_label;

        return $this;
    }

    /**
     * Gets response
     *
     * @return string|null
     */
    public function getResponse()
    {
        return $this->container['response'];
    }

    /**
     * Sets response
     *
     * @param string|null $response response
     *
     * @return self
     */
    public function setResponse($response)
    {
        if (is_null($response)) {
            array_push($this->openAPINullablesSetToNull, 'response');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('response', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['response'] = $response;

        return $this;
    }

    /**
     * Gets authorization
     *
     * @return string|null
     */
    public function getAuthorization()
    {
        return $this->container['authorization'];
    }

    /**
     * Sets authorization
     *
     * @param string|null $authorization authorization
     *
     * @return self
     */
    public function setAuthorization($authorization)
    {
        if (is_null($authorization)) {
            array_push($this->openAPINullablesSetToNull, 'authorization');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authorization', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['authorization'] = $authorization;

        return $this;
    }

    /**
     * Gets reference_code
     *
     * @return string|null
     */
    public function getReferenceCode()
    {
        return $this->container['reference_code'];
    }

    /**
     * Sets reference_code
     *
     * @param string|null $reference_code reference_code
     *
     * @return self
     */
    public function setReferenceCode($reference_code)
    {
        if (is_null($reference_code)) {
            array_push($this->openAPINullablesSetToNull, 'reference_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reference_code'] = $reference_code;

        return $this;
    }

    /**
     * Gets correlation_code
     *
     * @return string|null
     */
    public function getCorrelationCode()
    {
        return $this->container['correlation_code'];
    }

    /**
     * Sets correlation_code
     *
     * @param string|null $correlation_code correlation_code
     *
     * @return self
     */
    public function setCorrelationCode($correlation_code)
    {
        if (is_null($correlation_code)) {
            array_push($this->openAPINullablesSetToNull, 'correlation_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('correlation_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['correlation_code'] = $correlation_code;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets on_behalf_of
     *
     * @return int|null
     */
    public function getOnBehalfOf()
    {
        return $this->container['on_behalf_of'];
    }

    /**
     * Sets on_behalf_of
     *
     * @param int|null $on_behalf_of on_behalf_of
     *
     * @return self
     */
    public function setOnBehalfOf($on_behalf_of)
    {
        if (is_null($on_behalf_of)) {
            throw new \InvalidArgumentException('non-nullable on_behalf_of cannot be null');
        }
        $allowedValues = $this->getOnBehalfOfAllowableValues();
        if (!in_array($on_behalf_of, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'on_behalf_of', must be one of '%s'",
                    $on_behalf_of,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['on_behalf_of'] = $on_behalf_of;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return int|null
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param int|null $payment_type payment_type
     *
     * @return self
     */
    public function setPaymentType($payment_type)
    {
        if (is_null($payment_type)) {
            throw new \InvalidArgumentException('non-nullable payment_type cannot be null');
        }
        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!in_array($payment_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_type', must be one of '%s'",
                    $payment_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return int|null
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param int|null $payment_status payment_status
     *
     * @return self
     */
    public function setPaymentStatus($payment_status)
    {
        if (is_null($payment_status)) {
            throw new \InvalidArgumentException('non-nullable payment_status cannot be null');
        }
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!in_array($payment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_status', must be one of '%s'",
                    $payment_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets base_cost
     *
     * @return float|null
     */
    public function getBaseCost()
    {
        return $this->container['base_cost'];
    }

    /**
     * Sets base_cost
     *
     * @param float|null $base_cost base_cost
     *
     * @return self
     */
    public function setBaseCost($base_cost)
    {
        if (is_null($base_cost)) {
            throw new \InvalidArgumentException('non-nullable base_cost cannot be null');
        }
        $this->container['base_cost'] = $base_cost;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return string|null
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param string|null $signature signature
     *
     * @return self
     */
    public function setSignature($signature)
    {
        if (is_null($signature)) {
            array_push($this->openAPINullablesSetToNull, 'signature');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('signature', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Gets signature_mismatch
     *
     * @return bool|null
     */
    public function getSignatureMismatch()
    {
        return $this->container['signature_mismatch'];
    }

    /**
     * Sets signature_mismatch
     *
     * @param bool|null $signature_mismatch signature_mismatch
     *
     * @return self
     */
    public function setSignatureMismatch($signature_mismatch)
    {
        if (is_null($signature_mismatch)) {
            throw new \InvalidArgumentException('non-nullable signature_mismatch cannot be null');
        }
        $this->container['signature_mismatch'] = $signature_mismatch;

        return $this;
    }

    /**
     * Gets is_external
     *
     * @return bool|null
     */
    public function getIsExternal()
    {
        return $this->container['is_external'];
    }

    /**
     * Sets is_external
     *
     * @param bool|null $is_external is_external
     *
     * @return self
     */
    public function setIsExternal($is_external)
    {
        if (is_null($is_external)) {
            throw new \InvalidArgumentException('non-nullable is_external cannot be null');
        }
        $this->container['is_external'] = $is_external;

        return $this;
    }

    /**
     * Gets marked_for_revision
     *
     * @return bool|null
     */
    public function getMarkedForRevision()
    {
        return $this->container['marked_for_revision'];
    }

    /**
     * Sets marked_for_revision
     *
     * @param bool|null $marked_for_revision marked_for_revision
     *
     * @return self
     */
    public function setMarkedForRevision($marked_for_revision)
    {
        if (is_null($marked_for_revision)) {
            throw new \InvalidArgumentException('non-nullable marked_for_revision cannot be null');
        }
        $this->container['marked_for_revision'] = $marked_for_revision;

        return $this;
    }

    /**
     * Gets forex_rates_snapshot
     *
     * @return string|null
     */
    public function getForexRatesSnapshot()
    {
        return $this->container['forex_rates_snapshot'];
    }

    /**
     * Sets forex_rates_snapshot
     *
     * @param string|null $forex_rates_snapshot forex_rates_snapshot
     *
     * @return self
     */
    public function setForexRatesSnapshot($forex_rates_snapshot)
    {
        if (is_null($forex_rates_snapshot)) {
            array_push($this->openAPINullablesSetToNull, 'forex_rates_snapshot');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('forex_rates_snapshot', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['forex_rates_snapshot'] = $forex_rates_snapshot;

        return $this;
    }

    /**
     * Gets official_id
     *
     * @return string|null
     */
    public function getOfficialId()
    {
        return $this->container['official_id'];
    }

    /**
     * Sets official_id
     *
     * @param string|null $official_id official_id
     *
     * @return self
     */
    public function setOfficialId($official_id)
    {
        if (is_null($official_id)) {
            array_push($this->openAPINullablesSetToNull, 'official_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('official_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['official_id'] = $official_id;

        return $this;
    }

    /**
     * Gets official_id_expedition_date
     *
     * @return \DateTime|null
     */
    public function getOfficialIdExpeditionDate()
    {
        return $this->container['official_id_expedition_date'];
    }

    /**
     * Sets official_id_expedition_date
     *
     * @param \DateTime|null $official_id_expedition_date official_id_expedition_date
     *
     * @return self
     */
    public function setOfficialIdExpeditionDate($official_id_expedition_date)
    {
        if (is_null($official_id_expedition_date)) {
            throw new \InvalidArgumentException('non-nullable official_id_expedition_date cannot be null');
        }
        $this->container['official_id_expedition_date'] = $official_id_expedition_date;

        return $this;
    }

    /**
     * Gets fiscal_identification_type_id
     *
     * @return string|null
     */
    public function getFiscalIdentificationTypeId()
    {
        return $this->container['fiscal_identification_type_id'];
    }

    /**
     * Sets fiscal_identification_type_id
     *
     * @param string|null $fiscal_identification_type_id fiscal_identification_type_id
     *
     * @return self
     */
    public function setFiscalIdentificationTypeId($fiscal_identification_type_id)
    {
        if (is_null($fiscal_identification_type_id)) {
            array_push($this->openAPINullablesSetToNull, 'fiscal_identification_type_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fiscal_identification_type_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fiscal_identification_type_id'] = $fiscal_identification_type_id;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return string|null
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param string|null $billing_address billing_address
     *
     * @return self
     */
    public function setBillingAddress($billing_address)
    {
        if (is_null($billing_address)) {
            array_push($this->openAPINullablesSetToNull, 'billing_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            array_push($this->openAPINullablesSetToNull, 'phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets cellphone
     *
     * @return string|null
     */
    public function getCellphone()
    {
        return $this->container['cellphone'];
    }

    /**
     * Sets cellphone
     *
     * @param string|null $cellphone cellphone
     *
     * @return self
     */
    public function setCellphone($cellphone)
    {
        if (is_null($cellphone)) {
            array_push($this->openAPINullablesSetToNull, 'cellphone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cellphone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cellphone'] = $cellphone;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department department
     *
     * @return self
     */
    public function setDepartment($department)
    {
        if (is_null($department)) {
            array_push($this->openAPINullablesSetToNull, 'department');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('department', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            array_push($this->openAPINullablesSetToNull, 'city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return string|null
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param string|null $country_id country_id
     *
     * @return self
     */
    public function setCountryId($country_id)
    {
        if (is_null($country_id)) {
            array_push($this->openAPINullablesSetToNull, 'country_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return string|null
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param string|null $location_id location_id
     *
     * @return self
     */
    public function setLocationId($location_id)
    {
        if (is_null($location_id)) {
            array_push($this->openAPINullablesSetToNull, 'location_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets entitlement_id
     *
     * @return string|null
     */
    public function getEntitlementId()
    {
        return $this->container['entitlement_id'];
    }

    /**
     * Sets entitlement_id
     *
     * @param string|null $entitlement_id entitlement_id
     *
     * @return self
     */
    public function setEntitlementId($entitlement_id)
    {
        if (is_null($entitlement_id)) {
            array_push($this->openAPINullablesSetToNull, 'entitlement_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('entitlement_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['entitlement_id'] = $entitlement_id;

        return $this;
    }

    /**
     * Gets anti_fraud_score
     *
     * @return float|null
     */
    public function getAntiFraudScore()
    {
        return $this->container['anti_fraud_score'];
    }

    /**
     * Sets anti_fraud_score
     *
     * @param float|null $anti_fraud_score anti_fraud_score
     *
     * @return self
     */
    public function setAntiFraudScore($anti_fraud_score)
    {
        if (is_null($anti_fraud_score)) {
            throw new \InvalidArgumentException('non-nullable anti_fraud_score cannot be null');
        }
        $this->container['anti_fraud_score'] = $anti_fraud_score;

        return $this;
    }

    /**
     * Gets call_record_url
     *
     * @return string|null
     */
    public function getCallRecordUrl()
    {
        return $this->container['call_record_url'];
    }

    /**
     * Sets call_record_url
     *
     * @param string|null $call_record_url call_record_url
     *
     * @return self
     */
    public function setCallRecordUrl($call_record_url)
    {
        if (is_null($call_record_url)) {
            array_push($this->openAPINullablesSetToNull, 'call_record_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_record_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_record_url'] = $call_record_url;

        return $this;
    }

    /**
     * Gets called
     *
     * @return bool|null
     */
    public function getCalled()
    {
        return $this->container['called'];
    }

    /**
     * Sets called
     *
     * @param bool|null $called called
     *
     * @return self
     */
    public function setCalled($called)
    {
        if (is_null($called)) {
            throw new \InvalidArgumentException('non-nullable called cannot be null');
        }
        $this->container['called'] = $called;

        return $this;
    }

    /**
     * Gets verified
     *
     * @return bool|null
     */
    public function getVerified()
    {
        return $this->container['verified'];
    }

    /**
     * Sets verified
     *
     * @param bool|null $verified verified
     *
     * @return self
     */
    public function setVerified($verified)
    {
        if (is_null($verified)) {
            throw new \InvalidArgumentException('non-nullable verified cannot be null');
        }
        $this->container['verified'] = $verified;

        return $this;
    }

    /**
     * Gets payer_picture_timestamp
     *
     * @return string|null
     */
    public function getPayerPictureTimestamp()
    {
        return $this->container['payer_picture_timestamp'];
    }

    /**
     * Sets payer_picture_timestamp
     *
     * @param string|null $payer_picture_timestamp payer_picture_timestamp
     *
     * @return self
     */
    public function setPayerPictureTimestamp($payer_picture_timestamp)
    {
        if (is_null($payer_picture_timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'payer_picture_timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payer_picture_timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payer_picture_timestamp'] = $payer_picture_timestamp;

        return $this;
    }

    /**
     * Gets payer_picture
     *
     * @return string|null
     */
    public function getPayerPicture()
    {
        return $this->container['payer_picture'];
    }

    /**
     * Sets payer_picture
     *
     * @param string|null $payer_picture payer_picture
     *
     * @return self
     */
    public function setPayerPicture($payer_picture)
    {
        if (is_null($payer_picture)) {
            array_push($this->openAPINullablesSetToNull, 'payer_picture');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payer_picture', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payer_picture'] = $payer_picture;

        return $this;
    }

    /**
     * Gets identification_picture_timestamp
     *
     * @return string|null
     */
    public function getIdentificationPictureTimestamp()
    {
        return $this->container['identification_picture_timestamp'];
    }

    /**
     * Sets identification_picture_timestamp
     *
     * @param string|null $identification_picture_timestamp identification_picture_timestamp
     *
     * @return self
     */
    public function setIdentificationPictureTimestamp($identification_picture_timestamp)
    {
        if (is_null($identification_picture_timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'identification_picture_timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('identification_picture_timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['identification_picture_timestamp'] = $identification_picture_timestamp;

        return $this;
    }

    /**
     * Gets identification_picture
     *
     * @return string|null
     */
    public function getIdentificationPicture()
    {
        return $this->container['identification_picture'];
    }

    /**
     * Sets identification_picture
     *
     * @param string|null $identification_picture identification_picture
     *
     * @return self
     */
    public function setIdentificationPicture($identification_picture)
    {
        if (is_null($identification_picture)) {
            array_push($this->openAPINullablesSetToNull, 'identification_picture');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('identification_picture', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['identification_picture'] = $identification_picture;

        return $this;
    }

    /**
     * Gets identification_back_picture
     *
     * @return string|null
     */
    public function getIdentificationBackPicture()
    {
        return $this->container['identification_back_picture'];
    }

    /**
     * Sets identification_back_picture
     *
     * @param string|null $identification_back_picture identification_back_picture
     *
     * @return self
     */
    public function setIdentificationBackPicture($identification_back_picture)
    {
        if (is_null($identification_back_picture)) {
            array_push($this->openAPINullablesSetToNull, 'identification_back_picture');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('identification_back_picture', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['identification_back_picture'] = $identification_back_picture;

        return $this;
    }

    /**
     * Gets identification_back_picture_timestamp
     *
     * @return string|null
     */
    public function getIdentificationBackPictureTimestamp()
    {
        return $this->container['identification_back_picture_timestamp'];
    }

    /**
     * Sets identification_back_picture_timestamp
     *
     * @param string|null $identification_back_picture_timestamp identification_back_picture_timestamp
     *
     * @return self
     */
    public function setIdentificationBackPictureTimestamp($identification_back_picture_timestamp)
    {
        if (is_null($identification_back_picture_timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'identification_back_picture_timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('identification_back_picture_timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['identification_back_picture_timestamp'] = $identification_back_picture_timestamp;

        return $this;
    }

    /**
     * Gets ip_lookup_id
     *
     * @return string|null
     */
    public function getIpLookupId()
    {
        return $this->container['ip_lookup_id'];
    }

    /**
     * Sets ip_lookup_id
     *
     * @param string|null $ip_lookup_id ip_lookup_id
     *
     * @return self
     */
    public function setIpLookupId($ip_lookup_id)
    {
        if (is_null($ip_lookup_id)) {
            array_push($this->openAPINullablesSetToNull, 'ip_lookup_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ip_lookup_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ip_lookup_id'] = $ip_lookup_id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id order_id
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            array_push($this->openAPINullablesSetToNull, 'order_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets accounting_entry_id
     *
     * @return string|null
     */
    public function getAccountingEntryId()
    {
        return $this->container['accounting_entry_id'];
    }

    /**
     * Sets accounting_entry_id
     *
     * @param string|null $accounting_entry_id accounting_entry_id
     *
     * @return self
     */
    public function setAccountingEntryId($accounting_entry_id)
    {
        if (is_null($accounting_entry_id)) {
            array_push($this->openAPINullablesSetToNull, 'accounting_entry_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accounting_entry_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['accounting_entry_id'] = $accounting_entry_id;

        return $this;
    }

    /**
     * Gets payment_gateway_id
     *
     * @return string|null
     */
    public function getPaymentGatewayId()
    {
        return $this->container['payment_gateway_id'];
    }

    /**
     * Sets payment_gateway_id
     *
     * @param string|null $payment_gateway_id payment_gateway_id
     *
     * @return self
     */
    public function setPaymentGatewayId($payment_gateway_id)
    {
        if (is_null($payment_gateway_id)) {
            array_push($this->openAPINullablesSetToNull, 'payment_gateway_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_gateway_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_gateway_id'] = $payment_gateway_id;

        return $this;
    }

    /**
     * Gets bank_account_id
     *
     * @return string|null
     */
    public function getBankAccountId()
    {
        return $this->container['bank_account_id'];
    }

    /**
     * Sets bank_account_id
     *
     * @param string|null $bank_account_id bank_account_id
     *
     * @return self
     */
    public function setBankAccountId($bank_account_id)
    {
        if (is_null($bank_account_id)) {
            array_push($this->openAPINullablesSetToNull, 'bank_account_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bank_account_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bank_account_id'] = $bank_account_id;

        return $this;
    }

    /**
     * Gets enrolment_id
     *
     * @return string|null
     */
    public function getEnrolmentId()
    {
        return $this->container['enrolment_id'];
    }

    /**
     * Sets enrolment_id
     *
     * @param string|null $enrolment_id enrolment_id
     *
     * @return self
     */
    public function setEnrolmentId($enrolment_id)
    {
        if (is_null($enrolment_id)) {
            array_push($this->openAPINullablesSetToNull, 'enrolment_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enrolment_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enrolment_id'] = $enrolment_id;

        return $this;
    }

    /**
     * Gets bank_id
     *
     * @return string|null
     */
    public function getBankId()
    {
        return $this->container['bank_id'];
    }

    /**
     * Sets bank_id
     *
     * @param string|null $bank_id bank_id
     *
     * @return self
     */
    public function setBankId($bank_id)
    {
        if (is_null($bank_id)) {
            array_push($this->openAPINullablesSetToNull, 'bank_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bank_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bank_id'] = $bank_id;

        return $this;
    }

    /**
     * Gets payment_token_id
     *
     * @return string|null
     */
    public function getPaymentTokenId()
    {
        return $this->container['payment_token_id'];
    }

    /**
     * Sets payment_token_id
     *
     * @param string|null $payment_token_id payment_token_id
     *
     * @return self
     */
    public function setPaymentTokenId($payment_token_id)
    {
        if (is_null($payment_token_id)) {
            array_push($this->openAPINullablesSetToNull, 'payment_token_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_token_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_token_id'] = $payment_token_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


