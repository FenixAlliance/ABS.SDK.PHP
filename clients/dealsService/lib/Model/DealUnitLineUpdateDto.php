<?php
/**
 * DealUnitLineUpdateDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DealsService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DealUnitLineUpdateDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DealUnitLineUpdateDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DealUnitLineUpdateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'closed' => 'bool',
        'item_id' => 'string',
        'item_title' => 'string',
        'item_short_description' => 'string',
        'item_primary_image_url' => 'string',
        'shipping_policy_id' => 'string',
        'tenant_id' => 'string',
        'enrollment_id' => 'string',
        'currency_id' => 'string',
        'description' => 'string',
        'quantity' => 'float',
        'free' => 'bool',
        'free_reason' => 'string',
        'free_reason_code' => 'string',
        'data' => 'string',
        'data_label' => 'string',
        'data1' => 'string',
        'data1_label' => 'string',
        'data2' => 'string',
        'data2_label' => 'string',
        'data3' => 'string',
        'data3_label' => 'string',
        'data4' => 'string',
        'data4_label' => 'string',
        'data5' => 'string',
        'data5_label' => 'string',
        'data6' => 'string',
        'data6_label' => 'string',
        'data7' => 'string',
        'data7_label' => 'string',
        'data8' => 'string',
        'data8_label' => 'string',
        'data9' => 'string',
        'data9_label' => 'string',
        'item_price_id' => 'string',
        'price_list_item_id' => 'string',
        'unit_id' => 'string',
        'unit_group_id' => 'string',
        'tax_calculation_method' => 'int',
        'cost_calculation_method' => 'int',
        'forex_rates_snapshot' => 'string',
        'forex_rate' => 'float',
        'total_base_amount_in_usd' => 'float',
        'total_profit_in_usd' => 'float',
        'total_detail_amount_in_usd' => 'float',
        'total_tax_base_in_usd' => 'float',
        'total_discounts_in_usd' => 'float',
        'total_taxes_in_usd' => 'float',
        'total_withholding_taxes_in_usd' => 'float',
        'total_shipping_cost_in_usd' => 'float',
        'total_shipping_taxes_in_usd' => 'float',
        'total_warranty_cost_in_usd' => 'float',
        'total_return_cost_in_usd' => 'float',
        'total_refund_cost_in_usd' => 'float',
        'total_surcharges_in_usd' => 'float',
        'total_amount_in_usd' => 'float',
        'total_global_discounts_in_usd' => 'float',
        'total_global_surcharges_in_usd' => 'float',
        'custom_global_surcharges_amount' => 'float',
        'custom_global_discounts_amount' => 'float',
        'custom_base_amount' => 'float',
        'custom_detail_amount' => 'float',
        'custom_discounts_amount' => 'float',
        'custom_tax_base' => 'float',
        'custom_surcharges_amount' => 'float',
        'custom_profit_amount' => 'float',
        'custom_shipping_cost_amount' => 'float',
        'custom_shipping_tax_amount' => 'float',
        'custom_tax_amount' => 'float',
        'custom_withholding_tax_amount' => 'float',
        'custom_total_amount' => 'float',
        'return_policy_id' => 'string',
        'refund_policy_id' => 'string',
        'warranty_policy_id' => 'string',
        'shipment_policy_id' => 'string',
        'shipping_location_id' => 'string',
        'location_id' => 'string',
        'quote_item_record_id' => 'string',
        'business_profile_record_id' => 'string',
        'parent_billing_item_record_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'closed' => null,
        'item_id' => null,
        'item_title' => null,
        'item_short_description' => null,
        'item_primary_image_url' => null,
        'shipping_policy_id' => null,
        'tenant_id' => null,
        'enrollment_id' => null,
        'currency_id' => null,
        'description' => null,
        'quantity' => 'double',
        'free' => null,
        'free_reason' => null,
        'free_reason_code' => null,
        'data' => null,
        'data_label' => null,
        'data1' => null,
        'data1_label' => null,
        'data2' => null,
        'data2_label' => null,
        'data3' => null,
        'data3_label' => null,
        'data4' => null,
        'data4_label' => null,
        'data5' => null,
        'data5_label' => null,
        'data6' => null,
        'data6_label' => null,
        'data7' => null,
        'data7_label' => null,
        'data8' => null,
        'data8_label' => null,
        'data9' => null,
        'data9_label' => null,
        'item_price_id' => null,
        'price_list_item_id' => null,
        'unit_id' => null,
        'unit_group_id' => null,
        'tax_calculation_method' => 'int32',
        'cost_calculation_method' => 'int32',
        'forex_rates_snapshot' => null,
        'forex_rate' => 'double',
        'total_base_amount_in_usd' => 'double',
        'total_profit_in_usd' => 'double',
        'total_detail_amount_in_usd' => 'double',
        'total_tax_base_in_usd' => 'double',
        'total_discounts_in_usd' => 'double',
        'total_taxes_in_usd' => 'double',
        'total_withholding_taxes_in_usd' => 'double',
        'total_shipping_cost_in_usd' => 'double',
        'total_shipping_taxes_in_usd' => 'double',
        'total_warranty_cost_in_usd' => 'double',
        'total_return_cost_in_usd' => 'double',
        'total_refund_cost_in_usd' => 'double',
        'total_surcharges_in_usd' => 'double',
        'total_amount_in_usd' => 'double',
        'total_global_discounts_in_usd' => 'double',
        'total_global_surcharges_in_usd' => 'double',
        'custom_global_surcharges_amount' => 'double',
        'custom_global_discounts_amount' => 'double',
        'custom_base_amount' => 'double',
        'custom_detail_amount' => 'double',
        'custom_discounts_amount' => 'double',
        'custom_tax_base' => 'double',
        'custom_surcharges_amount' => 'double',
        'custom_profit_amount' => 'double',
        'custom_shipping_cost_amount' => 'double',
        'custom_shipping_tax_amount' => 'double',
        'custom_tax_amount' => 'double',
        'custom_withholding_tax_amount' => 'double',
        'custom_total_amount' => 'double',
        'return_policy_id' => null,
        'refund_policy_id' => null,
        'warranty_policy_id' => null,
        'shipment_policy_id' => null,
        'shipping_location_id' => null,
        'location_id' => null,
        'quote_item_record_id' => null,
        'business_profile_record_id' => null,
        'parent_billing_item_record_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'closed' => false,
        'item_id' => true,
        'item_title' => true,
        'item_short_description' => true,
        'item_primary_image_url' => true,
        'shipping_policy_id' => true,
        'tenant_id' => true,
        'enrollment_id' => true,
        'currency_id' => true,
        'description' => true,
        'quantity' => false,
        'free' => false,
        'free_reason' => true,
        'free_reason_code' => true,
        'data' => true,
        'data_label' => true,
        'data1' => true,
        'data1_label' => true,
        'data2' => true,
        'data2_label' => true,
        'data3' => true,
        'data3_label' => true,
        'data4' => true,
        'data4_label' => true,
        'data5' => true,
        'data5_label' => true,
        'data6' => true,
        'data6_label' => true,
        'data7' => true,
        'data7_label' => true,
        'data8' => true,
        'data8_label' => true,
        'data9' => true,
        'data9_label' => true,
        'item_price_id' => true,
        'price_list_item_id' => true,
        'unit_id' => true,
        'unit_group_id' => true,
        'tax_calculation_method' => false,
        'cost_calculation_method' => false,
        'forex_rates_snapshot' => true,
        'forex_rate' => false,
        'total_base_amount_in_usd' => false,
        'total_profit_in_usd' => false,
        'total_detail_amount_in_usd' => false,
        'total_tax_base_in_usd' => false,
        'total_discounts_in_usd' => false,
        'total_taxes_in_usd' => false,
        'total_withholding_taxes_in_usd' => false,
        'total_shipping_cost_in_usd' => false,
        'total_shipping_taxes_in_usd' => false,
        'total_warranty_cost_in_usd' => false,
        'total_return_cost_in_usd' => false,
        'total_refund_cost_in_usd' => false,
        'total_surcharges_in_usd' => false,
        'total_amount_in_usd' => false,
        'total_global_discounts_in_usd' => false,
        'total_global_surcharges_in_usd' => false,
        'custom_global_surcharges_amount' => false,
        'custom_global_discounts_amount' => false,
        'custom_base_amount' => false,
        'custom_detail_amount' => false,
        'custom_discounts_amount' => false,
        'custom_tax_base' => false,
        'custom_surcharges_amount' => false,
        'custom_profit_amount' => false,
        'custom_shipping_cost_amount' => false,
        'custom_shipping_tax_amount' => false,
        'custom_tax_amount' => false,
        'custom_withholding_tax_amount' => false,
        'custom_total_amount' => false,
        'return_policy_id' => true,
        'refund_policy_id' => true,
        'warranty_policy_id' => true,
        'shipment_policy_id' => true,
        'shipping_location_id' => true,
        'location_id' => true,
        'quote_item_record_id' => true,
        'business_profile_record_id' => true,
        'parent_billing_item_record_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'closed' => 'closed',
        'item_id' => 'itemId',
        'item_title' => 'itemTitle',
        'item_short_description' => 'itemShortDescription',
        'item_primary_image_url' => 'itemPrimaryImageUrl',
        'shipping_policy_id' => 'shippingPolicyId',
        'tenant_id' => 'tenantId',
        'enrollment_id' => 'enrollmentId',
        'currency_id' => 'currencyId',
        'description' => 'description',
        'quantity' => 'quantity',
        'free' => 'free',
        'free_reason' => 'freeReason',
        'free_reason_code' => 'freeReasonCode',
        'data' => 'data',
        'data_label' => 'dataLabel',
        'data1' => 'data1',
        'data1_label' => 'data1Label',
        'data2' => 'data2',
        'data2_label' => 'data2Label',
        'data3' => 'data3',
        'data3_label' => 'data3Label',
        'data4' => 'data4',
        'data4_label' => 'data4Label',
        'data5' => 'data5',
        'data5_label' => 'data5Label',
        'data6' => 'data6',
        'data6_label' => 'data6Label',
        'data7' => 'data7',
        'data7_label' => 'data7Label',
        'data8' => 'data8',
        'data8_label' => 'data8Label',
        'data9' => 'data9',
        'data9_label' => 'data9Label',
        'item_price_id' => 'itemPriceId',
        'price_list_item_id' => 'priceListItemId',
        'unit_id' => 'unitId',
        'unit_group_id' => 'unitGroupId',
        'tax_calculation_method' => 'taxCalculationMethod',
        'cost_calculation_method' => 'costCalculationMethod',
        'forex_rates_snapshot' => 'forexRatesSnapshot',
        'forex_rate' => 'forexRate',
        'total_base_amount_in_usd' => 'totalBaseAmountInUsd',
        'total_profit_in_usd' => 'totalProfitInUsd',
        'total_detail_amount_in_usd' => 'totalDetailAmountInUsd',
        'total_tax_base_in_usd' => 'totalTaxBaseInUsd',
        'total_discounts_in_usd' => 'totalDiscountsInUsd',
        'total_taxes_in_usd' => 'totalTaxesInUsd',
        'total_withholding_taxes_in_usd' => 'totalWithholdingTaxesInUsd',
        'total_shipping_cost_in_usd' => 'totalShippingCostInUsd',
        'total_shipping_taxes_in_usd' => 'totalShippingTaxesInUsd',
        'total_warranty_cost_in_usd' => 'totalWarrantyCostInUsd',
        'total_return_cost_in_usd' => 'totalReturnCostInUsd',
        'total_refund_cost_in_usd' => 'totalRefundCostInUsd',
        'total_surcharges_in_usd' => 'totalSurchargesInUsd',
        'total_amount_in_usd' => 'totalAmountInUsd',
        'total_global_discounts_in_usd' => 'totalGlobalDiscountsInUsd',
        'total_global_surcharges_in_usd' => 'totalGlobalSurchargesInUsd',
        'custom_global_surcharges_amount' => 'customGlobalSurchargesAmount',
        'custom_global_discounts_amount' => 'customGlobalDiscountsAmount',
        'custom_base_amount' => 'customBaseAmount',
        'custom_detail_amount' => 'customDetailAmount',
        'custom_discounts_amount' => 'customDiscountsAmount',
        'custom_tax_base' => 'customTaxBase',
        'custom_surcharges_amount' => 'customSurchargesAmount',
        'custom_profit_amount' => 'customProfitAmount',
        'custom_shipping_cost_amount' => 'customShippingCostAmount',
        'custom_shipping_tax_amount' => 'customShippingTaxAmount',
        'custom_tax_amount' => 'customTaxAmount',
        'custom_withholding_tax_amount' => 'customWithholdingTaxAmount',
        'custom_total_amount' => 'customTotalAmount',
        'return_policy_id' => 'returnPolicyId',
        'refund_policy_id' => 'refundPolicyId',
        'warranty_policy_id' => 'warrantyPolicyId',
        'shipment_policy_id' => 'shipmentPolicyId',
        'shipping_location_id' => 'shippingLocationId',
        'location_id' => 'locationId',
        'quote_item_record_id' => 'quoteItemRecordId',
        'business_profile_record_id' => 'businessProfileRecordId',
        'parent_billing_item_record_id' => 'parentBillingItemRecordId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'closed' => 'setClosed',
        'item_id' => 'setItemId',
        'item_title' => 'setItemTitle',
        'item_short_description' => 'setItemShortDescription',
        'item_primary_image_url' => 'setItemPrimaryImageUrl',
        'shipping_policy_id' => 'setShippingPolicyId',
        'tenant_id' => 'setTenantId',
        'enrollment_id' => 'setEnrollmentId',
        'currency_id' => 'setCurrencyId',
        'description' => 'setDescription',
        'quantity' => 'setQuantity',
        'free' => 'setFree',
        'free_reason' => 'setFreeReason',
        'free_reason_code' => 'setFreeReasonCode',
        'data' => 'setData',
        'data_label' => 'setDataLabel',
        'data1' => 'setData1',
        'data1_label' => 'setData1Label',
        'data2' => 'setData2',
        'data2_label' => 'setData2Label',
        'data3' => 'setData3',
        'data3_label' => 'setData3Label',
        'data4' => 'setData4',
        'data4_label' => 'setData4Label',
        'data5' => 'setData5',
        'data5_label' => 'setData5Label',
        'data6' => 'setData6',
        'data6_label' => 'setData6Label',
        'data7' => 'setData7',
        'data7_label' => 'setData7Label',
        'data8' => 'setData8',
        'data8_label' => 'setData8Label',
        'data9' => 'setData9',
        'data9_label' => 'setData9Label',
        'item_price_id' => 'setItemPriceId',
        'price_list_item_id' => 'setPriceListItemId',
        'unit_id' => 'setUnitId',
        'unit_group_id' => 'setUnitGroupId',
        'tax_calculation_method' => 'setTaxCalculationMethod',
        'cost_calculation_method' => 'setCostCalculationMethod',
        'forex_rates_snapshot' => 'setForexRatesSnapshot',
        'forex_rate' => 'setForexRate',
        'total_base_amount_in_usd' => 'setTotalBaseAmountInUsd',
        'total_profit_in_usd' => 'setTotalProfitInUsd',
        'total_detail_amount_in_usd' => 'setTotalDetailAmountInUsd',
        'total_tax_base_in_usd' => 'setTotalTaxBaseInUsd',
        'total_discounts_in_usd' => 'setTotalDiscountsInUsd',
        'total_taxes_in_usd' => 'setTotalTaxesInUsd',
        'total_withholding_taxes_in_usd' => 'setTotalWithholdingTaxesInUsd',
        'total_shipping_cost_in_usd' => 'setTotalShippingCostInUsd',
        'total_shipping_taxes_in_usd' => 'setTotalShippingTaxesInUsd',
        'total_warranty_cost_in_usd' => 'setTotalWarrantyCostInUsd',
        'total_return_cost_in_usd' => 'setTotalReturnCostInUsd',
        'total_refund_cost_in_usd' => 'setTotalRefundCostInUsd',
        'total_surcharges_in_usd' => 'setTotalSurchargesInUsd',
        'total_amount_in_usd' => 'setTotalAmountInUsd',
        'total_global_discounts_in_usd' => 'setTotalGlobalDiscountsInUsd',
        'total_global_surcharges_in_usd' => 'setTotalGlobalSurchargesInUsd',
        'custom_global_surcharges_amount' => 'setCustomGlobalSurchargesAmount',
        'custom_global_discounts_amount' => 'setCustomGlobalDiscountsAmount',
        'custom_base_amount' => 'setCustomBaseAmount',
        'custom_detail_amount' => 'setCustomDetailAmount',
        'custom_discounts_amount' => 'setCustomDiscountsAmount',
        'custom_tax_base' => 'setCustomTaxBase',
        'custom_surcharges_amount' => 'setCustomSurchargesAmount',
        'custom_profit_amount' => 'setCustomProfitAmount',
        'custom_shipping_cost_amount' => 'setCustomShippingCostAmount',
        'custom_shipping_tax_amount' => 'setCustomShippingTaxAmount',
        'custom_tax_amount' => 'setCustomTaxAmount',
        'custom_withholding_tax_amount' => 'setCustomWithholdingTaxAmount',
        'custom_total_amount' => 'setCustomTotalAmount',
        'return_policy_id' => 'setReturnPolicyId',
        'refund_policy_id' => 'setRefundPolicyId',
        'warranty_policy_id' => 'setWarrantyPolicyId',
        'shipment_policy_id' => 'setShipmentPolicyId',
        'shipping_location_id' => 'setShippingLocationId',
        'location_id' => 'setLocationId',
        'quote_item_record_id' => 'setQuoteItemRecordId',
        'business_profile_record_id' => 'setBusinessProfileRecordId',
        'parent_billing_item_record_id' => 'setParentBillingItemRecordId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'closed' => 'getClosed',
        'item_id' => 'getItemId',
        'item_title' => 'getItemTitle',
        'item_short_description' => 'getItemShortDescription',
        'item_primary_image_url' => 'getItemPrimaryImageUrl',
        'shipping_policy_id' => 'getShippingPolicyId',
        'tenant_id' => 'getTenantId',
        'enrollment_id' => 'getEnrollmentId',
        'currency_id' => 'getCurrencyId',
        'description' => 'getDescription',
        'quantity' => 'getQuantity',
        'free' => 'getFree',
        'free_reason' => 'getFreeReason',
        'free_reason_code' => 'getFreeReasonCode',
        'data' => 'getData',
        'data_label' => 'getDataLabel',
        'data1' => 'getData1',
        'data1_label' => 'getData1Label',
        'data2' => 'getData2',
        'data2_label' => 'getData2Label',
        'data3' => 'getData3',
        'data3_label' => 'getData3Label',
        'data4' => 'getData4',
        'data4_label' => 'getData4Label',
        'data5' => 'getData5',
        'data5_label' => 'getData5Label',
        'data6' => 'getData6',
        'data6_label' => 'getData6Label',
        'data7' => 'getData7',
        'data7_label' => 'getData7Label',
        'data8' => 'getData8',
        'data8_label' => 'getData8Label',
        'data9' => 'getData9',
        'data9_label' => 'getData9Label',
        'item_price_id' => 'getItemPriceId',
        'price_list_item_id' => 'getPriceListItemId',
        'unit_id' => 'getUnitId',
        'unit_group_id' => 'getUnitGroupId',
        'tax_calculation_method' => 'getTaxCalculationMethod',
        'cost_calculation_method' => 'getCostCalculationMethod',
        'forex_rates_snapshot' => 'getForexRatesSnapshot',
        'forex_rate' => 'getForexRate',
        'total_base_amount_in_usd' => 'getTotalBaseAmountInUsd',
        'total_profit_in_usd' => 'getTotalProfitInUsd',
        'total_detail_amount_in_usd' => 'getTotalDetailAmountInUsd',
        'total_tax_base_in_usd' => 'getTotalTaxBaseInUsd',
        'total_discounts_in_usd' => 'getTotalDiscountsInUsd',
        'total_taxes_in_usd' => 'getTotalTaxesInUsd',
        'total_withholding_taxes_in_usd' => 'getTotalWithholdingTaxesInUsd',
        'total_shipping_cost_in_usd' => 'getTotalShippingCostInUsd',
        'total_shipping_taxes_in_usd' => 'getTotalShippingTaxesInUsd',
        'total_warranty_cost_in_usd' => 'getTotalWarrantyCostInUsd',
        'total_return_cost_in_usd' => 'getTotalReturnCostInUsd',
        'total_refund_cost_in_usd' => 'getTotalRefundCostInUsd',
        'total_surcharges_in_usd' => 'getTotalSurchargesInUsd',
        'total_amount_in_usd' => 'getTotalAmountInUsd',
        'total_global_discounts_in_usd' => 'getTotalGlobalDiscountsInUsd',
        'total_global_surcharges_in_usd' => 'getTotalGlobalSurchargesInUsd',
        'custom_global_surcharges_amount' => 'getCustomGlobalSurchargesAmount',
        'custom_global_discounts_amount' => 'getCustomGlobalDiscountsAmount',
        'custom_base_amount' => 'getCustomBaseAmount',
        'custom_detail_amount' => 'getCustomDetailAmount',
        'custom_discounts_amount' => 'getCustomDiscountsAmount',
        'custom_tax_base' => 'getCustomTaxBase',
        'custom_surcharges_amount' => 'getCustomSurchargesAmount',
        'custom_profit_amount' => 'getCustomProfitAmount',
        'custom_shipping_cost_amount' => 'getCustomShippingCostAmount',
        'custom_shipping_tax_amount' => 'getCustomShippingTaxAmount',
        'custom_tax_amount' => 'getCustomTaxAmount',
        'custom_withholding_tax_amount' => 'getCustomWithholdingTaxAmount',
        'custom_total_amount' => 'getCustomTotalAmount',
        'return_policy_id' => 'getReturnPolicyId',
        'refund_policy_id' => 'getRefundPolicyId',
        'warranty_policy_id' => 'getWarrantyPolicyId',
        'shipment_policy_id' => 'getShipmentPolicyId',
        'shipping_location_id' => 'getShippingLocationId',
        'location_id' => 'getLocationId',
        'quote_item_record_id' => 'getQuoteItemRecordId',
        'business_profile_record_id' => 'getBusinessProfileRecordId',
        'parent_billing_item_record_id' => 'getParentBillingItemRecordId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TAX_CALCULATION_METHOD_NUMBER_0 = 0;
    public const TAX_CALCULATION_METHOD_NUMBER_1 = 1;
    public const COST_CALCULATION_METHOD_NUMBER_0 = 0;
    public const COST_CALCULATION_METHOD_NUMBER_1 = 1;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxCalculationMethodAllowableValues()
    {
        return [
            self::TAX_CALCULATION_METHOD_NUMBER_0,
            self::TAX_CALCULATION_METHOD_NUMBER_1,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCostCalculationMethodAllowableValues()
    {
        return [
            self::COST_CALCULATION_METHOD_NUMBER_0,
            self::COST_CALCULATION_METHOD_NUMBER_1,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('closed', $data ?? [], null);
        $this->setIfExists('item_id', $data ?? [], null);
        $this->setIfExists('item_title', $data ?? [], null);
        $this->setIfExists('item_short_description', $data ?? [], null);
        $this->setIfExists('item_primary_image_url', $data ?? [], null);
        $this->setIfExists('shipping_policy_id', $data ?? [], null);
        $this->setIfExists('tenant_id', $data ?? [], null);
        $this->setIfExists('enrollment_id', $data ?? [], null);
        $this->setIfExists('currency_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('free', $data ?? [], null);
        $this->setIfExists('free_reason', $data ?? [], null);
        $this->setIfExists('free_reason_code', $data ?? [], null);
        $this->setIfExists('data', $data ?? [], null);
        $this->setIfExists('data_label', $data ?? [], null);
        $this->setIfExists('data1', $data ?? [], null);
        $this->setIfExists('data1_label', $data ?? [], null);
        $this->setIfExists('data2', $data ?? [], null);
        $this->setIfExists('data2_label', $data ?? [], null);
        $this->setIfExists('data3', $data ?? [], null);
        $this->setIfExists('data3_label', $data ?? [], null);
        $this->setIfExists('data4', $data ?? [], null);
        $this->setIfExists('data4_label', $data ?? [], null);
        $this->setIfExists('data5', $data ?? [], null);
        $this->setIfExists('data5_label', $data ?? [], null);
        $this->setIfExists('data6', $data ?? [], null);
        $this->setIfExists('data6_label', $data ?? [], null);
        $this->setIfExists('data7', $data ?? [], null);
        $this->setIfExists('data7_label', $data ?? [], null);
        $this->setIfExists('data8', $data ?? [], null);
        $this->setIfExists('data8_label', $data ?? [], null);
        $this->setIfExists('data9', $data ?? [], null);
        $this->setIfExists('data9_label', $data ?? [], null);
        $this->setIfExists('item_price_id', $data ?? [], null);
        $this->setIfExists('price_list_item_id', $data ?? [], null);
        $this->setIfExists('unit_id', $data ?? [], null);
        $this->setIfExists('unit_group_id', $data ?? [], null);
        $this->setIfExists('tax_calculation_method', $data ?? [], null);
        $this->setIfExists('cost_calculation_method', $data ?? [], null);
        $this->setIfExists('forex_rates_snapshot', $data ?? [], null);
        $this->setIfExists('forex_rate', $data ?? [], null);
        $this->setIfExists('total_base_amount_in_usd', $data ?? [], null);
        $this->setIfExists('total_profit_in_usd', $data ?? [], null);
        $this->setIfExists('total_detail_amount_in_usd', $data ?? [], null);
        $this->setIfExists('total_tax_base_in_usd', $data ?? [], null);
        $this->setIfExists('total_discounts_in_usd', $data ?? [], null);
        $this->setIfExists('total_taxes_in_usd', $data ?? [], null);
        $this->setIfExists('total_withholding_taxes_in_usd', $data ?? [], null);
        $this->setIfExists('total_shipping_cost_in_usd', $data ?? [], null);
        $this->setIfExists('total_shipping_taxes_in_usd', $data ?? [], null);
        $this->setIfExists('total_warranty_cost_in_usd', $data ?? [], null);
        $this->setIfExists('total_return_cost_in_usd', $data ?? [], null);
        $this->setIfExists('total_refund_cost_in_usd', $data ?? [], null);
        $this->setIfExists('total_surcharges_in_usd', $data ?? [], null);
        $this->setIfExists('total_amount_in_usd', $data ?? [], null);
        $this->setIfExists('total_global_discounts_in_usd', $data ?? [], null);
        $this->setIfExists('total_global_surcharges_in_usd', $data ?? [], null);
        $this->setIfExists('custom_global_surcharges_amount', $data ?? [], null);
        $this->setIfExists('custom_global_discounts_amount', $data ?? [], null);
        $this->setIfExists('custom_base_amount', $data ?? [], null);
        $this->setIfExists('custom_detail_amount', $data ?? [], null);
        $this->setIfExists('custom_discounts_amount', $data ?? [], null);
        $this->setIfExists('custom_tax_base', $data ?? [], null);
        $this->setIfExists('custom_surcharges_amount', $data ?? [], null);
        $this->setIfExists('custom_profit_amount', $data ?? [], null);
        $this->setIfExists('custom_shipping_cost_amount', $data ?? [], null);
        $this->setIfExists('custom_shipping_tax_amount', $data ?? [], null);
        $this->setIfExists('custom_tax_amount', $data ?? [], null);
        $this->setIfExists('custom_withholding_tax_amount', $data ?? [], null);
        $this->setIfExists('custom_total_amount', $data ?? [], null);
        $this->setIfExists('return_policy_id', $data ?? [], null);
        $this->setIfExists('refund_policy_id', $data ?? [], null);
        $this->setIfExists('warranty_policy_id', $data ?? [], null);
        $this->setIfExists('shipment_policy_id', $data ?? [], null);
        $this->setIfExists('shipping_location_id', $data ?? [], null);
        $this->setIfExists('location_id', $data ?? [], null);
        $this->setIfExists('quote_item_record_id', $data ?? [], null);
        $this->setIfExists('business_profile_record_id', $data ?? [], null);
        $this->setIfExists('parent_billing_item_record_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTaxCalculationMethodAllowableValues();
        if (!is_null($this->container['tax_calculation_method']) && !in_array($this->container['tax_calculation_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tax_calculation_method', must be one of '%s'",
                $this->container['tax_calculation_method'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCostCalculationMethodAllowableValues();
        if (!is_null($this->container['cost_calculation_method']) && !in_array($this->container['cost_calculation_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cost_calculation_method', must be one of '%s'",
                $this->container['cost_calculation_method'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets closed
     *
     * @return bool|null
     */
    public function getClosed()
    {
        return $this->container['closed'];
    }

    /**
     * Sets closed
     *
     * @param bool|null $closed closed
     *
     * @return self
     */
    public function setClosed($closed)
    {
        if (is_null($closed)) {
            throw new \InvalidArgumentException('non-nullable closed cannot be null');
        }
        $this->container['closed'] = $closed;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return string|null
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param string|null $item_id item_id
     *
     * @return self
     */
    public function setItemId($item_id)
    {
        if (is_null($item_id)) {
            array_push($this->openAPINullablesSetToNull, 'item_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets item_title
     *
     * @return string|null
     */
    public function getItemTitle()
    {
        return $this->container['item_title'];
    }

    /**
     * Sets item_title
     *
     * @param string|null $item_title item_title
     *
     * @return self
     */
    public function setItemTitle($item_title)
    {
        if (is_null($item_title)) {
            array_push($this->openAPINullablesSetToNull, 'item_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['item_title'] = $item_title;

        return $this;
    }

    /**
     * Gets item_short_description
     *
     * @return string|null
     */
    public function getItemShortDescription()
    {
        return $this->container['item_short_description'];
    }

    /**
     * Sets item_short_description
     *
     * @param string|null $item_short_description item_short_description
     *
     * @return self
     */
    public function setItemShortDescription($item_short_description)
    {
        if (is_null($item_short_description)) {
            array_push($this->openAPINullablesSetToNull, 'item_short_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_short_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['item_short_description'] = $item_short_description;

        return $this;
    }

    /**
     * Gets item_primary_image_url
     *
     * @return string|null
     */
    public function getItemPrimaryImageUrl()
    {
        return $this->container['item_primary_image_url'];
    }

    /**
     * Sets item_primary_image_url
     *
     * @param string|null $item_primary_image_url item_primary_image_url
     *
     * @return self
     */
    public function setItemPrimaryImageUrl($item_primary_image_url)
    {
        if (is_null($item_primary_image_url)) {
            array_push($this->openAPINullablesSetToNull, 'item_primary_image_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_primary_image_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['item_primary_image_url'] = $item_primary_image_url;

        return $this;
    }

    /**
     * Gets shipping_policy_id
     *
     * @return string|null
     */
    public function getShippingPolicyId()
    {
        return $this->container['shipping_policy_id'];
    }

    /**
     * Sets shipping_policy_id
     *
     * @param string|null $shipping_policy_id shipping_policy_id
     *
     * @return self
     */
    public function setShippingPolicyId($shipping_policy_id)
    {
        if (is_null($shipping_policy_id)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_policy_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_policy_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipping_policy_id'] = $shipping_policy_id;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string|null
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string|null $tenant_id tenant_id
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        if (is_null($tenant_id)) {
            array_push($this->openAPINullablesSetToNull, 'tenant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tenant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets enrollment_id
     *
     * @return string|null
     */
    public function getEnrollmentId()
    {
        return $this->container['enrollment_id'];
    }

    /**
     * Sets enrollment_id
     *
     * @param string|null $enrollment_id enrollment_id
     *
     * @return self
     */
    public function setEnrollmentId($enrollment_id)
    {
        if (is_null($enrollment_id)) {
            array_push($this->openAPINullablesSetToNull, 'enrollment_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enrollment_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enrollment_id'] = $enrollment_id;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string|null
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string|null $currency_id currency_id
     *
     * @return self
     */
    public function setCurrencyId($currency_id)
    {
        if (is_null($currency_id)) {
            array_push($this->openAPINullablesSetToNull, 'currency_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets free
     *
     * @return bool|null
     */
    public function getFree()
    {
        return $this->container['free'];
    }

    /**
     * Sets free
     *
     * @param bool|null $free free
     *
     * @return self
     */
    public function setFree($free)
    {
        if (is_null($free)) {
            throw new \InvalidArgumentException('non-nullable free cannot be null');
        }
        $this->container['free'] = $free;

        return $this;
    }

    /**
     * Gets free_reason
     *
     * @return string|null
     */
    public function getFreeReason()
    {
        return $this->container['free_reason'];
    }

    /**
     * Sets free_reason
     *
     * @param string|null $free_reason free_reason
     *
     * @return self
     */
    public function setFreeReason($free_reason)
    {
        if (is_null($free_reason)) {
            array_push($this->openAPINullablesSetToNull, 'free_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('free_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['free_reason'] = $free_reason;

        return $this;
    }

    /**
     * Gets free_reason_code
     *
     * @return string|null
     */
    public function getFreeReasonCode()
    {
        return $this->container['free_reason_code'];
    }

    /**
     * Sets free_reason_code
     *
     * @param string|null $free_reason_code free_reason_code
     *
     * @return self
     */
    public function setFreeReasonCode($free_reason_code)
    {
        if (is_null($free_reason_code)) {
            array_push($this->openAPINullablesSetToNull, 'free_reason_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('free_reason_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['free_reason_code'] = $free_reason_code;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data data
     *
     * @return self
     */
    public function setData($data)
    {
        if (is_null($data)) {
            array_push($this->openAPINullablesSetToNull, 'data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets data_label
     *
     * @return string|null
     */
    public function getDataLabel()
    {
        return $this->container['data_label'];
    }

    /**
     * Sets data_label
     *
     * @param string|null $data_label data_label
     *
     * @return self
     */
    public function setDataLabel($data_label)
    {
        if (is_null($data_label)) {
            array_push($this->openAPINullablesSetToNull, 'data_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_label'] = $data_label;

        return $this;
    }

    /**
     * Gets data1
     *
     * @return string|null
     */
    public function getData1()
    {
        return $this->container['data1'];
    }

    /**
     * Sets data1
     *
     * @param string|null $data1 data1
     *
     * @return self
     */
    public function setData1($data1)
    {
        if (is_null($data1)) {
            array_push($this->openAPINullablesSetToNull, 'data1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data1'] = $data1;

        return $this;
    }

    /**
     * Gets data1_label
     *
     * @return string|null
     */
    public function getData1Label()
    {
        return $this->container['data1_label'];
    }

    /**
     * Sets data1_label
     *
     * @param string|null $data1_label data1_label
     *
     * @return self
     */
    public function setData1Label($data1_label)
    {
        if (is_null($data1_label)) {
            array_push($this->openAPINullablesSetToNull, 'data1_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data1_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data1_label'] = $data1_label;

        return $this;
    }

    /**
     * Gets data2
     *
     * @return string|null
     */
    public function getData2()
    {
        return $this->container['data2'];
    }

    /**
     * Sets data2
     *
     * @param string|null $data2 data2
     *
     * @return self
     */
    public function setData2($data2)
    {
        if (is_null($data2)) {
            array_push($this->openAPINullablesSetToNull, 'data2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data2'] = $data2;

        return $this;
    }

    /**
     * Gets data2_label
     *
     * @return string|null
     */
    public function getData2Label()
    {
        return $this->container['data2_label'];
    }

    /**
     * Sets data2_label
     *
     * @param string|null $data2_label data2_label
     *
     * @return self
     */
    public function setData2Label($data2_label)
    {
        if (is_null($data2_label)) {
            array_push($this->openAPINullablesSetToNull, 'data2_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data2_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data2_label'] = $data2_label;

        return $this;
    }

    /**
     * Gets data3
     *
     * @return string|null
     */
    public function getData3()
    {
        return $this->container['data3'];
    }

    /**
     * Sets data3
     *
     * @param string|null $data3 data3
     *
     * @return self
     */
    public function setData3($data3)
    {
        if (is_null($data3)) {
            array_push($this->openAPINullablesSetToNull, 'data3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data3'] = $data3;

        return $this;
    }

    /**
     * Gets data3_label
     *
     * @return string|null
     */
    public function getData3Label()
    {
        return $this->container['data3_label'];
    }

    /**
     * Sets data3_label
     *
     * @param string|null $data3_label data3_label
     *
     * @return self
     */
    public function setData3Label($data3_label)
    {
        if (is_null($data3_label)) {
            array_push($this->openAPINullablesSetToNull, 'data3_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data3_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data3_label'] = $data3_label;

        return $this;
    }

    /**
     * Gets data4
     *
     * @return string|null
     */
    public function getData4()
    {
        return $this->container['data4'];
    }

    /**
     * Sets data4
     *
     * @param string|null $data4 data4
     *
     * @return self
     */
    public function setData4($data4)
    {
        if (is_null($data4)) {
            array_push($this->openAPINullablesSetToNull, 'data4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data4'] = $data4;

        return $this;
    }

    /**
     * Gets data4_label
     *
     * @return string|null
     */
    public function getData4Label()
    {
        return $this->container['data4_label'];
    }

    /**
     * Sets data4_label
     *
     * @param string|null $data4_label data4_label
     *
     * @return self
     */
    public function setData4Label($data4_label)
    {
        if (is_null($data4_label)) {
            array_push($this->openAPINullablesSetToNull, 'data4_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data4_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data4_label'] = $data4_label;

        return $this;
    }

    /**
     * Gets data5
     *
     * @return string|null
     */
    public function getData5()
    {
        return $this->container['data5'];
    }

    /**
     * Sets data5
     *
     * @param string|null $data5 data5
     *
     * @return self
     */
    public function setData5($data5)
    {
        if (is_null($data5)) {
            array_push($this->openAPINullablesSetToNull, 'data5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data5'] = $data5;

        return $this;
    }

    /**
     * Gets data5_label
     *
     * @return string|null
     */
    public function getData5Label()
    {
        return $this->container['data5_label'];
    }

    /**
     * Sets data5_label
     *
     * @param string|null $data5_label data5_label
     *
     * @return self
     */
    public function setData5Label($data5_label)
    {
        if (is_null($data5_label)) {
            array_push($this->openAPINullablesSetToNull, 'data5_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data5_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data5_label'] = $data5_label;

        return $this;
    }

    /**
     * Gets data6
     *
     * @return string|null
     */
    public function getData6()
    {
        return $this->container['data6'];
    }

    /**
     * Sets data6
     *
     * @param string|null $data6 data6
     *
     * @return self
     */
    public function setData6($data6)
    {
        if (is_null($data6)) {
            array_push($this->openAPINullablesSetToNull, 'data6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data6'] = $data6;

        return $this;
    }

    /**
     * Gets data6_label
     *
     * @return string|null
     */
    public function getData6Label()
    {
        return $this->container['data6_label'];
    }

    /**
     * Sets data6_label
     *
     * @param string|null $data6_label data6_label
     *
     * @return self
     */
    public function setData6Label($data6_label)
    {
        if (is_null($data6_label)) {
            array_push($this->openAPINullablesSetToNull, 'data6_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data6_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data6_label'] = $data6_label;

        return $this;
    }

    /**
     * Gets data7
     *
     * @return string|null
     */
    public function getData7()
    {
        return $this->container['data7'];
    }

    /**
     * Sets data7
     *
     * @param string|null $data7 data7
     *
     * @return self
     */
    public function setData7($data7)
    {
        if (is_null($data7)) {
            array_push($this->openAPINullablesSetToNull, 'data7');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data7', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data7'] = $data7;

        return $this;
    }

    /**
     * Gets data7_label
     *
     * @return string|null
     */
    public function getData7Label()
    {
        return $this->container['data7_label'];
    }

    /**
     * Sets data7_label
     *
     * @param string|null $data7_label data7_label
     *
     * @return self
     */
    public function setData7Label($data7_label)
    {
        if (is_null($data7_label)) {
            array_push($this->openAPINullablesSetToNull, 'data7_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data7_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data7_label'] = $data7_label;

        return $this;
    }

    /**
     * Gets data8
     *
     * @return string|null
     */
    public function getData8()
    {
        return $this->container['data8'];
    }

    /**
     * Sets data8
     *
     * @param string|null $data8 data8
     *
     * @return self
     */
    public function setData8($data8)
    {
        if (is_null($data8)) {
            array_push($this->openAPINullablesSetToNull, 'data8');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data8', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data8'] = $data8;

        return $this;
    }

    /**
     * Gets data8_label
     *
     * @return string|null
     */
    public function getData8Label()
    {
        return $this->container['data8_label'];
    }

    /**
     * Sets data8_label
     *
     * @param string|null $data8_label data8_label
     *
     * @return self
     */
    public function setData8Label($data8_label)
    {
        if (is_null($data8_label)) {
            array_push($this->openAPINullablesSetToNull, 'data8_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data8_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data8_label'] = $data8_label;

        return $this;
    }

    /**
     * Gets data9
     *
     * @return string|null
     */
    public function getData9()
    {
        return $this->container['data9'];
    }

    /**
     * Sets data9
     *
     * @param string|null $data9 data9
     *
     * @return self
     */
    public function setData9($data9)
    {
        if (is_null($data9)) {
            array_push($this->openAPINullablesSetToNull, 'data9');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data9', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data9'] = $data9;

        return $this;
    }

    /**
     * Gets data9_label
     *
     * @return string|null
     */
    public function getData9Label()
    {
        return $this->container['data9_label'];
    }

    /**
     * Sets data9_label
     *
     * @param string|null $data9_label data9_label
     *
     * @return self
     */
    public function setData9Label($data9_label)
    {
        if (is_null($data9_label)) {
            array_push($this->openAPINullablesSetToNull, 'data9_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data9_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data9_label'] = $data9_label;

        return $this;
    }

    /**
     * Gets item_price_id
     *
     * @return string|null
     */
    public function getItemPriceId()
    {
        return $this->container['item_price_id'];
    }

    /**
     * Sets item_price_id
     *
     * @param string|null $item_price_id item_price_id
     *
     * @return self
     */
    public function setItemPriceId($item_price_id)
    {
        if (is_null($item_price_id)) {
            array_push($this->openAPINullablesSetToNull, 'item_price_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_price_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['item_price_id'] = $item_price_id;

        return $this;
    }

    /**
     * Gets price_list_item_id
     *
     * @return string|null
     */
    public function getPriceListItemId()
    {
        return $this->container['price_list_item_id'];
    }

    /**
     * Sets price_list_item_id
     *
     * @param string|null $price_list_item_id price_list_item_id
     *
     * @return self
     */
    public function setPriceListItemId($price_list_item_id)
    {
        if (is_null($price_list_item_id)) {
            array_push($this->openAPINullablesSetToNull, 'price_list_item_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price_list_item_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price_list_item_id'] = $price_list_item_id;

        return $this;
    }

    /**
     * Gets unit_id
     *
     * @return string|null
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     *
     * @param string|null $unit_id unit_id
     *
     * @return self
     */
    public function setUnitId($unit_id)
    {
        if (is_null($unit_id)) {
            array_push($this->openAPINullablesSetToNull, 'unit_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unit_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets unit_group_id
     *
     * @return string|null
     */
    public function getUnitGroupId()
    {
        return $this->container['unit_group_id'];
    }

    /**
     * Sets unit_group_id
     *
     * @param string|null $unit_group_id unit_group_id
     *
     * @return self
     */
    public function setUnitGroupId($unit_group_id)
    {
        if (is_null($unit_group_id)) {
            array_push($this->openAPINullablesSetToNull, 'unit_group_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unit_group_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unit_group_id'] = $unit_group_id;

        return $this;
    }

    /**
     * Gets tax_calculation_method
     *
     * @return int|null
     */
    public function getTaxCalculationMethod()
    {
        return $this->container['tax_calculation_method'];
    }

    /**
     * Sets tax_calculation_method
     *
     * @param int|null $tax_calculation_method tax_calculation_method
     *
     * @return self
     */
    public function setTaxCalculationMethod($tax_calculation_method)
    {
        if (is_null($tax_calculation_method)) {
            throw new \InvalidArgumentException('non-nullable tax_calculation_method cannot be null');
        }
        $allowedValues = $this->getTaxCalculationMethodAllowableValues();
        if (!in_array($tax_calculation_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tax_calculation_method', must be one of '%s'",
                    $tax_calculation_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_calculation_method'] = $tax_calculation_method;

        return $this;
    }

    /**
     * Gets cost_calculation_method
     *
     * @return int|null
     */
    public function getCostCalculationMethod()
    {
        return $this->container['cost_calculation_method'];
    }

    /**
     * Sets cost_calculation_method
     *
     * @param int|null $cost_calculation_method cost_calculation_method
     *
     * @return self
     */
    public function setCostCalculationMethod($cost_calculation_method)
    {
        if (is_null($cost_calculation_method)) {
            throw new \InvalidArgumentException('non-nullable cost_calculation_method cannot be null');
        }
        $allowedValues = $this->getCostCalculationMethodAllowableValues();
        if (!in_array($cost_calculation_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cost_calculation_method', must be one of '%s'",
                    $cost_calculation_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cost_calculation_method'] = $cost_calculation_method;

        return $this;
    }

    /**
     * Gets forex_rates_snapshot
     *
     * @return string|null
     */
    public function getForexRatesSnapshot()
    {
        return $this->container['forex_rates_snapshot'];
    }

    /**
     * Sets forex_rates_snapshot
     *
     * @param string|null $forex_rates_snapshot forex_rates_snapshot
     *
     * @return self
     */
    public function setForexRatesSnapshot($forex_rates_snapshot)
    {
        if (is_null($forex_rates_snapshot)) {
            array_push($this->openAPINullablesSetToNull, 'forex_rates_snapshot');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('forex_rates_snapshot', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['forex_rates_snapshot'] = $forex_rates_snapshot;

        return $this;
    }

    /**
     * Gets forex_rate
     *
     * @return float|null
     */
    public function getForexRate()
    {
        return $this->container['forex_rate'];
    }

    /**
     * Sets forex_rate
     *
     * @param float|null $forex_rate forex_rate
     *
     * @return self
     */
    public function setForexRate($forex_rate)
    {
        if (is_null($forex_rate)) {
            throw new \InvalidArgumentException('non-nullable forex_rate cannot be null');
        }
        $this->container['forex_rate'] = $forex_rate;

        return $this;
    }

    /**
     * Gets total_base_amount_in_usd
     *
     * @return float|null
     */
    public function getTotalBaseAmountInUsd()
    {
        return $this->container['total_base_amount_in_usd'];
    }

    /**
     * Sets total_base_amount_in_usd
     *
     * @param float|null $total_base_amount_in_usd total_base_amount_in_usd
     *
     * @return self
     */
    public function setTotalBaseAmountInUsd($total_base_amount_in_usd)
    {
        if (is_null($total_base_amount_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_base_amount_in_usd cannot be null');
        }
        $this->container['total_base_amount_in_usd'] = $total_base_amount_in_usd;

        return $this;
    }

    /**
     * Gets total_profit_in_usd
     *
     * @return float|null
     */
    public function getTotalProfitInUsd()
    {
        return $this->container['total_profit_in_usd'];
    }

    /**
     * Sets total_profit_in_usd
     *
     * @param float|null $total_profit_in_usd total_profit_in_usd
     *
     * @return self
     */
    public function setTotalProfitInUsd($total_profit_in_usd)
    {
        if (is_null($total_profit_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_profit_in_usd cannot be null');
        }
        $this->container['total_profit_in_usd'] = $total_profit_in_usd;

        return $this;
    }

    /**
     * Gets total_detail_amount_in_usd
     *
     * @return float|null
     */
    public function getTotalDetailAmountInUsd()
    {
        return $this->container['total_detail_amount_in_usd'];
    }

    /**
     * Sets total_detail_amount_in_usd
     *
     * @param float|null $total_detail_amount_in_usd total_detail_amount_in_usd
     *
     * @return self
     */
    public function setTotalDetailAmountInUsd($total_detail_amount_in_usd)
    {
        if (is_null($total_detail_amount_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_detail_amount_in_usd cannot be null');
        }
        $this->container['total_detail_amount_in_usd'] = $total_detail_amount_in_usd;

        return $this;
    }

    /**
     * Gets total_tax_base_in_usd
     *
     * @return float|null
     */
    public function getTotalTaxBaseInUsd()
    {
        return $this->container['total_tax_base_in_usd'];
    }

    /**
     * Sets total_tax_base_in_usd
     *
     * @param float|null $total_tax_base_in_usd total_tax_base_in_usd
     *
     * @return self
     */
    public function setTotalTaxBaseInUsd($total_tax_base_in_usd)
    {
        if (is_null($total_tax_base_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_tax_base_in_usd cannot be null');
        }
        $this->container['total_tax_base_in_usd'] = $total_tax_base_in_usd;

        return $this;
    }

    /**
     * Gets total_discounts_in_usd
     *
     * @return float|null
     */
    public function getTotalDiscountsInUsd()
    {
        return $this->container['total_discounts_in_usd'];
    }

    /**
     * Sets total_discounts_in_usd
     *
     * @param float|null $total_discounts_in_usd total_discounts_in_usd
     *
     * @return self
     */
    public function setTotalDiscountsInUsd($total_discounts_in_usd)
    {
        if (is_null($total_discounts_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_discounts_in_usd cannot be null');
        }
        $this->container['total_discounts_in_usd'] = $total_discounts_in_usd;

        return $this;
    }

    /**
     * Gets total_taxes_in_usd
     *
     * @return float|null
     */
    public function getTotalTaxesInUsd()
    {
        return $this->container['total_taxes_in_usd'];
    }

    /**
     * Sets total_taxes_in_usd
     *
     * @param float|null $total_taxes_in_usd total_taxes_in_usd
     *
     * @return self
     */
    public function setTotalTaxesInUsd($total_taxes_in_usd)
    {
        if (is_null($total_taxes_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_taxes_in_usd cannot be null');
        }
        $this->container['total_taxes_in_usd'] = $total_taxes_in_usd;

        return $this;
    }

    /**
     * Gets total_withholding_taxes_in_usd
     *
     * @return float|null
     */
    public function getTotalWithholdingTaxesInUsd()
    {
        return $this->container['total_withholding_taxes_in_usd'];
    }

    /**
     * Sets total_withholding_taxes_in_usd
     *
     * @param float|null $total_withholding_taxes_in_usd total_withholding_taxes_in_usd
     *
     * @return self
     */
    public function setTotalWithholdingTaxesInUsd($total_withholding_taxes_in_usd)
    {
        if (is_null($total_withholding_taxes_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_withholding_taxes_in_usd cannot be null');
        }
        $this->container['total_withholding_taxes_in_usd'] = $total_withholding_taxes_in_usd;

        return $this;
    }

    /**
     * Gets total_shipping_cost_in_usd
     *
     * @return float|null
     */
    public function getTotalShippingCostInUsd()
    {
        return $this->container['total_shipping_cost_in_usd'];
    }

    /**
     * Sets total_shipping_cost_in_usd
     *
     * @param float|null $total_shipping_cost_in_usd total_shipping_cost_in_usd
     *
     * @return self
     */
    public function setTotalShippingCostInUsd($total_shipping_cost_in_usd)
    {
        if (is_null($total_shipping_cost_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_shipping_cost_in_usd cannot be null');
        }
        $this->container['total_shipping_cost_in_usd'] = $total_shipping_cost_in_usd;

        return $this;
    }

    /**
     * Gets total_shipping_taxes_in_usd
     *
     * @return float|null
     */
    public function getTotalShippingTaxesInUsd()
    {
        return $this->container['total_shipping_taxes_in_usd'];
    }

    /**
     * Sets total_shipping_taxes_in_usd
     *
     * @param float|null $total_shipping_taxes_in_usd total_shipping_taxes_in_usd
     *
     * @return self
     */
    public function setTotalShippingTaxesInUsd($total_shipping_taxes_in_usd)
    {
        if (is_null($total_shipping_taxes_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_shipping_taxes_in_usd cannot be null');
        }
        $this->container['total_shipping_taxes_in_usd'] = $total_shipping_taxes_in_usd;

        return $this;
    }

    /**
     * Gets total_warranty_cost_in_usd
     *
     * @return float|null
     */
    public function getTotalWarrantyCostInUsd()
    {
        return $this->container['total_warranty_cost_in_usd'];
    }

    /**
     * Sets total_warranty_cost_in_usd
     *
     * @param float|null $total_warranty_cost_in_usd total_warranty_cost_in_usd
     *
     * @return self
     */
    public function setTotalWarrantyCostInUsd($total_warranty_cost_in_usd)
    {
        if (is_null($total_warranty_cost_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_warranty_cost_in_usd cannot be null');
        }
        $this->container['total_warranty_cost_in_usd'] = $total_warranty_cost_in_usd;

        return $this;
    }

    /**
     * Gets total_return_cost_in_usd
     *
     * @return float|null
     */
    public function getTotalReturnCostInUsd()
    {
        return $this->container['total_return_cost_in_usd'];
    }

    /**
     * Sets total_return_cost_in_usd
     *
     * @param float|null $total_return_cost_in_usd total_return_cost_in_usd
     *
     * @return self
     */
    public function setTotalReturnCostInUsd($total_return_cost_in_usd)
    {
        if (is_null($total_return_cost_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_return_cost_in_usd cannot be null');
        }
        $this->container['total_return_cost_in_usd'] = $total_return_cost_in_usd;

        return $this;
    }

    /**
     * Gets total_refund_cost_in_usd
     *
     * @return float|null
     */
    public function getTotalRefundCostInUsd()
    {
        return $this->container['total_refund_cost_in_usd'];
    }

    /**
     * Sets total_refund_cost_in_usd
     *
     * @param float|null $total_refund_cost_in_usd total_refund_cost_in_usd
     *
     * @return self
     */
    public function setTotalRefundCostInUsd($total_refund_cost_in_usd)
    {
        if (is_null($total_refund_cost_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_refund_cost_in_usd cannot be null');
        }
        $this->container['total_refund_cost_in_usd'] = $total_refund_cost_in_usd;

        return $this;
    }

    /**
     * Gets total_surcharges_in_usd
     *
     * @return float|null
     */
    public function getTotalSurchargesInUsd()
    {
        return $this->container['total_surcharges_in_usd'];
    }

    /**
     * Sets total_surcharges_in_usd
     *
     * @param float|null $total_surcharges_in_usd total_surcharges_in_usd
     *
     * @return self
     */
    public function setTotalSurchargesInUsd($total_surcharges_in_usd)
    {
        if (is_null($total_surcharges_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_surcharges_in_usd cannot be null');
        }
        $this->container['total_surcharges_in_usd'] = $total_surcharges_in_usd;

        return $this;
    }

    /**
     * Gets total_amount_in_usd
     *
     * @return float|null
     */
    public function getTotalAmountInUsd()
    {
        return $this->container['total_amount_in_usd'];
    }

    /**
     * Sets total_amount_in_usd
     *
     * @param float|null $total_amount_in_usd total_amount_in_usd
     *
     * @return self
     */
    public function setTotalAmountInUsd($total_amount_in_usd)
    {
        if (is_null($total_amount_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_amount_in_usd cannot be null');
        }
        $this->container['total_amount_in_usd'] = $total_amount_in_usd;

        return $this;
    }

    /**
     * Gets total_global_discounts_in_usd
     *
     * @return float|null
     */
    public function getTotalGlobalDiscountsInUsd()
    {
        return $this->container['total_global_discounts_in_usd'];
    }

    /**
     * Sets total_global_discounts_in_usd
     *
     * @param float|null $total_global_discounts_in_usd total_global_discounts_in_usd
     *
     * @return self
     */
    public function setTotalGlobalDiscountsInUsd($total_global_discounts_in_usd)
    {
        if (is_null($total_global_discounts_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_global_discounts_in_usd cannot be null');
        }
        $this->container['total_global_discounts_in_usd'] = $total_global_discounts_in_usd;

        return $this;
    }

    /**
     * Gets total_global_surcharges_in_usd
     *
     * @return float|null
     */
    public function getTotalGlobalSurchargesInUsd()
    {
        return $this->container['total_global_surcharges_in_usd'];
    }

    /**
     * Sets total_global_surcharges_in_usd
     *
     * @param float|null $total_global_surcharges_in_usd total_global_surcharges_in_usd
     *
     * @return self
     */
    public function setTotalGlobalSurchargesInUsd($total_global_surcharges_in_usd)
    {
        if (is_null($total_global_surcharges_in_usd)) {
            throw new \InvalidArgumentException('non-nullable total_global_surcharges_in_usd cannot be null');
        }
        $this->container['total_global_surcharges_in_usd'] = $total_global_surcharges_in_usd;

        return $this;
    }

    /**
     * Gets custom_global_surcharges_amount
     *
     * @return float|null
     */
    public function getCustomGlobalSurchargesAmount()
    {
        return $this->container['custom_global_surcharges_amount'];
    }

    /**
     * Sets custom_global_surcharges_amount
     *
     * @param float|null $custom_global_surcharges_amount custom_global_surcharges_amount
     *
     * @return self
     */
    public function setCustomGlobalSurchargesAmount($custom_global_surcharges_amount)
    {
        if (is_null($custom_global_surcharges_amount)) {
            throw new \InvalidArgumentException('non-nullable custom_global_surcharges_amount cannot be null');
        }
        $this->container['custom_global_surcharges_amount'] = $custom_global_surcharges_amount;

        return $this;
    }

    /**
     * Gets custom_global_discounts_amount
     *
     * @return float|null
     */
    public function getCustomGlobalDiscountsAmount()
    {
        return $this->container['custom_global_discounts_amount'];
    }

    /**
     * Sets custom_global_discounts_amount
     *
     * @param float|null $custom_global_discounts_amount custom_global_discounts_amount
     *
     * @return self
     */
    public function setCustomGlobalDiscountsAmount($custom_global_discounts_amount)
    {
        if (is_null($custom_global_discounts_amount)) {
            throw new \InvalidArgumentException('non-nullable custom_global_discounts_amount cannot be null');
        }
        $this->container['custom_global_discounts_amount'] = $custom_global_discounts_amount;

        return $this;
    }

    /**
     * Gets custom_base_amount
     *
     * @return float|null
     */
    public function getCustomBaseAmount()
    {
        return $this->container['custom_base_amount'];
    }

    /**
     * Sets custom_base_amount
     *
     * @param float|null $custom_base_amount custom_base_amount
     *
     * @return self
     */
    public function setCustomBaseAmount($custom_base_amount)
    {
        if (is_null($custom_base_amount)) {
            throw new \InvalidArgumentException('non-nullable custom_base_amount cannot be null');
        }
        $this->container['custom_base_amount'] = $custom_base_amount;

        return $this;
    }

    /**
     * Gets custom_detail_amount
     *
     * @return float|null
     */
    public function getCustomDetailAmount()
    {
        return $this->container['custom_detail_amount'];
    }

    /**
     * Sets custom_detail_amount
     *
     * @param float|null $custom_detail_amount custom_detail_amount
     *
     * @return self
     */
    public function setCustomDetailAmount($custom_detail_amount)
    {
        if (is_null($custom_detail_amount)) {
            throw new \InvalidArgumentException('non-nullable custom_detail_amount cannot be null');
        }
        $this->container['custom_detail_amount'] = $custom_detail_amount;

        return $this;
    }

    /**
     * Gets custom_discounts_amount
     *
     * @return float|null
     */
    public function getCustomDiscountsAmount()
    {
        return $this->container['custom_discounts_amount'];
    }

    /**
     * Sets custom_discounts_amount
     *
     * @param float|null $custom_discounts_amount custom_discounts_amount
     *
     * @return self
     */
    public function setCustomDiscountsAmount($custom_discounts_amount)
    {
        if (is_null($custom_discounts_amount)) {
            throw new \InvalidArgumentException('non-nullable custom_discounts_amount cannot be null');
        }
        $this->container['custom_discounts_amount'] = $custom_discounts_amount;

        return $this;
    }

    /**
     * Gets custom_tax_base
     *
     * @return float|null
     */
    public function getCustomTaxBase()
    {
        return $this->container['custom_tax_base'];
    }

    /**
     * Sets custom_tax_base
     *
     * @param float|null $custom_tax_base custom_tax_base
     *
     * @return self
     */
    public function setCustomTaxBase($custom_tax_base)
    {
        if (is_null($custom_tax_base)) {
            throw new \InvalidArgumentException('non-nullable custom_tax_base cannot be null');
        }
        $this->container['custom_tax_base'] = $custom_tax_base;

        return $this;
    }

    /**
     * Gets custom_surcharges_amount
     *
     * @return float|null
     */
    public function getCustomSurchargesAmount()
    {
        return $this->container['custom_surcharges_amount'];
    }

    /**
     * Sets custom_surcharges_amount
     *
     * @param float|null $custom_surcharges_amount custom_surcharges_amount
     *
     * @return self
     */
    public function setCustomSurchargesAmount($custom_surcharges_amount)
    {
        if (is_null($custom_surcharges_amount)) {
            throw new \InvalidArgumentException('non-nullable custom_surcharges_amount cannot be null');
        }
        $this->container['custom_surcharges_amount'] = $custom_surcharges_amount;

        return $this;
    }

    /**
     * Gets custom_profit_amount
     *
     * @return float|null
     */
    public function getCustomProfitAmount()
    {
        return $this->container['custom_profit_amount'];
    }

    /**
     * Sets custom_profit_amount
     *
     * @param float|null $custom_profit_amount custom_profit_amount
     *
     * @return self
     */
    public function setCustomProfitAmount($custom_profit_amount)
    {
        if (is_null($custom_profit_amount)) {
            throw new \InvalidArgumentException('non-nullable custom_profit_amount cannot be null');
        }
        $this->container['custom_profit_amount'] = $custom_profit_amount;

        return $this;
    }

    /**
     * Gets custom_shipping_cost_amount
     *
     * @return float|null
     */
    public function getCustomShippingCostAmount()
    {
        return $this->container['custom_shipping_cost_amount'];
    }

    /**
     * Sets custom_shipping_cost_amount
     *
     * @param float|null $custom_shipping_cost_amount custom_shipping_cost_amount
     *
     * @return self
     */
    public function setCustomShippingCostAmount($custom_shipping_cost_amount)
    {
        if (is_null($custom_shipping_cost_amount)) {
            throw new \InvalidArgumentException('non-nullable custom_shipping_cost_amount cannot be null');
        }
        $this->container['custom_shipping_cost_amount'] = $custom_shipping_cost_amount;

        return $this;
    }

    /**
     * Gets custom_shipping_tax_amount
     *
     * @return float|null
     */
    public function getCustomShippingTaxAmount()
    {
        return $this->container['custom_shipping_tax_amount'];
    }

    /**
     * Sets custom_shipping_tax_amount
     *
     * @param float|null $custom_shipping_tax_amount custom_shipping_tax_amount
     *
     * @return self
     */
    public function setCustomShippingTaxAmount($custom_shipping_tax_amount)
    {
        if (is_null($custom_shipping_tax_amount)) {
            throw new \InvalidArgumentException('non-nullable custom_shipping_tax_amount cannot be null');
        }
        $this->container['custom_shipping_tax_amount'] = $custom_shipping_tax_amount;

        return $this;
    }

    /**
     * Gets custom_tax_amount
     *
     * @return float|null
     */
    public function getCustomTaxAmount()
    {
        return $this->container['custom_tax_amount'];
    }

    /**
     * Sets custom_tax_amount
     *
     * @param float|null $custom_tax_amount custom_tax_amount
     *
     * @return self
     */
    public function setCustomTaxAmount($custom_tax_amount)
    {
        if (is_null($custom_tax_amount)) {
            throw new \InvalidArgumentException('non-nullable custom_tax_amount cannot be null');
        }
        $this->container['custom_tax_amount'] = $custom_tax_amount;

        return $this;
    }

    /**
     * Gets custom_withholding_tax_amount
     *
     * @return float|null
     */
    public function getCustomWithholdingTaxAmount()
    {
        return $this->container['custom_withholding_tax_amount'];
    }

    /**
     * Sets custom_withholding_tax_amount
     *
     * @param float|null $custom_withholding_tax_amount custom_withholding_tax_amount
     *
     * @return self
     */
    public function setCustomWithholdingTaxAmount($custom_withholding_tax_amount)
    {
        if (is_null($custom_withholding_tax_amount)) {
            throw new \InvalidArgumentException('non-nullable custom_withholding_tax_amount cannot be null');
        }
        $this->container['custom_withholding_tax_amount'] = $custom_withholding_tax_amount;

        return $this;
    }

    /**
     * Gets custom_total_amount
     *
     * @return float|null
     */
    public function getCustomTotalAmount()
    {
        return $this->container['custom_total_amount'];
    }

    /**
     * Sets custom_total_amount
     *
     * @param float|null $custom_total_amount custom_total_amount
     *
     * @return self
     */
    public function setCustomTotalAmount($custom_total_amount)
    {
        if (is_null($custom_total_amount)) {
            throw new \InvalidArgumentException('non-nullable custom_total_amount cannot be null');
        }
        $this->container['custom_total_amount'] = $custom_total_amount;

        return $this;
    }

    /**
     * Gets return_policy_id
     *
     * @return string|null
     */
    public function getReturnPolicyId()
    {
        return $this->container['return_policy_id'];
    }

    /**
     * Sets return_policy_id
     *
     * @param string|null $return_policy_id return_policy_id
     *
     * @return self
     */
    public function setReturnPolicyId($return_policy_id)
    {
        if (is_null($return_policy_id)) {
            array_push($this->openAPINullablesSetToNull, 'return_policy_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('return_policy_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['return_policy_id'] = $return_policy_id;

        return $this;
    }

    /**
     * Gets refund_policy_id
     *
     * @return string|null
     */
    public function getRefundPolicyId()
    {
        return $this->container['refund_policy_id'];
    }

    /**
     * Sets refund_policy_id
     *
     * @param string|null $refund_policy_id refund_policy_id
     *
     * @return self
     */
    public function setRefundPolicyId($refund_policy_id)
    {
        if (is_null($refund_policy_id)) {
            array_push($this->openAPINullablesSetToNull, 'refund_policy_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('refund_policy_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['refund_policy_id'] = $refund_policy_id;

        return $this;
    }

    /**
     * Gets warranty_policy_id
     *
     * @return string|null
     */
    public function getWarrantyPolicyId()
    {
        return $this->container['warranty_policy_id'];
    }

    /**
     * Sets warranty_policy_id
     *
     * @param string|null $warranty_policy_id warranty_policy_id
     *
     * @return self
     */
    public function setWarrantyPolicyId($warranty_policy_id)
    {
        if (is_null($warranty_policy_id)) {
            array_push($this->openAPINullablesSetToNull, 'warranty_policy_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('warranty_policy_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['warranty_policy_id'] = $warranty_policy_id;

        return $this;
    }

    /**
     * Gets shipment_policy_id
     *
     * @return string|null
     */
    public function getShipmentPolicyId()
    {
        return $this->container['shipment_policy_id'];
    }

    /**
     * Sets shipment_policy_id
     *
     * @param string|null $shipment_policy_id shipment_policy_id
     *
     * @return self
     */
    public function setShipmentPolicyId($shipment_policy_id)
    {
        if (is_null($shipment_policy_id)) {
            array_push($this->openAPINullablesSetToNull, 'shipment_policy_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipment_policy_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipment_policy_id'] = $shipment_policy_id;

        return $this;
    }

    /**
     * Gets shipping_location_id
     *
     * @return string|null
     */
    public function getShippingLocationId()
    {
        return $this->container['shipping_location_id'];
    }

    /**
     * Sets shipping_location_id
     *
     * @param string|null $shipping_location_id shipping_location_id
     *
     * @return self
     */
    public function setShippingLocationId($shipping_location_id)
    {
        if (is_null($shipping_location_id)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_location_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_location_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipping_location_id'] = $shipping_location_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return string|null
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param string|null $location_id location_id
     *
     * @return self
     */
    public function setLocationId($location_id)
    {
        if (is_null($location_id)) {
            array_push($this->openAPINullablesSetToNull, 'location_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets quote_item_record_id
     *
     * @return string|null
     */
    public function getQuoteItemRecordId()
    {
        return $this->container['quote_item_record_id'];
    }

    /**
     * Sets quote_item_record_id
     *
     * @param string|null $quote_item_record_id quote_item_record_id
     *
     * @return self
     */
    public function setQuoteItemRecordId($quote_item_record_id)
    {
        if (is_null($quote_item_record_id)) {
            array_push($this->openAPINullablesSetToNull, 'quote_item_record_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quote_item_record_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['quote_item_record_id'] = $quote_item_record_id;

        return $this;
    }

    /**
     * Gets business_profile_record_id
     *
     * @return string|null
     */
    public function getBusinessProfileRecordId()
    {
        return $this->container['business_profile_record_id'];
    }

    /**
     * Sets business_profile_record_id
     *
     * @param string|null $business_profile_record_id business_profile_record_id
     *
     * @return self
     */
    public function setBusinessProfileRecordId($business_profile_record_id)
    {
        if (is_null($business_profile_record_id)) {
            array_push($this->openAPINullablesSetToNull, 'business_profile_record_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_profile_record_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_profile_record_id'] = $business_profile_record_id;

        return $this;
    }

    /**
     * Gets parent_billing_item_record_id
     *
     * @return string|null
     */
    public function getParentBillingItemRecordId()
    {
        return $this->container['parent_billing_item_record_id'];
    }

    /**
     * Sets parent_billing_item_record_id
     *
     * @param string|null $parent_billing_item_record_id parent_billing_item_record_id
     *
     * @return self
     */
    public function setParentBillingItemRecordId($parent_billing_item_record_id)
    {
        if (is_null($parent_billing_item_record_id)) {
            array_push($this->openAPINullablesSetToNull, 'parent_billing_item_record_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_billing_item_record_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_billing_item_record_id'] = $parent_billing_item_record_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


