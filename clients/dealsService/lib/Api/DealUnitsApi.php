<?php
/**
 * DealUnitsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DealsService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DealUnitsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DealUnitsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV2DealsServiceDealUnitsCountGet' => [
            'application/json',
        ],
        'apiV2DealsServiceDealUnitsDealUnitIdCalculatePut' => [
            'application/json',
        ],
        'apiV2DealsServiceDealUnitsDealUnitIdDelete' => [
            'application/json',
        ],
        'apiV2DealsServiceDealUnitsDealUnitIdExtendedGet' => [
            'application/json',
        ],
        'apiV2DealsServiceDealUnitsDealUnitIdLinesCountGet' => [
            'application/json',
        ],
        'apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut' => [
            'application/json',
        ],
        'apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete' => [
            'application/json',
        ],
        'apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet' => [
            'application/json',
        ],
        'apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut' => [
            'application/json',
            'application/xml',
        ],
        'apiV2DealsServiceDealUnitsDealUnitIdLinesGet' => [
            'application/json',
        ],
        'apiV2DealsServiceDealUnitsDealUnitIdLinesPost' => [
            'application/json',
            'application/xml',
        ],
        'apiV2DealsServiceDealUnitsDealUnitIdPut' => [
            'application/json',
            'application/xml',
        ],
        'apiV2DealsServiceDealUnitsExtendedGet' => [
            'application/json',
        ],
        'apiV2DealsServiceDealUnitsGet' => [
            'application/json',
        ],
        'apiV2DealsServiceDealUnitsPost' => [
            'application/json',
            'application/xml',
        ],
        'getDealUnitAsync' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV2DealsServiceDealUnitsCountGet
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsCountGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\Int32Envelope
     */
    public function apiV2DealsServiceDealUnitsCountGet($tenant_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsCountGet'][0])
    {
        list($response) = $this->apiV2DealsServiceDealUnitsCountGetWithHttpInfo($tenant_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV2DealsServiceDealUnitsCountGetWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsCountGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\Int32Envelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2DealsServiceDealUnitsCountGetWithHttpInfo($tenant_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsCountGet'][0])
    {
        $request = $this->apiV2DealsServiceDealUnitsCountGetRequest($tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\Int32Envelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Int32Envelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Int32Envelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\Int32Envelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Int32Envelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2DealsServiceDealUnitsCountGetAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsCountGetAsync($tenant_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsCountGet'][0])
    {
        return $this->apiV2DealsServiceDealUnitsCountGetAsyncWithHttpInfo($tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsCountGetAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsCountGetAsyncWithHttpInfo($tenant_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsCountGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Int32Envelope';
        $request = $this->apiV2DealsServiceDealUnitsCountGetRequest($tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2DealsServiceDealUnitsCountGet'
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2DealsServiceDealUnitsCountGetRequest($tenant_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsCountGet'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2DealsServiceDealUnitsCountGet'
            );
        }


        $resourcePath = '/api/v2/DealsService/DealUnits/Count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdCalculatePut
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $deal_unit_id deal_unit_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdCalculatePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdCalculatePut($tenant_id, $deal_unit_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdCalculatePut'][0])
    {
        list($response) = $this->apiV2DealsServiceDealUnitsDealUnitIdCalculatePutWithHttpInfo($tenant_id, $deal_unit_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdCalculatePutWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdCalculatePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdCalculatePutWithHttpInfo($tenant_id, $deal_unit_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdCalculatePut'][0])
    {
        $request = $this->apiV2DealsServiceDealUnitsDealUnitIdCalculatePutRequest($tenant_id, $deal_unit_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\EmptyEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmptyEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmptyEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmptyEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdCalculatePutAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdCalculatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdCalculatePutAsync($tenant_id, $deal_unit_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdCalculatePut'][0])
    {
        return $this->apiV2DealsServiceDealUnitsDealUnitIdCalculatePutAsyncWithHttpInfo($tenant_id, $deal_unit_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdCalculatePutAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdCalculatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdCalculatePutAsyncWithHttpInfo($tenant_id, $deal_unit_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdCalculatePut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
        $request = $this->apiV2DealsServiceDealUnitsDealUnitIdCalculatePutRequest($tenant_id, $deal_unit_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2DealsServiceDealUnitsDealUnitIdCalculatePut'
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdCalculatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdCalculatePutRequest($tenant_id, $deal_unit_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdCalculatePut'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2DealsServiceDealUnitsDealUnitIdCalculatePut'
            );
        }

        // verify the required parameter 'deal_unit_id' is set
        if ($deal_unit_id === null || (is_array($deal_unit_id) && count($deal_unit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deal_unit_id when calling apiV2DealsServiceDealUnitsDealUnitIdCalculatePut'
            );
        }


        $resourcePath = '/api/v2/DealsService/DealUnits/{dealUnitId}/Calculate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($deal_unit_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dealUnitId' . '}',
                ObjectSerializer::toPathValue($deal_unit_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdDelete
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $deal_unit_id deal_unit_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdDelete($tenant_id, $deal_unit_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdDelete'][0])
    {
        list($response) = $this->apiV2DealsServiceDealUnitsDealUnitIdDeleteWithHttpInfo($tenant_id, $deal_unit_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdDeleteWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdDeleteWithHttpInfo($tenant_id, $deal_unit_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdDelete'][0])
    {
        $request = $this->apiV2DealsServiceDealUnitsDealUnitIdDeleteRequest($tenant_id, $deal_unit_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\EmptyEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmptyEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmptyEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmptyEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdDeleteAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdDeleteAsync($tenant_id, $deal_unit_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdDelete'][0])
    {
        return $this->apiV2DealsServiceDealUnitsDealUnitIdDeleteAsyncWithHttpInfo($tenant_id, $deal_unit_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdDeleteAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdDeleteAsyncWithHttpInfo($tenant_id, $deal_unit_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdDelete'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
        $request = $this->apiV2DealsServiceDealUnitsDealUnitIdDeleteRequest($tenant_id, $deal_unit_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2DealsServiceDealUnitsDealUnitIdDelete'
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdDeleteRequest($tenant_id, $deal_unit_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdDelete'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2DealsServiceDealUnitsDealUnitIdDelete'
            );
        }

        // verify the required parameter 'deal_unit_id' is set
        if ($deal_unit_id === null || (is_array($deal_unit_id) && count($deal_unit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deal_unit_id when calling apiV2DealsServiceDealUnitsDealUnitIdDelete'
            );
        }


        $resourcePath = '/api/v2/DealsService/DealUnits/{dealUnitId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($deal_unit_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dealUnitId' . '}',
                ObjectSerializer::toPathValue($deal_unit_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdExtendedGet
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $deal_unit_id deal_unit_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdExtendedGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ExtendedDealUnitDtoEnvelope
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdExtendedGet($tenant_id, $deal_unit_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdExtendedGet'][0])
    {
        list($response) = $this->apiV2DealsServiceDealUnitsDealUnitIdExtendedGetWithHttpInfo($tenant_id, $deal_unit_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdExtendedGetWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdExtendedGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ExtendedDealUnitDtoEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdExtendedGetWithHttpInfo($tenant_id, $deal_unit_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdExtendedGet'][0])
    {
        $request = $this->apiV2DealsServiceDealUnitsDealUnitIdExtendedGetRequest($tenant_id, $deal_unit_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\ExtendedDealUnitDtoEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ExtendedDealUnitDtoEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExtendedDealUnitDtoEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ExtendedDealUnitDtoEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExtendedDealUnitDtoEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdExtendedGetAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdExtendedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdExtendedGetAsync($tenant_id, $deal_unit_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdExtendedGet'][0])
    {
        return $this->apiV2DealsServiceDealUnitsDealUnitIdExtendedGetAsyncWithHttpInfo($tenant_id, $deal_unit_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdExtendedGetAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdExtendedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdExtendedGetAsyncWithHttpInfo($tenant_id, $deal_unit_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdExtendedGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ExtendedDealUnitDtoEnvelope';
        $request = $this->apiV2DealsServiceDealUnitsDealUnitIdExtendedGetRequest($tenant_id, $deal_unit_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2DealsServiceDealUnitsDealUnitIdExtendedGet'
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdExtendedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdExtendedGetRequest($tenant_id, $deal_unit_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdExtendedGet'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2DealsServiceDealUnitsDealUnitIdExtendedGet'
            );
        }

        // verify the required parameter 'deal_unit_id' is set
        if ($deal_unit_id === null || (is_array($deal_unit_id) && count($deal_unit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deal_unit_id when calling apiV2DealsServiceDealUnitsDealUnitIdExtendedGet'
            );
        }


        $resourcePath = '/api/v2/DealsService/DealUnits/{dealUnitId}/Extended';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($deal_unit_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dealUnitId' . '}',
                ObjectSerializer::toPathValue($deal_unit_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesCountGet
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $deal_unit_id deal_unit_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesCountGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\Int32Envelope
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesCountGet($tenant_id, $deal_unit_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesCountGet'][0])
    {
        list($response) = $this->apiV2DealsServiceDealUnitsDealUnitIdLinesCountGetWithHttpInfo($tenant_id, $deal_unit_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesCountGetWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesCountGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\Int32Envelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesCountGetWithHttpInfo($tenant_id, $deal_unit_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesCountGet'][0])
    {
        $request = $this->apiV2DealsServiceDealUnitsDealUnitIdLinesCountGetRequest($tenant_id, $deal_unit_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\Int32Envelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Int32Envelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Int32Envelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\Int32Envelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Int32Envelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesCountGetAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesCountGetAsync($tenant_id, $deal_unit_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesCountGet'][0])
    {
        return $this->apiV2DealsServiceDealUnitsDealUnitIdLinesCountGetAsyncWithHttpInfo($tenant_id, $deal_unit_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesCountGetAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesCountGetAsyncWithHttpInfo($tenant_id, $deal_unit_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesCountGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Int32Envelope';
        $request = $this->apiV2DealsServiceDealUnitsDealUnitIdLinesCountGetRequest($tenant_id, $deal_unit_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2DealsServiceDealUnitsDealUnitIdLinesCountGet'
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesCountGetRequest($tenant_id, $deal_unit_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesCountGet'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2DealsServiceDealUnitsDealUnitIdLinesCountGet'
            );
        }

        // verify the required parameter 'deal_unit_id' is set
        if ($deal_unit_id === null || (is_array($deal_unit_id) && count($deal_unit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deal_unit_id when calling apiV2DealsServiceDealUnitsDealUnitIdLinesCountGet'
            );
        }


        $resourcePath = '/api/v2/DealsService/DealUnits/{dealUnitId}/Lines/Count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($deal_unit_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dealUnitId' . '}',
                ObjectSerializer::toPathValue($deal_unit_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $deal_unit_id deal_unit_id (required)
     * @param  string $deal_unit_line_id deal_unit_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut($tenant_id, $deal_unit_id, $deal_unit_line_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut'][0])
    {
        list($response) = $this->apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutWithHttpInfo($tenant_id, $deal_unit_id, $deal_unit_line_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $deal_unit_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutWithHttpInfo($tenant_id, $deal_unit_id, $deal_unit_line_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut'][0])
    {
        $request = $this->apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutRequest($tenant_id, $deal_unit_id, $deal_unit_line_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\EmptyEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmptyEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmptyEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmptyEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $deal_unit_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutAsync($tenant_id, $deal_unit_id, $deal_unit_line_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut'][0])
    {
        return $this->apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutAsyncWithHttpInfo($tenant_id, $deal_unit_id, $deal_unit_line_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $deal_unit_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutAsyncWithHttpInfo($tenant_id, $deal_unit_id, $deal_unit_line_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
        $request = $this->apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutRequest($tenant_id, $deal_unit_id, $deal_unit_line_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut'
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $deal_unit_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutRequest($tenant_id, $deal_unit_id, $deal_unit_line_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut'
            );
        }

        // verify the required parameter 'deal_unit_id' is set
        if ($deal_unit_id === null || (is_array($deal_unit_id) && count($deal_unit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deal_unit_id when calling apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut'
            );
        }

        // verify the required parameter 'deal_unit_line_id' is set
        if ($deal_unit_line_id === null || (is_array($deal_unit_line_id) && count($deal_unit_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deal_unit_line_id when calling apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut'
            );
        }


        $resourcePath = '/api/v2/DealsService/DealUnits/{dealUnitId}/Lines/{dealUnitLineId}/Calculate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($deal_unit_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dealUnitId' . '}',
                ObjectSerializer::toPathValue($deal_unit_id),
                $resourcePath
            );
        }
        // path params
        if ($deal_unit_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dealUnitLineId' . '}',
                ObjectSerializer::toPathValue($deal_unit_line_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $deal_unit_id deal_unit_id (required)
     * @param  string $deal_unit_line_id deal_unit_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete($tenant_id, $deal_unit_id, $deal_unit_line_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete'][0])
    {
        list($response) = $this->apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteWithHttpInfo($tenant_id, $deal_unit_id, $deal_unit_line_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $deal_unit_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteWithHttpInfo($tenant_id, $deal_unit_id, $deal_unit_line_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete'][0])
    {
        $request = $this->apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteRequest($tenant_id, $deal_unit_id, $deal_unit_line_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\EmptyEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmptyEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmptyEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmptyEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $deal_unit_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteAsync($tenant_id, $deal_unit_id, $deal_unit_line_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete'][0])
    {
        return $this->apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteAsyncWithHttpInfo($tenant_id, $deal_unit_id, $deal_unit_line_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $deal_unit_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteAsyncWithHttpInfo($tenant_id, $deal_unit_id, $deal_unit_line_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
        $request = $this->apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteRequest($tenant_id, $deal_unit_id, $deal_unit_line_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete'
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $deal_unit_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteRequest($tenant_id, $deal_unit_id, $deal_unit_line_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete'
            );
        }

        // verify the required parameter 'deal_unit_id' is set
        if ($deal_unit_id === null || (is_array($deal_unit_id) && count($deal_unit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deal_unit_id when calling apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete'
            );
        }

        // verify the required parameter 'deal_unit_line_id' is set
        if ($deal_unit_line_id === null || (is_array($deal_unit_line_id) && count($deal_unit_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deal_unit_line_id when calling apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete'
            );
        }


        $resourcePath = '/api/v2/DealsService/DealUnits/{dealUnitId}/Lines/{dealUnitLineId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($deal_unit_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dealUnitId' . '}',
                ObjectSerializer::toPathValue($deal_unit_id),
                $resourcePath
            );
        }
        // path params
        if ($deal_unit_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dealUnitLineId' . '}',
                ObjectSerializer::toPathValue($deal_unit_line_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $deal_unit_id deal_unit_id (required)
     * @param  string $deal_unit_line_id deal_unit_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\DealUnitLineDtoEnvelope
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet($tenant_id, $deal_unit_id, $deal_unit_line_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet'][0])
    {
        list($response) = $this->apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetWithHttpInfo($tenant_id, $deal_unit_id, $deal_unit_line_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $deal_unit_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\DealUnitLineDtoEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetWithHttpInfo($tenant_id, $deal_unit_id, $deal_unit_line_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet'][0])
    {
        $request = $this->apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetRequest($tenant_id, $deal_unit_id, $deal_unit_line_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\DealUnitLineDtoEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DealUnitLineDtoEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DealUnitLineDtoEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\DealUnitLineDtoEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DealUnitLineDtoEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $deal_unit_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetAsync($tenant_id, $deal_unit_id, $deal_unit_line_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet'][0])
    {
        return $this->apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetAsyncWithHttpInfo($tenant_id, $deal_unit_id, $deal_unit_line_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $deal_unit_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetAsyncWithHttpInfo($tenant_id, $deal_unit_id, $deal_unit_line_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DealUnitLineDtoEnvelope';
        $request = $this->apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetRequest($tenant_id, $deal_unit_id, $deal_unit_line_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet'
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $deal_unit_line_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetRequest($tenant_id, $deal_unit_id, $deal_unit_line_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet'
            );
        }

        // verify the required parameter 'deal_unit_id' is set
        if ($deal_unit_id === null || (is_array($deal_unit_id) && count($deal_unit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deal_unit_id when calling apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet'
            );
        }

        // verify the required parameter 'deal_unit_line_id' is set
        if ($deal_unit_line_id === null || (is_array($deal_unit_line_id) && count($deal_unit_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deal_unit_line_id when calling apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet'
            );
        }


        $resourcePath = '/api/v2/DealsService/DealUnits/{dealUnitId}/Lines/{dealUnitLineId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($deal_unit_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dealUnitId' . '}',
                ObjectSerializer::toPathValue($deal_unit_id),
                $resourcePath
            );
        }
        // path params
        if ($deal_unit_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dealUnitLineId' . '}',
                ObjectSerializer::toPathValue($deal_unit_line_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $deal_unit_id deal_unit_id (required)
     * @param  string $deal_unit_line_id deal_unit_line_id (required)
     * @param  \OpenAPI\Client\Model\DealUnitLineUpdateDto $deal_unit_line_update_dto deal_unit_line_update_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut($tenant_id, $deal_unit_id, $deal_unit_line_id, $deal_unit_line_update_dto = null, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut'][0])
    {
        list($response) = $this->apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutWithHttpInfo($tenant_id, $deal_unit_id, $deal_unit_line_id, $deal_unit_line_update_dto, $contentType);
        return $response;
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $deal_unit_line_id (required)
     * @param  \OpenAPI\Client\Model\DealUnitLineUpdateDto $deal_unit_line_update_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutWithHttpInfo($tenant_id, $deal_unit_id, $deal_unit_line_id, $deal_unit_line_update_dto = null, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut'][0])
    {
        $request = $this->apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutRequest($tenant_id, $deal_unit_id, $deal_unit_line_id, $deal_unit_line_update_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\EmptyEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmptyEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmptyEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmptyEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $deal_unit_line_id (required)
     * @param  \OpenAPI\Client\Model\DealUnitLineUpdateDto $deal_unit_line_update_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutAsync($tenant_id, $deal_unit_id, $deal_unit_line_id, $deal_unit_line_update_dto = null, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut'][0])
    {
        return $this->apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutAsyncWithHttpInfo($tenant_id, $deal_unit_id, $deal_unit_line_id, $deal_unit_line_update_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $deal_unit_line_id (required)
     * @param  \OpenAPI\Client\Model\DealUnitLineUpdateDto $deal_unit_line_update_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutAsyncWithHttpInfo($tenant_id, $deal_unit_id, $deal_unit_line_id, $deal_unit_line_update_dto = null, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
        $request = $this->apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutRequest($tenant_id, $deal_unit_id, $deal_unit_line_id, $deal_unit_line_update_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut'
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $deal_unit_line_id (required)
     * @param  \OpenAPI\Client\Model\DealUnitLineUpdateDto $deal_unit_line_update_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutRequest($tenant_id, $deal_unit_id, $deal_unit_line_id, $deal_unit_line_update_dto = null, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut'
            );
        }

        // verify the required parameter 'deal_unit_id' is set
        if ($deal_unit_id === null || (is_array($deal_unit_id) && count($deal_unit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deal_unit_id when calling apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut'
            );
        }

        // verify the required parameter 'deal_unit_line_id' is set
        if ($deal_unit_line_id === null || (is_array($deal_unit_line_id) && count($deal_unit_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deal_unit_line_id when calling apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut'
            );
        }



        $resourcePath = '/api/v2/DealsService/DealUnits/{dealUnitId}/Lines/{dealUnitLineId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($deal_unit_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dealUnitId' . '}',
                ObjectSerializer::toPathValue($deal_unit_id),
                $resourcePath
            );
        }
        // path params
        if ($deal_unit_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dealUnitLineId' . '}',
                ObjectSerializer::toPathValue($deal_unit_line_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($deal_unit_line_update_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($deal_unit_line_update_dto));
            } else {
                $httpBody = $deal_unit_line_update_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesGet
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $deal_unit_id deal_unit_id (required)
     * @param  string $item_id item_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\DealUnitLineDtoListEnvelope
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesGet($tenant_id, $deal_unit_id, $item_id = null, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesGet'][0])
    {
        list($response) = $this->apiV2DealsServiceDealUnitsDealUnitIdLinesGetWithHttpInfo($tenant_id, $deal_unit_id, $item_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesGetWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $item_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\DealUnitLineDtoListEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesGetWithHttpInfo($tenant_id, $deal_unit_id, $item_id = null, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesGet'][0])
    {
        $request = $this->apiV2DealsServiceDealUnitsDealUnitIdLinesGetRequest($tenant_id, $deal_unit_id, $item_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\DealUnitLineDtoListEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DealUnitLineDtoListEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DealUnitLineDtoListEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\DealUnitLineDtoListEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DealUnitLineDtoListEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesGetAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $item_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesGetAsync($tenant_id, $deal_unit_id, $item_id = null, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesGet'][0])
    {
        return $this->apiV2DealsServiceDealUnitsDealUnitIdLinesGetAsyncWithHttpInfo($tenant_id, $deal_unit_id, $item_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesGetAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $item_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesGetAsyncWithHttpInfo($tenant_id, $deal_unit_id, $item_id = null, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DealUnitLineDtoListEnvelope';
        $request = $this->apiV2DealsServiceDealUnitsDealUnitIdLinesGetRequest($tenant_id, $deal_unit_id, $item_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2DealsServiceDealUnitsDealUnitIdLinesGet'
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $item_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesGetRequest($tenant_id, $deal_unit_id, $item_id = null, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesGet'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2DealsServiceDealUnitsDealUnitIdLinesGet'
            );
        }

        // verify the required parameter 'deal_unit_id' is set
        if ($deal_unit_id === null || (is_array($deal_unit_id) && count($deal_unit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deal_unit_id when calling apiV2DealsServiceDealUnitsDealUnitIdLinesGet'
            );
        }



        $resourcePath = '/api/v2/DealsService/DealUnits/{dealUnitId}/Lines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $item_id,
            'itemId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($deal_unit_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dealUnitId' . '}',
                ObjectSerializer::toPathValue($deal_unit_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesPost
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $deal_unit_id deal_unit_id (required)
     * @param  \OpenAPI\Client\Model\DealUnitLineCreateDto $deal_unit_line_create_dto deal_unit_line_create_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesPost($tenant_id, $deal_unit_id, $deal_unit_line_create_dto = null, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesPost'][0])
    {
        list($response) = $this->apiV2DealsServiceDealUnitsDealUnitIdLinesPostWithHttpInfo($tenant_id, $deal_unit_id, $deal_unit_line_create_dto, $contentType);
        return $response;
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesPostWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  \OpenAPI\Client\Model\DealUnitLineCreateDto $deal_unit_line_create_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesPostWithHttpInfo($tenant_id, $deal_unit_id, $deal_unit_line_create_dto = null, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesPost'][0])
    {
        $request = $this->apiV2DealsServiceDealUnitsDealUnitIdLinesPostRequest($tenant_id, $deal_unit_id, $deal_unit_line_create_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\EmptyEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmptyEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmptyEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmptyEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesPostAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  \OpenAPI\Client\Model\DealUnitLineCreateDto $deal_unit_line_create_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesPostAsync($tenant_id, $deal_unit_id, $deal_unit_line_create_dto = null, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesPost'][0])
    {
        return $this->apiV2DealsServiceDealUnitsDealUnitIdLinesPostAsyncWithHttpInfo($tenant_id, $deal_unit_id, $deal_unit_line_create_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdLinesPostAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  \OpenAPI\Client\Model\DealUnitLineCreateDto $deal_unit_line_create_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesPostAsyncWithHttpInfo($tenant_id, $deal_unit_id, $deal_unit_line_create_dto = null, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
        $request = $this->apiV2DealsServiceDealUnitsDealUnitIdLinesPostRequest($tenant_id, $deal_unit_id, $deal_unit_line_create_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2DealsServiceDealUnitsDealUnitIdLinesPost'
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  \OpenAPI\Client\Model\DealUnitLineCreateDto $deal_unit_line_create_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdLinesPostRequest($tenant_id, $deal_unit_id, $deal_unit_line_create_dto = null, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdLinesPost'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2DealsServiceDealUnitsDealUnitIdLinesPost'
            );
        }

        // verify the required parameter 'deal_unit_id' is set
        if ($deal_unit_id === null || (is_array($deal_unit_id) && count($deal_unit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deal_unit_id when calling apiV2DealsServiceDealUnitsDealUnitIdLinesPost'
            );
        }



        $resourcePath = '/api/v2/DealsService/DealUnits/{dealUnitId}/Lines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($deal_unit_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dealUnitId' . '}',
                ObjectSerializer::toPathValue($deal_unit_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($deal_unit_line_create_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($deal_unit_line_create_dto));
            } else {
                $httpBody = $deal_unit_line_create_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdPut
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $deal_unit_id deal_unit_id (required)
     * @param  \OpenAPI\Client\Model\DealUnitUpdateDto $deal_unit_update_dto deal_unit_update_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdPut($tenant_id, $deal_unit_id, $deal_unit_update_dto = null, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdPut'][0])
    {
        list($response) = $this->apiV2DealsServiceDealUnitsDealUnitIdPutWithHttpInfo($tenant_id, $deal_unit_id, $deal_unit_update_dto, $contentType);
        return $response;
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdPutWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  \OpenAPI\Client\Model\DealUnitUpdateDto $deal_unit_update_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdPutWithHttpInfo($tenant_id, $deal_unit_id, $deal_unit_update_dto = null, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdPut'][0])
    {
        $request = $this->apiV2DealsServiceDealUnitsDealUnitIdPutRequest($tenant_id, $deal_unit_id, $deal_unit_update_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\EmptyEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmptyEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmptyEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmptyEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdPutAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  \OpenAPI\Client\Model\DealUnitUpdateDto $deal_unit_update_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdPutAsync($tenant_id, $deal_unit_id, $deal_unit_update_dto = null, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdPut'][0])
    {
        return $this->apiV2DealsServiceDealUnitsDealUnitIdPutAsyncWithHttpInfo($tenant_id, $deal_unit_id, $deal_unit_update_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsDealUnitIdPutAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  \OpenAPI\Client\Model\DealUnitUpdateDto $deal_unit_update_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdPutAsyncWithHttpInfo($tenant_id, $deal_unit_id, $deal_unit_update_dto = null, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
        $request = $this->apiV2DealsServiceDealUnitsDealUnitIdPutRequest($tenant_id, $deal_unit_id, $deal_unit_update_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2DealsServiceDealUnitsDealUnitIdPut'
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  \OpenAPI\Client\Model\DealUnitUpdateDto $deal_unit_update_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2DealsServiceDealUnitsDealUnitIdPutRequest($tenant_id, $deal_unit_id, $deal_unit_update_dto = null, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsDealUnitIdPut'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2DealsServiceDealUnitsDealUnitIdPut'
            );
        }

        // verify the required parameter 'deal_unit_id' is set
        if ($deal_unit_id === null || (is_array($deal_unit_id) && count($deal_unit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deal_unit_id when calling apiV2DealsServiceDealUnitsDealUnitIdPut'
            );
        }



        $resourcePath = '/api/v2/DealsService/DealUnits/{dealUnitId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($deal_unit_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dealUnitId' . '}',
                ObjectSerializer::toPathValue($deal_unit_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($deal_unit_update_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($deal_unit_update_dto));
            } else {
                $httpBody = $deal_unit_update_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsExtendedGet
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsExtendedGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ExtendedDealUnitDtoListEnvelope
     */
    public function apiV2DealsServiceDealUnitsExtendedGet($tenant_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsExtendedGet'][0])
    {
        list($response) = $this->apiV2DealsServiceDealUnitsExtendedGetWithHttpInfo($tenant_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV2DealsServiceDealUnitsExtendedGetWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsExtendedGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ExtendedDealUnitDtoListEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2DealsServiceDealUnitsExtendedGetWithHttpInfo($tenant_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsExtendedGet'][0])
    {
        $request = $this->apiV2DealsServiceDealUnitsExtendedGetRequest($tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\ExtendedDealUnitDtoListEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ExtendedDealUnitDtoListEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExtendedDealUnitDtoListEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ExtendedDealUnitDtoListEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExtendedDealUnitDtoListEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2DealsServiceDealUnitsExtendedGetAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsExtendedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsExtendedGetAsync($tenant_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsExtendedGet'][0])
    {
        return $this->apiV2DealsServiceDealUnitsExtendedGetAsyncWithHttpInfo($tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsExtendedGetAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsExtendedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsExtendedGetAsyncWithHttpInfo($tenant_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsExtendedGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ExtendedDealUnitDtoListEnvelope';
        $request = $this->apiV2DealsServiceDealUnitsExtendedGetRequest($tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2DealsServiceDealUnitsExtendedGet'
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsExtendedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2DealsServiceDealUnitsExtendedGetRequest($tenant_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsExtendedGet'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2DealsServiceDealUnitsExtendedGet'
            );
        }


        $resourcePath = '/api/v2/DealsService/DealUnits/Extended';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsGet
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\DealUnitDtoListEnvelope
     */
    public function apiV2DealsServiceDealUnitsGet($tenant_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsGet'][0])
    {
        list($response) = $this->apiV2DealsServiceDealUnitsGetWithHttpInfo($tenant_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV2DealsServiceDealUnitsGetWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\DealUnitDtoListEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2DealsServiceDealUnitsGetWithHttpInfo($tenant_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsGet'][0])
    {
        $request = $this->apiV2DealsServiceDealUnitsGetRequest($tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\DealUnitDtoListEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DealUnitDtoListEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DealUnitDtoListEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\DealUnitDtoListEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DealUnitDtoListEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2DealsServiceDealUnitsGetAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsGetAsync($tenant_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsGet'][0])
    {
        return $this->apiV2DealsServiceDealUnitsGetAsyncWithHttpInfo($tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsGetAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsGetAsyncWithHttpInfo($tenant_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DealUnitDtoListEnvelope';
        $request = $this->apiV2DealsServiceDealUnitsGetRequest($tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2DealsServiceDealUnitsGet'
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2DealsServiceDealUnitsGetRequest($tenant_id, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsGet'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2DealsServiceDealUnitsGet'
            );
        }


        $resourcePath = '/api/v2/DealsService/DealUnits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsPost
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  \OpenAPI\Client\Model\DealUnitCreateDto $deal_unit_create_dto deal_unit_create_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope
     */
    public function apiV2DealsServiceDealUnitsPost($tenant_id, $deal_unit_create_dto = null, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsPost'][0])
    {
        list($response) = $this->apiV2DealsServiceDealUnitsPostWithHttpInfo($tenant_id, $deal_unit_create_dto, $contentType);
        return $response;
    }

    /**
     * Operation apiV2DealsServiceDealUnitsPostWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\DealUnitCreateDto $deal_unit_create_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2DealsServiceDealUnitsPostWithHttpInfo($tenant_id, $deal_unit_create_dto = null, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsPost'][0])
    {
        $request = $this->apiV2DealsServiceDealUnitsPostRequest($tenant_id, $deal_unit_create_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\EmptyEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmptyEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmptyEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmptyEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2DealsServiceDealUnitsPostAsync
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\DealUnitCreateDto $deal_unit_create_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsPostAsync($tenant_id, $deal_unit_create_dto = null, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsPost'][0])
    {
        return $this->apiV2DealsServiceDealUnitsPostAsyncWithHttpInfo($tenant_id, $deal_unit_create_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2DealsServiceDealUnitsPostAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\DealUnitCreateDto $deal_unit_create_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2DealsServiceDealUnitsPostAsyncWithHttpInfo($tenant_id, $deal_unit_create_dto = null, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
        $request = $this->apiV2DealsServiceDealUnitsPostRequest($tenant_id, $deal_unit_create_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2DealsServiceDealUnitsPost'
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\DealUnitCreateDto $deal_unit_create_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2DealsServiceDealUnitsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2DealsServiceDealUnitsPostRequest($tenant_id, $deal_unit_create_dto = null, string $contentType = self::contentTypes['apiV2DealsServiceDealUnitsPost'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2DealsServiceDealUnitsPost'
            );
        }



        $resourcePath = '/api/v2/DealsService/DealUnits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($deal_unit_create_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($deal_unit_create_dto));
            } else {
                $httpBody = $deal_unit_create_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDealUnitAsync
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $deal_unit_id deal_unit_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDealUnitAsync'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\DealUnitDtoEnvelope
     */
    public function getDealUnitAsync($tenant_id, $deal_unit_id, string $contentType = self::contentTypes['getDealUnitAsync'][0])
    {
        list($response) = $this->getDealUnitAsyncWithHttpInfo($tenant_id, $deal_unit_id, $contentType);
        return $response;
    }

    /**
     * Operation getDealUnitAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDealUnitAsync'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\DealUnitDtoEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDealUnitAsyncWithHttpInfo($tenant_id, $deal_unit_id, string $contentType = self::contentTypes['getDealUnitAsync'][0])
    {
        $request = $this->getDealUnitAsyncRequest($tenant_id, $deal_unit_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\DealUnitDtoEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DealUnitDtoEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DealUnitDtoEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\DealUnitDtoEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DealUnitDtoEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDealUnitAsyncAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDealUnitAsync'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDealUnitAsyncAsync($tenant_id, $deal_unit_id, string $contentType = self::contentTypes['getDealUnitAsync'][0])
    {
        return $this->getDealUnitAsyncAsyncWithHttpInfo($tenant_id, $deal_unit_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDealUnitAsyncAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDealUnitAsync'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDealUnitAsyncAsyncWithHttpInfo($tenant_id, $deal_unit_id, string $contentType = self::contentTypes['getDealUnitAsync'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DealUnitDtoEnvelope';
        $request = $this->getDealUnitAsyncRequest($tenant_id, $deal_unit_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDealUnitAsync'
     *
     * @param  string $tenant_id (required)
     * @param  string $deal_unit_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDealUnitAsync'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDealUnitAsyncRequest($tenant_id, $deal_unit_id, string $contentType = self::contentTypes['getDealUnitAsync'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling getDealUnitAsync'
            );
        }

        // verify the required parameter 'deal_unit_id' is set
        if ($deal_unit_id === null || (is_array($deal_unit_id) && count($deal_unit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deal_unit_id when calling getDealUnitAsync'
            );
        }


        $resourcePath = '/api/v2/DealsService/DealUnits/{dealUnitId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($deal_unit_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dealUnitId' . '}',
                ObjectSerializer::toPathValue($deal_unit_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
