<?php
/**
 * ContactProfileDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CrmService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ContactProfileDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ContactProfileDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ContactProfileDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'timestamp' => '\DateTime',
        'tenant_id' => 'string',
        'contact_id' => 'string',
        'enrollment_id' => 'string',
        'about' => 'string',
        'verified' => 'bool',
        'submitted' => 'bool',
        'avatar_url' => 'string',
        'qualified_name' => 'string',
        'verification_timestamp' => '\DateTime',
        'data' => 'string',
        'data_label' => 'string',
        'data1' => 'string',
        'data1_label' => 'string',
        'data2' => 'string',
        'data2_label' => 'string',
        'data3' => 'string',
        'data3_label' => 'string',
        'data4' => 'string',
        'data4_label' => 'string',
        'data5' => 'string',
        'data5_label' => 'string',
        'data6' => 'string',
        'data6_label' => 'string',
        'data7' => 'string',
        'data7_label' => 'string',
        'data8' => 'string',
        'data8_label' => 'string',
        'data9' => 'string',
        'data9_label' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'timestamp' => 'date-time',
        'tenant_id' => null,
        'contact_id' => null,
        'enrollment_id' => null,
        'about' => null,
        'verified' => null,
        'submitted' => null,
        'avatar_url' => null,
        'qualified_name' => null,
        'verification_timestamp' => 'date-time',
        'data' => null,
        'data_label' => null,
        'data1' => null,
        'data1_label' => null,
        'data2' => null,
        'data2_label' => null,
        'data3' => null,
        'data3_label' => null,
        'data4' => null,
        'data4_label' => null,
        'data5' => null,
        'data5_label' => null,
        'data6' => null,
        'data6_label' => null,
        'data7' => null,
        'data7_label' => null,
        'data8' => null,
        'data8_label' => null,
        'data9' => null,
        'data9_label' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'timestamp' => false,
        'tenant_id' => true,
        'contact_id' => true,
        'enrollment_id' => true,
        'about' => true,
        'verified' => false,
        'submitted' => false,
        'avatar_url' => true,
        'qualified_name' => true,
        'verification_timestamp' => true,
        'data' => true,
        'data_label' => true,
        'data1' => true,
        'data1_label' => true,
        'data2' => true,
        'data2_label' => true,
        'data3' => true,
        'data3_label' => true,
        'data4' => true,
        'data4_label' => true,
        'data5' => true,
        'data5_label' => true,
        'data6' => true,
        'data6_label' => true,
        'data7' => true,
        'data7_label' => true,
        'data8' => true,
        'data8_label' => true,
        'data9' => true,
        'data9_label' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'timestamp' => 'timestamp',
        'tenant_id' => 'tenantId',
        'contact_id' => 'contactId',
        'enrollment_id' => 'enrollmentId',
        'about' => 'about',
        'verified' => 'verified',
        'submitted' => 'submitted',
        'avatar_url' => 'avatarUrl',
        'qualified_name' => 'qualifiedName',
        'verification_timestamp' => 'verificationTimestamp',
        'data' => 'data',
        'data_label' => 'dataLabel',
        'data1' => 'data1',
        'data1_label' => 'data1Label',
        'data2' => 'data2',
        'data2_label' => 'data2Label',
        'data3' => 'data3',
        'data3_label' => 'data3Label',
        'data4' => 'data4',
        'data4_label' => 'data4Label',
        'data5' => 'data5',
        'data5_label' => 'data5Label',
        'data6' => 'data6',
        'data6_label' => 'data6Label',
        'data7' => 'data7',
        'data7_label' => 'data7Label',
        'data8' => 'data8',
        'data8_label' => 'data8Label',
        'data9' => 'data9',
        'data9_label' => 'data9Label'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'timestamp' => 'setTimestamp',
        'tenant_id' => 'setTenantId',
        'contact_id' => 'setContactId',
        'enrollment_id' => 'setEnrollmentId',
        'about' => 'setAbout',
        'verified' => 'setVerified',
        'submitted' => 'setSubmitted',
        'avatar_url' => 'setAvatarUrl',
        'qualified_name' => 'setQualifiedName',
        'verification_timestamp' => 'setVerificationTimestamp',
        'data' => 'setData',
        'data_label' => 'setDataLabel',
        'data1' => 'setData1',
        'data1_label' => 'setData1Label',
        'data2' => 'setData2',
        'data2_label' => 'setData2Label',
        'data3' => 'setData3',
        'data3_label' => 'setData3Label',
        'data4' => 'setData4',
        'data4_label' => 'setData4Label',
        'data5' => 'setData5',
        'data5_label' => 'setData5Label',
        'data6' => 'setData6',
        'data6_label' => 'setData6Label',
        'data7' => 'setData7',
        'data7_label' => 'setData7Label',
        'data8' => 'setData8',
        'data8_label' => 'setData8Label',
        'data9' => 'setData9',
        'data9_label' => 'setData9Label'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'timestamp' => 'getTimestamp',
        'tenant_id' => 'getTenantId',
        'contact_id' => 'getContactId',
        'enrollment_id' => 'getEnrollmentId',
        'about' => 'getAbout',
        'verified' => 'getVerified',
        'submitted' => 'getSubmitted',
        'avatar_url' => 'getAvatarUrl',
        'qualified_name' => 'getQualifiedName',
        'verification_timestamp' => 'getVerificationTimestamp',
        'data' => 'getData',
        'data_label' => 'getDataLabel',
        'data1' => 'getData1',
        'data1_label' => 'getData1Label',
        'data2' => 'getData2',
        'data2_label' => 'getData2Label',
        'data3' => 'getData3',
        'data3_label' => 'getData3Label',
        'data4' => 'getData4',
        'data4_label' => 'getData4Label',
        'data5' => 'getData5',
        'data5_label' => 'getData5Label',
        'data6' => 'getData6',
        'data6_label' => 'getData6Label',
        'data7' => 'getData7',
        'data7_label' => 'getData7Label',
        'data8' => 'getData8',
        'data8_label' => 'getData8Label',
        'data9' => 'getData9',
        'data9_label' => 'getData9Label'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('tenant_id', $data ?? [], null);
        $this->setIfExists('contact_id', $data ?? [], null);
        $this->setIfExists('enrollment_id', $data ?? [], null);
        $this->setIfExists('about', $data ?? [], null);
        $this->setIfExists('verified', $data ?? [], null);
        $this->setIfExists('submitted', $data ?? [], null);
        $this->setIfExists('avatar_url', $data ?? [], null);
        $this->setIfExists('qualified_name', $data ?? [], null);
        $this->setIfExists('verification_timestamp', $data ?? [], null);
        $this->setIfExists('data', $data ?? [], null);
        $this->setIfExists('data_label', $data ?? [], null);
        $this->setIfExists('data1', $data ?? [], null);
        $this->setIfExists('data1_label', $data ?? [], null);
        $this->setIfExists('data2', $data ?? [], null);
        $this->setIfExists('data2_label', $data ?? [], null);
        $this->setIfExists('data3', $data ?? [], null);
        $this->setIfExists('data3_label', $data ?? [], null);
        $this->setIfExists('data4', $data ?? [], null);
        $this->setIfExists('data4_label', $data ?? [], null);
        $this->setIfExists('data5', $data ?? [], null);
        $this->setIfExists('data5_label', $data ?? [], null);
        $this->setIfExists('data6', $data ?? [], null);
        $this->setIfExists('data6_label', $data ?? [], null);
        $this->setIfExists('data7', $data ?? [], null);
        $this->setIfExists('data7_label', $data ?? [], null);
        $this->setIfExists('data8', $data ?? [], null);
        $this->setIfExists('data8_label', $data ?? [], null);
        $this->setIfExists('data9', $data ?? [], null);
        $this->setIfExists('data9_label', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string|null
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string|null $tenant_id tenant_id
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        if (is_null($tenant_id)) {
            array_push($this->openAPINullablesSetToNull, 'tenant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tenant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return string|null
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param string|null $contact_id contact_id
     *
     * @return self
     */
    public function setContactId($contact_id)
    {
        if (is_null($contact_id)) {
            array_push($this->openAPINullablesSetToNull, 'contact_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets enrollment_id
     *
     * @return string|null
     */
    public function getEnrollmentId()
    {
        return $this->container['enrollment_id'];
    }

    /**
     * Sets enrollment_id
     *
     * @param string|null $enrollment_id enrollment_id
     *
     * @return self
     */
    public function setEnrollmentId($enrollment_id)
    {
        if (is_null($enrollment_id)) {
            array_push($this->openAPINullablesSetToNull, 'enrollment_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enrollment_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enrollment_id'] = $enrollment_id;

        return $this;
    }

    /**
     * Gets about
     *
     * @return string|null
     */
    public function getAbout()
    {
        return $this->container['about'];
    }

    /**
     * Sets about
     *
     * @param string|null $about about
     *
     * @return self
     */
    public function setAbout($about)
    {
        if (is_null($about)) {
            array_push($this->openAPINullablesSetToNull, 'about');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('about', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['about'] = $about;

        return $this;
    }

    /**
     * Gets verified
     *
     * @return bool|null
     */
    public function getVerified()
    {
        return $this->container['verified'];
    }

    /**
     * Sets verified
     *
     * @param bool|null $verified verified
     *
     * @return self
     */
    public function setVerified($verified)
    {
        if (is_null($verified)) {
            throw new \InvalidArgumentException('non-nullable verified cannot be null');
        }
        $this->container['verified'] = $verified;

        return $this;
    }

    /**
     * Gets submitted
     *
     * @return bool|null
     */
    public function getSubmitted()
    {
        return $this->container['submitted'];
    }

    /**
     * Sets submitted
     *
     * @param bool|null $submitted submitted
     *
     * @return self
     */
    public function setSubmitted($submitted)
    {
        if (is_null($submitted)) {
            throw new \InvalidArgumentException('non-nullable submitted cannot be null');
        }
        $this->container['submitted'] = $submitted;

        return $this;
    }

    /**
     * Gets avatar_url
     *
     * @return string|null
     */
    public function getAvatarUrl()
    {
        return $this->container['avatar_url'];
    }

    /**
     * Sets avatar_url
     *
     * @param string|null $avatar_url avatar_url
     *
     * @return self
     */
    public function setAvatarUrl($avatar_url)
    {
        if (is_null($avatar_url)) {
            array_push($this->openAPINullablesSetToNull, 'avatar_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avatar_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avatar_url'] = $avatar_url;

        return $this;
    }

    /**
     * Gets qualified_name
     *
     * @return string|null
     */
    public function getQualifiedName()
    {
        return $this->container['qualified_name'];
    }

    /**
     * Sets qualified_name
     *
     * @param string|null $qualified_name qualified_name
     *
     * @return self
     */
    public function setQualifiedName($qualified_name)
    {
        if (is_null($qualified_name)) {
            array_push($this->openAPINullablesSetToNull, 'qualified_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('qualified_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['qualified_name'] = $qualified_name;

        return $this;
    }

    /**
     * Gets verification_timestamp
     *
     * @return \DateTime|null
     */
    public function getVerificationTimestamp()
    {
        return $this->container['verification_timestamp'];
    }

    /**
     * Sets verification_timestamp
     *
     * @param \DateTime|null $verification_timestamp verification_timestamp
     *
     * @return self
     */
    public function setVerificationTimestamp($verification_timestamp)
    {
        if (is_null($verification_timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'verification_timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('verification_timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['verification_timestamp'] = $verification_timestamp;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data data
     *
     * @return self
     */
    public function setData($data)
    {
        if (is_null($data)) {
            array_push($this->openAPINullablesSetToNull, 'data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets data_label
     *
     * @return string|null
     */
    public function getDataLabel()
    {
        return $this->container['data_label'];
    }

    /**
     * Sets data_label
     *
     * @param string|null $data_label data_label
     *
     * @return self
     */
    public function setDataLabel($data_label)
    {
        if (is_null($data_label)) {
            array_push($this->openAPINullablesSetToNull, 'data_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_label'] = $data_label;

        return $this;
    }

    /**
     * Gets data1
     *
     * @return string|null
     */
    public function getData1()
    {
        return $this->container['data1'];
    }

    /**
     * Sets data1
     *
     * @param string|null $data1 data1
     *
     * @return self
     */
    public function setData1($data1)
    {
        if (is_null($data1)) {
            array_push($this->openAPINullablesSetToNull, 'data1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data1'] = $data1;

        return $this;
    }

    /**
     * Gets data1_label
     *
     * @return string|null
     */
    public function getData1Label()
    {
        return $this->container['data1_label'];
    }

    /**
     * Sets data1_label
     *
     * @param string|null $data1_label data1_label
     *
     * @return self
     */
    public function setData1Label($data1_label)
    {
        if (is_null($data1_label)) {
            array_push($this->openAPINullablesSetToNull, 'data1_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data1_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data1_label'] = $data1_label;

        return $this;
    }

    /**
     * Gets data2
     *
     * @return string|null
     */
    public function getData2()
    {
        return $this->container['data2'];
    }

    /**
     * Sets data2
     *
     * @param string|null $data2 data2
     *
     * @return self
     */
    public function setData2($data2)
    {
        if (is_null($data2)) {
            array_push($this->openAPINullablesSetToNull, 'data2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data2'] = $data2;

        return $this;
    }

    /**
     * Gets data2_label
     *
     * @return string|null
     */
    public function getData2Label()
    {
        return $this->container['data2_label'];
    }

    /**
     * Sets data2_label
     *
     * @param string|null $data2_label data2_label
     *
     * @return self
     */
    public function setData2Label($data2_label)
    {
        if (is_null($data2_label)) {
            array_push($this->openAPINullablesSetToNull, 'data2_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data2_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data2_label'] = $data2_label;

        return $this;
    }

    /**
     * Gets data3
     *
     * @return string|null
     */
    public function getData3()
    {
        return $this->container['data3'];
    }

    /**
     * Sets data3
     *
     * @param string|null $data3 data3
     *
     * @return self
     */
    public function setData3($data3)
    {
        if (is_null($data3)) {
            array_push($this->openAPINullablesSetToNull, 'data3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data3'] = $data3;

        return $this;
    }

    /**
     * Gets data3_label
     *
     * @return string|null
     */
    public function getData3Label()
    {
        return $this->container['data3_label'];
    }

    /**
     * Sets data3_label
     *
     * @param string|null $data3_label data3_label
     *
     * @return self
     */
    public function setData3Label($data3_label)
    {
        if (is_null($data3_label)) {
            array_push($this->openAPINullablesSetToNull, 'data3_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data3_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data3_label'] = $data3_label;

        return $this;
    }

    /**
     * Gets data4
     *
     * @return string|null
     */
    public function getData4()
    {
        return $this->container['data4'];
    }

    /**
     * Sets data4
     *
     * @param string|null $data4 data4
     *
     * @return self
     */
    public function setData4($data4)
    {
        if (is_null($data4)) {
            array_push($this->openAPINullablesSetToNull, 'data4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data4'] = $data4;

        return $this;
    }

    /**
     * Gets data4_label
     *
     * @return string|null
     */
    public function getData4Label()
    {
        return $this->container['data4_label'];
    }

    /**
     * Sets data4_label
     *
     * @param string|null $data4_label data4_label
     *
     * @return self
     */
    public function setData4Label($data4_label)
    {
        if (is_null($data4_label)) {
            array_push($this->openAPINullablesSetToNull, 'data4_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data4_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data4_label'] = $data4_label;

        return $this;
    }

    /**
     * Gets data5
     *
     * @return string|null
     */
    public function getData5()
    {
        return $this->container['data5'];
    }

    /**
     * Sets data5
     *
     * @param string|null $data5 data5
     *
     * @return self
     */
    public function setData5($data5)
    {
        if (is_null($data5)) {
            array_push($this->openAPINullablesSetToNull, 'data5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data5'] = $data5;

        return $this;
    }

    /**
     * Gets data5_label
     *
     * @return string|null
     */
    public function getData5Label()
    {
        return $this->container['data5_label'];
    }

    /**
     * Sets data5_label
     *
     * @param string|null $data5_label data5_label
     *
     * @return self
     */
    public function setData5Label($data5_label)
    {
        if (is_null($data5_label)) {
            array_push($this->openAPINullablesSetToNull, 'data5_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data5_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data5_label'] = $data5_label;

        return $this;
    }

    /**
     * Gets data6
     *
     * @return string|null
     */
    public function getData6()
    {
        return $this->container['data6'];
    }

    /**
     * Sets data6
     *
     * @param string|null $data6 data6
     *
     * @return self
     */
    public function setData6($data6)
    {
        if (is_null($data6)) {
            array_push($this->openAPINullablesSetToNull, 'data6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data6'] = $data6;

        return $this;
    }

    /**
     * Gets data6_label
     *
     * @return string|null
     */
    public function getData6Label()
    {
        return $this->container['data6_label'];
    }

    /**
     * Sets data6_label
     *
     * @param string|null $data6_label data6_label
     *
     * @return self
     */
    public function setData6Label($data6_label)
    {
        if (is_null($data6_label)) {
            array_push($this->openAPINullablesSetToNull, 'data6_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data6_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data6_label'] = $data6_label;

        return $this;
    }

    /**
     * Gets data7
     *
     * @return string|null
     */
    public function getData7()
    {
        return $this->container['data7'];
    }

    /**
     * Sets data7
     *
     * @param string|null $data7 data7
     *
     * @return self
     */
    public function setData7($data7)
    {
        if (is_null($data7)) {
            array_push($this->openAPINullablesSetToNull, 'data7');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data7', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data7'] = $data7;

        return $this;
    }

    /**
     * Gets data7_label
     *
     * @return string|null
     */
    public function getData7Label()
    {
        return $this->container['data7_label'];
    }

    /**
     * Sets data7_label
     *
     * @param string|null $data7_label data7_label
     *
     * @return self
     */
    public function setData7Label($data7_label)
    {
        if (is_null($data7_label)) {
            array_push($this->openAPINullablesSetToNull, 'data7_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data7_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data7_label'] = $data7_label;

        return $this;
    }

    /**
     * Gets data8
     *
     * @return string|null
     */
    public function getData8()
    {
        return $this->container['data8'];
    }

    /**
     * Sets data8
     *
     * @param string|null $data8 data8
     *
     * @return self
     */
    public function setData8($data8)
    {
        if (is_null($data8)) {
            array_push($this->openAPINullablesSetToNull, 'data8');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data8', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data8'] = $data8;

        return $this;
    }

    /**
     * Gets data8_label
     *
     * @return string|null
     */
    public function getData8Label()
    {
        return $this->container['data8_label'];
    }

    /**
     * Sets data8_label
     *
     * @param string|null $data8_label data8_label
     *
     * @return self
     */
    public function setData8Label($data8_label)
    {
        if (is_null($data8_label)) {
            array_push($this->openAPINullablesSetToNull, 'data8_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data8_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data8_label'] = $data8_label;

        return $this;
    }

    /**
     * Gets data9
     *
     * @return string|null
     */
    public function getData9()
    {
        return $this->container['data9'];
    }

    /**
     * Sets data9
     *
     * @param string|null $data9 data9
     *
     * @return self
     */
    public function setData9($data9)
    {
        if (is_null($data9)) {
            array_push($this->openAPINullablesSetToNull, 'data9');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data9', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data9'] = $data9;

        return $this;
    }

    /**
     * Gets data9_label
     *
     * @return string|null
     */
    public function getData9Label()
    {
        return $this->container['data9_label'];
    }

    /**
     * Sets data9_label
     *
     * @param string|null $data9_label data9_label
     *
     * @return self
     */
    public function setData9Label($data9_label)
    {
        if (is_null($data9_label)) {
            array_push($this->openAPINullablesSetToNull, 'data9_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data9_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data9_label'] = $data9_label;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


