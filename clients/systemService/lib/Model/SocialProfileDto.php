<?php
/**
 * SocialProfileDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SystemService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SocialProfileDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SocialProfileDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SocialProfileDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'timestamp' => '\DateTime',
        'name' => 'string',
        'about' => 'string',
        'cover' => 'string',
        'avatar' => 'string',
        'country_id' => 'string',
        'country_name' => 'string',
        'identity_id' => 'string',
        'follows_count' => 'int',
        'messages_count' => 'int',
        'followers_count' => 'int',
        'notifications_count' => 'int',
        'unread_notifications_count' => 'int',
        'unread_messages_count' => 'int',
        'type' => 'int',
        'social_feed_id' => 'string',
        'twitter_url' => 'string',
        'facebook_url' => 'string',
        'linked_in_url' => 'string',
        'youtube_url' => 'string',
        'github_url' => 'string',
        'pinterest_url' => 'string',
        'dribble_url' => 'string',
        'domain' => 'string',
        'notes' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'timestamp' => 'date-time',
        'name' => null,
        'about' => null,
        'cover' => null,
        'avatar' => null,
        'country_id' => null,
        'country_name' => null,
        'identity_id' => null,
        'follows_count' => 'int32',
        'messages_count' => 'int32',
        'followers_count' => 'int32',
        'notifications_count' => 'int32',
        'unread_notifications_count' => 'int32',
        'unread_messages_count' => 'int32',
        'type' => 'int32',
        'social_feed_id' => null,
        'twitter_url' => null,
        'facebook_url' => null,
        'linked_in_url' => null,
        'youtube_url' => null,
        'github_url' => null,
        'pinterest_url' => null,
        'dribble_url' => null,
        'domain' => null,
        'notes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'timestamp' => true,
        'name' => true,
        'about' => true,
        'cover' => true,
        'avatar' => true,
        'country_id' => true,
        'country_name' => true,
        'identity_id' => true,
        'follows_count' => true,
        'messages_count' => true,
        'followers_count' => true,
        'notifications_count' => true,
        'unread_notifications_count' => true,
        'unread_messages_count' => true,
        'type' => true,
        'social_feed_id' => true,
        'twitter_url' => true,
        'facebook_url' => true,
        'linked_in_url' => true,
        'youtube_url' => true,
        'github_url' => true,
        'pinterest_url' => true,
        'dribble_url' => true,
        'domain' => true,
        'notes' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'timestamp' => 'timestamp',
        'name' => 'name',
        'about' => 'about',
        'cover' => 'cover',
        'avatar' => 'avatar',
        'country_id' => 'countryId',
        'country_name' => 'countryName',
        'identity_id' => 'identityId',
        'follows_count' => 'followsCount',
        'messages_count' => 'messagesCount',
        'followers_count' => 'followersCount',
        'notifications_count' => 'notificationsCount',
        'unread_notifications_count' => 'unreadNotificationsCount',
        'unread_messages_count' => 'unreadMessagesCount',
        'type' => 'type',
        'social_feed_id' => 'socialFeedId',
        'twitter_url' => 'twitterUrl',
        'facebook_url' => 'facebookURL',
        'linked_in_url' => 'linkedInURL',
        'youtube_url' => 'youtubeURL',
        'github_url' => 'githubURL',
        'pinterest_url' => 'pinterestURL',
        'dribble_url' => 'dribbleURL',
        'domain' => 'domain',
        'notes' => 'notes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'timestamp' => 'setTimestamp',
        'name' => 'setName',
        'about' => 'setAbout',
        'cover' => 'setCover',
        'avatar' => 'setAvatar',
        'country_id' => 'setCountryId',
        'country_name' => 'setCountryName',
        'identity_id' => 'setIdentityId',
        'follows_count' => 'setFollowsCount',
        'messages_count' => 'setMessagesCount',
        'followers_count' => 'setFollowersCount',
        'notifications_count' => 'setNotificationsCount',
        'unread_notifications_count' => 'setUnreadNotificationsCount',
        'unread_messages_count' => 'setUnreadMessagesCount',
        'type' => 'setType',
        'social_feed_id' => 'setSocialFeedId',
        'twitter_url' => 'setTwitterUrl',
        'facebook_url' => 'setFacebookUrl',
        'linked_in_url' => 'setLinkedInUrl',
        'youtube_url' => 'setYoutubeUrl',
        'github_url' => 'setGithubUrl',
        'pinterest_url' => 'setPinterestUrl',
        'dribble_url' => 'setDribbleUrl',
        'domain' => 'setDomain',
        'notes' => 'setNotes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'timestamp' => 'getTimestamp',
        'name' => 'getName',
        'about' => 'getAbout',
        'cover' => 'getCover',
        'avatar' => 'getAvatar',
        'country_id' => 'getCountryId',
        'country_name' => 'getCountryName',
        'identity_id' => 'getIdentityId',
        'follows_count' => 'getFollowsCount',
        'messages_count' => 'getMessagesCount',
        'followers_count' => 'getFollowersCount',
        'notifications_count' => 'getNotificationsCount',
        'unread_notifications_count' => 'getUnreadNotificationsCount',
        'unread_messages_count' => 'getUnreadMessagesCount',
        'type' => 'getType',
        'social_feed_id' => 'getSocialFeedId',
        'twitter_url' => 'getTwitterUrl',
        'facebook_url' => 'getFacebookUrl',
        'linked_in_url' => 'getLinkedInUrl',
        'youtube_url' => 'getYoutubeUrl',
        'github_url' => 'getGithubUrl',
        'pinterest_url' => 'getPinterestUrl',
        'dribble_url' => 'getDribbleUrl',
        'domain' => 'getDomain',
        'notes' => 'getNotes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_NUMBER_0 = 0;
    public const TYPE_NUMBER_1 = 1;
    public const TYPE_NUMBER_2 = 2;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_NUMBER_0,
            self::TYPE_NUMBER_1,
            self::TYPE_NUMBER_2,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('about', $data ?? [], null);
        $this->setIfExists('cover', $data ?? [], null);
        $this->setIfExists('avatar', $data ?? [], null);
        $this->setIfExists('country_id', $data ?? [], null);
        $this->setIfExists('country_name', $data ?? [], null);
        $this->setIfExists('identity_id', $data ?? [], null);
        $this->setIfExists('follows_count', $data ?? [], null);
        $this->setIfExists('messages_count', $data ?? [], null);
        $this->setIfExists('followers_count', $data ?? [], null);
        $this->setIfExists('notifications_count', $data ?? [], null);
        $this->setIfExists('unread_notifications_count', $data ?? [], null);
        $this->setIfExists('unread_messages_count', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('social_feed_id', $data ?? [], null);
        $this->setIfExists('twitter_url', $data ?? [], null);
        $this->setIfExists('facebook_url', $data ?? [], null);
        $this->setIfExists('linked_in_url', $data ?? [], null);
        $this->setIfExists('youtube_url', $data ?? [], null);
        $this->setIfExists('github_url', $data ?? [], null);
        $this->setIfExists('pinterest_url', $data ?? [], null);
        $this->setIfExists('dribble_url', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets about
     *
     * @return string|null
     */
    public function getAbout()
    {
        return $this->container['about'];
    }

    /**
     * Sets about
     *
     * @param string|null $about about
     *
     * @return self
     */
    public function setAbout($about)
    {
        if (is_null($about)) {
            array_push($this->openAPINullablesSetToNull, 'about');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('about', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['about'] = $about;

        return $this;
    }

    /**
     * Gets cover
     *
     * @return string|null
     */
    public function getCover()
    {
        return $this->container['cover'];
    }

    /**
     * Sets cover
     *
     * @param string|null $cover cover
     *
     * @return self
     */
    public function setCover($cover)
    {
        if (is_null($cover)) {
            array_push($this->openAPINullablesSetToNull, 'cover');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cover', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cover'] = $cover;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return string|null
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param string|null $avatar avatar
     *
     * @return self
     */
    public function setAvatar($avatar)
    {
        if (is_null($avatar)) {
            array_push($this->openAPINullablesSetToNull, 'avatar');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avatar', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return string|null
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param string|null $country_id country_id
     *
     * @return self
     */
    public function setCountryId($country_id)
    {
        if (is_null($country_id)) {
            array_push($this->openAPINullablesSetToNull, 'country_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets country_name
     *
     * @return string|null
     */
    public function getCountryName()
    {
        return $this->container['country_name'];
    }

    /**
     * Sets country_name
     *
     * @param string|null $country_name country_name
     *
     * @return self
     */
    public function setCountryName($country_name)
    {
        if (is_null($country_name)) {
            array_push($this->openAPINullablesSetToNull, 'country_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['country_name'] = $country_name;

        return $this;
    }

    /**
     * Gets identity_id
     *
     * @return string|null
     */
    public function getIdentityId()
    {
        return $this->container['identity_id'];
    }

    /**
     * Sets identity_id
     *
     * @param string|null $identity_id identity_id
     *
     * @return self
     */
    public function setIdentityId($identity_id)
    {
        if (is_null($identity_id)) {
            array_push($this->openAPINullablesSetToNull, 'identity_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('identity_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['identity_id'] = $identity_id;

        return $this;
    }

    /**
     * Gets follows_count
     *
     * @return int|null
     */
    public function getFollowsCount()
    {
        return $this->container['follows_count'];
    }

    /**
     * Sets follows_count
     *
     * @param int|null $follows_count follows_count
     *
     * @return self
     */
    public function setFollowsCount($follows_count)
    {
        if (is_null($follows_count)) {
            array_push($this->openAPINullablesSetToNull, 'follows_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('follows_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['follows_count'] = $follows_count;

        return $this;
    }

    /**
     * Gets messages_count
     *
     * @return int|null
     */
    public function getMessagesCount()
    {
        return $this->container['messages_count'];
    }

    /**
     * Sets messages_count
     *
     * @param int|null $messages_count messages_count
     *
     * @return self
     */
    public function setMessagesCount($messages_count)
    {
        if (is_null($messages_count)) {
            array_push($this->openAPINullablesSetToNull, 'messages_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messages_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['messages_count'] = $messages_count;

        return $this;
    }

    /**
     * Gets followers_count
     *
     * @return int|null
     */
    public function getFollowersCount()
    {
        return $this->container['followers_count'];
    }

    /**
     * Sets followers_count
     *
     * @param int|null $followers_count followers_count
     *
     * @return self
     */
    public function setFollowersCount($followers_count)
    {
        if (is_null($followers_count)) {
            array_push($this->openAPINullablesSetToNull, 'followers_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('followers_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['followers_count'] = $followers_count;

        return $this;
    }

    /**
     * Gets notifications_count
     *
     * @return int|null
     */
    public function getNotificationsCount()
    {
        return $this->container['notifications_count'];
    }

    /**
     * Sets notifications_count
     *
     * @param int|null $notifications_count notifications_count
     *
     * @return self
     */
    public function setNotificationsCount($notifications_count)
    {
        if (is_null($notifications_count)) {
            array_push($this->openAPINullablesSetToNull, 'notifications_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('notifications_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['notifications_count'] = $notifications_count;

        return $this;
    }

    /**
     * Gets unread_notifications_count
     *
     * @return int|null
     */
    public function getUnreadNotificationsCount()
    {
        return $this->container['unread_notifications_count'];
    }

    /**
     * Sets unread_notifications_count
     *
     * @param int|null $unread_notifications_count unread_notifications_count
     *
     * @return self
     */
    public function setUnreadNotificationsCount($unread_notifications_count)
    {
        if (is_null($unread_notifications_count)) {
            array_push($this->openAPINullablesSetToNull, 'unread_notifications_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unread_notifications_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unread_notifications_count'] = $unread_notifications_count;

        return $this;
    }

    /**
     * Gets unread_messages_count
     *
     * @return int|null
     */
    public function getUnreadMessagesCount()
    {
        return $this->container['unread_messages_count'];
    }

    /**
     * Sets unread_messages_count
     *
     * @param int|null $unread_messages_count unread_messages_count
     *
     * @return self
     */
    public function setUnreadMessagesCount($unread_messages_count)
    {
        if (is_null($unread_messages_count)) {
            array_push($this->openAPINullablesSetToNull, 'unread_messages_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unread_messages_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unread_messages_count'] = $unread_messages_count;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets social_feed_id
     *
     * @return string|null
     */
    public function getSocialFeedId()
    {
        return $this->container['social_feed_id'];
    }

    /**
     * Sets social_feed_id
     *
     * @param string|null $social_feed_id social_feed_id
     *
     * @return self
     */
    public function setSocialFeedId($social_feed_id)
    {
        if (is_null($social_feed_id)) {
            array_push($this->openAPINullablesSetToNull, 'social_feed_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('social_feed_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['social_feed_id'] = $social_feed_id;

        return $this;
    }

    /**
     * Gets twitter_url
     *
     * @return string|null
     */
    public function getTwitterUrl()
    {
        return $this->container['twitter_url'];
    }

    /**
     * Sets twitter_url
     *
     * @param string|null $twitter_url twitter_url
     *
     * @return self
     */
    public function setTwitterUrl($twitter_url)
    {
        if (is_null($twitter_url)) {
            array_push($this->openAPINullablesSetToNull, 'twitter_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('twitter_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['twitter_url'] = $twitter_url;

        return $this;
    }

    /**
     * Gets facebook_url
     *
     * @return string|null
     */
    public function getFacebookUrl()
    {
        return $this->container['facebook_url'];
    }

    /**
     * Sets facebook_url
     *
     * @param string|null $facebook_url facebook_url
     *
     * @return self
     */
    public function setFacebookUrl($facebook_url)
    {
        if (is_null($facebook_url)) {
            array_push($this->openAPINullablesSetToNull, 'facebook_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('facebook_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['facebook_url'] = $facebook_url;

        return $this;
    }

    /**
     * Gets linked_in_url
     *
     * @return string|null
     */
    public function getLinkedInUrl()
    {
        return $this->container['linked_in_url'];
    }

    /**
     * Sets linked_in_url
     *
     * @param string|null $linked_in_url linked_in_url
     *
     * @return self
     */
    public function setLinkedInUrl($linked_in_url)
    {
        if (is_null($linked_in_url)) {
            array_push($this->openAPINullablesSetToNull, 'linked_in_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('linked_in_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['linked_in_url'] = $linked_in_url;

        return $this;
    }

    /**
     * Gets youtube_url
     *
     * @return string|null
     */
    public function getYoutubeUrl()
    {
        return $this->container['youtube_url'];
    }

    /**
     * Sets youtube_url
     *
     * @param string|null $youtube_url youtube_url
     *
     * @return self
     */
    public function setYoutubeUrl($youtube_url)
    {
        if (is_null($youtube_url)) {
            array_push($this->openAPINullablesSetToNull, 'youtube_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('youtube_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['youtube_url'] = $youtube_url;

        return $this;
    }

    /**
     * Gets github_url
     *
     * @return string|null
     */
    public function getGithubUrl()
    {
        return $this->container['github_url'];
    }

    /**
     * Sets github_url
     *
     * @param string|null $github_url github_url
     *
     * @return self
     */
    public function setGithubUrl($github_url)
    {
        if (is_null($github_url)) {
            array_push($this->openAPINullablesSetToNull, 'github_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('github_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['github_url'] = $github_url;

        return $this;
    }

    /**
     * Gets pinterest_url
     *
     * @return string|null
     */
    public function getPinterestUrl()
    {
        return $this->container['pinterest_url'];
    }

    /**
     * Sets pinterest_url
     *
     * @param string|null $pinterest_url pinterest_url
     *
     * @return self
     */
    public function setPinterestUrl($pinterest_url)
    {
        if (is_null($pinterest_url)) {
            array_push($this->openAPINullablesSetToNull, 'pinterest_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pinterest_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pinterest_url'] = $pinterest_url;

        return $this;
    }

    /**
     * Gets dribble_url
     *
     * @return string|null
     */
    public function getDribbleUrl()
    {
        return $this->container['dribble_url'];
    }

    /**
     * Sets dribble_url
     *
     * @param string|null $dribble_url dribble_url
     *
     * @return self
     */
    public function setDribbleUrl($dribble_url)
    {
        if (is_null($dribble_url)) {
            array_push($this->openAPINullablesSetToNull, 'dribble_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dribble_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dribble_url'] = $dribble_url;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            array_push($this->openAPINullablesSetToNull, 'domain');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('domain', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes notes
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            array_push($this->openAPINullablesSetToNull, 'notes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('notes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['notes'] = $notes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


