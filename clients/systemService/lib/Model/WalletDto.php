<?php
/**
 * WalletDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SystemService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WalletDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WalletDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WalletDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'timestamp' => '\DateTime',
        'balance' => 'float',
        'crypto_balance' => 'float',
        'test_mode' => 'bool',
        'verified' => 'bool',
        'type' => 'string',
        'currency_id' => 'string',
        'forex_rate' => 'float',
        'balance_in_usd' => 'float',
        'main_net_ether_balance' => 'float',
        'ethereum_address' => 'string',
        'ethereum_public_key' => 'string',
        'ethereum_private_key' => 'string',
        'rolling_reserve_percent' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'timestamp' => 'date-time',
        'balance' => 'double',
        'crypto_balance' => 'double',
        'test_mode' => null,
        'verified' => null,
        'type' => null,
        'currency_id' => null,
        'forex_rate' => 'double',
        'balance_in_usd' => 'double',
        'main_net_ether_balance' => 'double',
        'ethereum_address' => null,
        'ethereum_public_key' => null,
        'ethereum_private_key' => null,
        'rolling_reserve_percent' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'timestamp' => false,
        'balance' => false,
        'crypto_balance' => false,
        'test_mode' => false,
        'verified' => false,
        'type' => true,
        'currency_id' => true,
        'forex_rate' => false,
        'balance_in_usd' => false,
        'main_net_ether_balance' => false,
        'ethereum_address' => true,
        'ethereum_public_key' => true,
        'ethereum_private_key' => true,
        'rolling_reserve_percent' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'timestamp' => 'timestamp',
        'balance' => 'balance',
        'crypto_balance' => 'cryptoBalance',
        'test_mode' => 'testMode',
        'verified' => 'verified',
        'type' => 'type',
        'currency_id' => 'currencyId',
        'forex_rate' => 'forexRate',
        'balance_in_usd' => 'balanceInUsd',
        'main_net_ether_balance' => 'mainNetEtherBalance',
        'ethereum_address' => 'ethereumAddress',
        'ethereum_public_key' => 'ethereumPublicKey',
        'ethereum_private_key' => 'ethereumPrivateKey',
        'rolling_reserve_percent' => 'rollingReservePercent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'timestamp' => 'setTimestamp',
        'balance' => 'setBalance',
        'crypto_balance' => 'setCryptoBalance',
        'test_mode' => 'setTestMode',
        'verified' => 'setVerified',
        'type' => 'setType',
        'currency_id' => 'setCurrencyId',
        'forex_rate' => 'setForexRate',
        'balance_in_usd' => 'setBalanceInUsd',
        'main_net_ether_balance' => 'setMainNetEtherBalance',
        'ethereum_address' => 'setEthereumAddress',
        'ethereum_public_key' => 'setEthereumPublicKey',
        'ethereum_private_key' => 'setEthereumPrivateKey',
        'rolling_reserve_percent' => 'setRollingReservePercent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'timestamp' => 'getTimestamp',
        'balance' => 'getBalance',
        'crypto_balance' => 'getCryptoBalance',
        'test_mode' => 'getTestMode',
        'verified' => 'getVerified',
        'type' => 'getType',
        'currency_id' => 'getCurrencyId',
        'forex_rate' => 'getForexRate',
        'balance_in_usd' => 'getBalanceInUsd',
        'main_net_ether_balance' => 'getMainNetEtherBalance',
        'ethereum_address' => 'getEthereumAddress',
        'ethereum_public_key' => 'getEthereumPublicKey',
        'ethereum_private_key' => 'getEthereumPrivateKey',
        'rolling_reserve_percent' => 'getRollingReservePercent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('crypto_balance', $data ?? [], null);
        $this->setIfExists('test_mode', $data ?? [], null);
        $this->setIfExists('verified', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('currency_id', $data ?? [], null);
        $this->setIfExists('forex_rate', $data ?? [], null);
        $this->setIfExists('balance_in_usd', $data ?? [], null);
        $this->setIfExists('main_net_ether_balance', $data ?? [], null);
        $this->setIfExists('ethereum_address', $data ?? [], null);
        $this->setIfExists('ethereum_public_key', $data ?? [], null);
        $this->setIfExists('ethereum_private_key', $data ?? [], null);
        $this->setIfExists('rolling_reserve_percent', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets crypto_balance
     *
     * @return float|null
     */
    public function getCryptoBalance()
    {
        return $this->container['crypto_balance'];
    }

    /**
     * Sets crypto_balance
     *
     * @param float|null $crypto_balance crypto_balance
     *
     * @return self
     */
    public function setCryptoBalance($crypto_balance)
    {
        if (is_null($crypto_balance)) {
            throw new \InvalidArgumentException('non-nullable crypto_balance cannot be null');
        }
        $this->container['crypto_balance'] = $crypto_balance;

        return $this;
    }

    /**
     * Gets test_mode
     *
     * @return bool|null
     */
    public function getTestMode()
    {
        return $this->container['test_mode'];
    }

    /**
     * Sets test_mode
     *
     * @param bool|null $test_mode test_mode
     *
     * @return self
     */
    public function setTestMode($test_mode)
    {
        if (is_null($test_mode)) {
            throw new \InvalidArgumentException('non-nullable test_mode cannot be null');
        }
        $this->container['test_mode'] = $test_mode;

        return $this;
    }

    /**
     * Gets verified
     *
     * @return bool|null
     */
    public function getVerified()
    {
        return $this->container['verified'];
    }

    /**
     * Sets verified
     *
     * @param bool|null $verified verified
     *
     * @return self
     */
    public function setVerified($verified)
    {
        if (is_null($verified)) {
            throw new \InvalidArgumentException('non-nullable verified cannot be null');
        }
        $this->container['verified'] = $verified;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string|null
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string|null $currency_id currency_id
     *
     * @return self
     */
    public function setCurrencyId($currency_id)
    {
        if (is_null($currency_id)) {
            array_push($this->openAPINullablesSetToNull, 'currency_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets forex_rate
     *
     * @return float|null
     */
    public function getForexRate()
    {
        return $this->container['forex_rate'];
    }

    /**
     * Sets forex_rate
     *
     * @param float|null $forex_rate forex_rate
     *
     * @return self
     */
    public function setForexRate($forex_rate)
    {
        if (is_null($forex_rate)) {
            throw new \InvalidArgumentException('non-nullable forex_rate cannot be null');
        }
        $this->container['forex_rate'] = $forex_rate;

        return $this;
    }

    /**
     * Gets balance_in_usd
     *
     * @return float|null
     */
    public function getBalanceInUsd()
    {
        return $this->container['balance_in_usd'];
    }

    /**
     * Sets balance_in_usd
     *
     * @param float|null $balance_in_usd balance_in_usd
     *
     * @return self
     */
    public function setBalanceInUsd($balance_in_usd)
    {
        if (is_null($balance_in_usd)) {
            throw new \InvalidArgumentException('non-nullable balance_in_usd cannot be null');
        }
        $this->container['balance_in_usd'] = $balance_in_usd;

        return $this;
    }

    /**
     * Gets main_net_ether_balance
     *
     * @return float|null
     */
    public function getMainNetEtherBalance()
    {
        return $this->container['main_net_ether_balance'];
    }

    /**
     * Sets main_net_ether_balance
     *
     * @param float|null $main_net_ether_balance main_net_ether_balance
     *
     * @return self
     */
    public function setMainNetEtherBalance($main_net_ether_balance)
    {
        if (is_null($main_net_ether_balance)) {
            throw new \InvalidArgumentException('non-nullable main_net_ether_balance cannot be null');
        }
        $this->container['main_net_ether_balance'] = $main_net_ether_balance;

        return $this;
    }

    /**
     * Gets ethereum_address
     *
     * @return string|null
     */
    public function getEthereumAddress()
    {
        return $this->container['ethereum_address'];
    }

    /**
     * Sets ethereum_address
     *
     * @param string|null $ethereum_address ethereum_address
     *
     * @return self
     */
    public function setEthereumAddress($ethereum_address)
    {
        if (is_null($ethereum_address)) {
            array_push($this->openAPINullablesSetToNull, 'ethereum_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ethereum_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ethereum_address'] = $ethereum_address;

        return $this;
    }

    /**
     * Gets ethereum_public_key
     *
     * @return string|null
     */
    public function getEthereumPublicKey()
    {
        return $this->container['ethereum_public_key'];
    }

    /**
     * Sets ethereum_public_key
     *
     * @param string|null $ethereum_public_key ethereum_public_key
     *
     * @return self
     */
    public function setEthereumPublicKey($ethereum_public_key)
    {
        if (is_null($ethereum_public_key)) {
            array_push($this->openAPINullablesSetToNull, 'ethereum_public_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ethereum_public_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ethereum_public_key'] = $ethereum_public_key;

        return $this;
    }

    /**
     * Gets ethereum_private_key
     *
     * @return string|null
     */
    public function getEthereumPrivateKey()
    {
        return $this->container['ethereum_private_key'];
    }

    /**
     * Sets ethereum_private_key
     *
     * @param string|null $ethereum_private_key ethereum_private_key
     *
     * @return self
     */
    public function setEthereumPrivateKey($ethereum_private_key)
    {
        if (is_null($ethereum_private_key)) {
            array_push($this->openAPINullablesSetToNull, 'ethereum_private_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ethereum_private_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ethereum_private_key'] = $ethereum_private_key;

        return $this;
    }

    /**
     * Gets rolling_reserve_percent
     *
     * @return float|null
     */
    public function getRollingReservePercent()
    {
        return $this->container['rolling_reserve_percent'];
    }

    /**
     * Sets rolling_reserve_percent
     *
     * @param float|null $rolling_reserve_percent rolling_reserve_percent
     *
     * @return self
     */
    public function setRollingReservePercent($rolling_reserve_percent)
    {
        if (is_null($rolling_reserve_percent)) {
            throw new \InvalidArgumentException('non-nullable rolling_reserve_percent cannot be null');
        }
        $this->container['rolling_reserve_percent'] = $rolling_reserve_percent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


