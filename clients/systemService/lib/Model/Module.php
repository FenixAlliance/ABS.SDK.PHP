<?php
/**
 * Module
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SystemService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Module Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Module implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Module';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'enable' => 'bool',
        'active' => 'bool',
        'order' => 'int',
        'id' => 'string',
        'name' => 'string',
        'full_name' => 'string',
        'description' => 'string',
        'type' => 'int',
        'configuration' => 'string',
        'author' => 'string',
        'author_url' => 'string',
        'license' => 'string',
        'require_license_acceptance' => 'bool',
        'repository' => 'string',
        'path' => 'string',
        'icon' => 'string',
        'image' => 'string',
        'nu_spec_path' => 'string',
        'manifest' => 'string',
        'documentation' => 'string',
        'website' => 'string',
        'logo' => 'string',
        'swagger_spec' => '\OpenAPI\Client\Model\ISwaggerSpec',
        'swagger_specs' => '\OpenAPI\Client\Model\ISwaggerSpec[]',
        'url' => 'string',
        'assembly_paths' => 'string[]',
        'marked_for_deletion' => 'bool',
        'version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'enable' => null,
        'active' => null,
        'order' => 'int32',
        'id' => null,
        'name' => null,
        'full_name' => null,
        'description' => null,
        'type' => 'int32',
        'configuration' => null,
        'author' => null,
        'author_url' => null,
        'license' => null,
        'require_license_acceptance' => null,
        'repository' => null,
        'path' => null,
        'icon' => null,
        'image' => null,
        'nu_spec_path' => null,
        'manifest' => null,
        'documentation' => null,
        'website' => null,
        'logo' => null,
        'swagger_spec' => null,
        'swagger_specs' => null,
        'url' => null,
        'assembly_paths' => null,
        'marked_for_deletion' => null,
        'version' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'enable' => false,
        'active' => false,
        'order' => false,
        'id' => true,
        'name' => true,
        'full_name' => true,
        'description' => true,
        'type' => false,
        'configuration' => true,
        'author' => true,
        'author_url' => true,
        'license' => true,
        'require_license_acceptance' => true,
        'repository' => true,
        'path' => true,
        'icon' => true,
        'image' => true,
        'nu_spec_path' => true,
        'manifest' => true,
        'documentation' => true,
        'website' => true,
        'logo' => true,
        'swagger_spec' => false,
        'swagger_specs' => true,
        'url' => true,
        'assembly_paths' => true,
        'marked_for_deletion' => false,
        'version' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enable' => 'enable',
        'active' => 'active',
        'order' => 'order',
        'id' => 'id',
        'name' => 'name',
        'full_name' => 'fullName',
        'description' => 'description',
        'type' => 'type',
        'configuration' => 'configuration',
        'author' => 'author',
        'author_url' => 'authorUrl',
        'license' => 'license',
        'require_license_acceptance' => 'requireLicenseAcceptance',
        'repository' => 'repository',
        'path' => 'path',
        'icon' => 'icon',
        'image' => 'image',
        'nu_spec_path' => 'nuSpecPath',
        'manifest' => 'manifest',
        'documentation' => 'documentation',
        'website' => 'website',
        'logo' => 'logo',
        'swagger_spec' => 'swaggerSpec',
        'swagger_specs' => 'swaggerSpecs',
        'url' => 'url',
        'assembly_paths' => 'assemblyPaths',
        'marked_for_deletion' => 'markedForDeletion',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enable' => 'setEnable',
        'active' => 'setActive',
        'order' => 'setOrder',
        'id' => 'setId',
        'name' => 'setName',
        'full_name' => 'setFullName',
        'description' => 'setDescription',
        'type' => 'setType',
        'configuration' => 'setConfiguration',
        'author' => 'setAuthor',
        'author_url' => 'setAuthorUrl',
        'license' => 'setLicense',
        'require_license_acceptance' => 'setRequireLicenseAcceptance',
        'repository' => 'setRepository',
        'path' => 'setPath',
        'icon' => 'setIcon',
        'image' => 'setImage',
        'nu_spec_path' => 'setNuSpecPath',
        'manifest' => 'setManifest',
        'documentation' => 'setDocumentation',
        'website' => 'setWebsite',
        'logo' => 'setLogo',
        'swagger_spec' => 'setSwaggerSpec',
        'swagger_specs' => 'setSwaggerSpecs',
        'url' => 'setUrl',
        'assembly_paths' => 'setAssemblyPaths',
        'marked_for_deletion' => 'setMarkedForDeletion',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enable' => 'getEnable',
        'active' => 'getActive',
        'order' => 'getOrder',
        'id' => 'getId',
        'name' => 'getName',
        'full_name' => 'getFullName',
        'description' => 'getDescription',
        'type' => 'getType',
        'configuration' => 'getConfiguration',
        'author' => 'getAuthor',
        'author_url' => 'getAuthorUrl',
        'license' => 'getLicense',
        'require_license_acceptance' => 'getRequireLicenseAcceptance',
        'repository' => 'getRepository',
        'path' => 'getPath',
        'icon' => 'getIcon',
        'image' => 'getImage',
        'nu_spec_path' => 'getNuSpecPath',
        'manifest' => 'getManifest',
        'documentation' => 'getDocumentation',
        'website' => 'getWebsite',
        'logo' => 'getLogo',
        'swagger_spec' => 'getSwaggerSpec',
        'swagger_specs' => 'getSwaggerSpecs',
        'url' => 'getUrl',
        'assembly_paths' => 'getAssemblyPaths',
        'marked_for_deletion' => 'getMarkedForDeletion',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_NUMBER_0 = 0;
    public const TYPE_NUMBER_1 = 1;
    public const TYPE_NUMBER_2 = 2;
    public const TYPE_NUMBER_3 = 3;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_NUMBER_0,
            self::TYPE_NUMBER_1,
            self::TYPE_NUMBER_2,
            self::TYPE_NUMBER_3,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('enable', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('full_name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('configuration', $data ?? [], null);
        $this->setIfExists('author', $data ?? [], null);
        $this->setIfExists('author_url', $data ?? [], null);
        $this->setIfExists('license', $data ?? [], null);
        $this->setIfExists('require_license_acceptance', $data ?? [], null);
        $this->setIfExists('repository', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('icon', $data ?? [], null);
        $this->setIfExists('image', $data ?? [], null);
        $this->setIfExists('nu_spec_path', $data ?? [], null);
        $this->setIfExists('manifest', $data ?? [], null);
        $this->setIfExists('documentation', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
        $this->setIfExists('logo', $data ?? [], null);
        $this->setIfExists('swagger_spec', $data ?? [], null);
        $this->setIfExists('swagger_specs', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('assembly_paths', $data ?? [], null);
        $this->setIfExists('marked_for_deletion', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enable
     *
     * @return bool|null
     */
    public function getEnable()
    {
        return $this->container['enable'];
    }

    /**
     * Sets enable
     *
     * @param bool|null $enable enable
     *
     * @return self
     */
    public function setEnable($enable)
    {
        if (is_null($enable)) {
            throw new \InvalidArgumentException('non-nullable enable cannot be null');
        }
        $this->container['enable'] = $enable;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string|null
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string|null $full_name full_name
     *
     * @return self
     */
    public function setFullName($full_name)
    {
        if (is_null($full_name)) {
            array_push($this->openAPINullablesSetToNull, 'full_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('full_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets configuration
     *
     * @return string|null
     */
    public function getConfiguration()
    {
        return $this->container['configuration'];
    }

    /**
     * Sets configuration
     *
     * @param string|null $configuration configuration
     *
     * @return self
     */
    public function setConfiguration($configuration)
    {
        if (is_null($configuration)) {
            array_push($this->openAPINullablesSetToNull, 'configuration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('configuration', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['configuration'] = $configuration;

        return $this;
    }

    /**
     * Gets author
     *
     * @return string|null
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string|null $author author
     *
     * @return self
     */
    public function setAuthor($author)
    {
        if (is_null($author)) {
            array_push($this->openAPINullablesSetToNull, 'author');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('author', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets author_url
     *
     * @return string|null
     */
    public function getAuthorUrl()
    {
        return $this->container['author_url'];
    }

    /**
     * Sets author_url
     *
     * @param string|null $author_url author_url
     *
     * @return self
     */
    public function setAuthorUrl($author_url)
    {
        if (is_null($author_url)) {
            array_push($this->openAPINullablesSetToNull, 'author_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('author_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['author_url'] = $author_url;

        return $this;
    }

    /**
     * Gets license
     *
     * @return string|null
     */
    public function getLicense()
    {
        return $this->container['license'];
    }

    /**
     * Sets license
     *
     * @param string|null $license license
     *
     * @return self
     */
    public function setLicense($license)
    {
        if (is_null($license)) {
            array_push($this->openAPINullablesSetToNull, 'license');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('license', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['license'] = $license;

        return $this;
    }

    /**
     * Gets require_license_acceptance
     *
     * @return bool|null
     */
    public function getRequireLicenseAcceptance()
    {
        return $this->container['require_license_acceptance'];
    }

    /**
     * Sets require_license_acceptance
     *
     * @param bool|null $require_license_acceptance require_license_acceptance
     *
     * @return self
     */
    public function setRequireLicenseAcceptance($require_license_acceptance)
    {
        if (is_null($require_license_acceptance)) {
            array_push($this->openAPINullablesSetToNull, 'require_license_acceptance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('require_license_acceptance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['require_license_acceptance'] = $require_license_acceptance;

        return $this;
    }

    /**
     * Gets repository
     *
     * @return string|null
     */
    public function getRepository()
    {
        return $this->container['repository'];
    }

    /**
     * Sets repository
     *
     * @param string|null $repository repository
     *
     * @return self
     */
    public function setRepository($repository)
    {
        if (is_null($repository)) {
            array_push($this->openAPINullablesSetToNull, 'repository');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('repository', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['repository'] = $repository;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path path
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            array_push($this->openAPINullablesSetToNull, 'path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string|null
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string|null $icon icon
     *
     * @return self
     */
    public function setIcon($icon)
    {
        if (is_null($icon)) {
            array_push($this->openAPINullablesSetToNull, 'icon');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('icon', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string|null $image image
     *
     * @return self
     */
    public function setImage($image)
    {
        if (is_null($image)) {
            array_push($this->openAPINullablesSetToNull, 'image');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets nu_spec_path
     *
     * @return string|null
     */
    public function getNuSpecPath()
    {
        return $this->container['nu_spec_path'];
    }

    /**
     * Sets nu_spec_path
     *
     * @param string|null $nu_spec_path nu_spec_path
     *
     * @return self
     */
    public function setNuSpecPath($nu_spec_path)
    {
        if (is_null($nu_spec_path)) {
            array_push($this->openAPINullablesSetToNull, 'nu_spec_path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nu_spec_path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nu_spec_path'] = $nu_spec_path;

        return $this;
    }

    /**
     * Gets manifest
     *
     * @return string|null
     */
    public function getManifest()
    {
        return $this->container['manifest'];
    }

    /**
     * Sets manifest
     *
     * @param string|null $manifest manifest
     *
     * @return self
     */
    public function setManifest($manifest)
    {
        if (is_null($manifest)) {
            array_push($this->openAPINullablesSetToNull, 'manifest');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('manifest', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['manifest'] = $manifest;

        return $this;
    }

    /**
     * Gets documentation
     *
     * @return string|null
     */
    public function getDocumentation()
    {
        return $this->container['documentation'];
    }

    /**
     * Sets documentation
     *
     * @param string|null $documentation documentation
     *
     * @return self
     */
    public function setDocumentation($documentation)
    {
        if (is_null($documentation)) {
            array_push($this->openAPINullablesSetToNull, 'documentation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('documentation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['documentation'] = $documentation;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website website
     *
     * @return self
     */
    public function setWebsite($website)
    {
        if (is_null($website)) {
            array_push($this->openAPINullablesSetToNull, 'website');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('website', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string|null
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string|null $logo logo
     *
     * @return self
     */
    public function setLogo($logo)
    {
        if (is_null($logo)) {
            array_push($this->openAPINullablesSetToNull, 'logo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets swagger_spec
     *
     * @return \OpenAPI\Client\Model\ISwaggerSpec|null
     */
    public function getSwaggerSpec()
    {
        return $this->container['swagger_spec'];
    }

    /**
     * Sets swagger_spec
     *
     * @param \OpenAPI\Client\Model\ISwaggerSpec|null $swagger_spec swagger_spec
     *
     * @return self
     */
    public function setSwaggerSpec($swagger_spec)
    {
        if (is_null($swagger_spec)) {
            throw new \InvalidArgumentException('non-nullable swagger_spec cannot be null');
        }
        $this->container['swagger_spec'] = $swagger_spec;

        return $this;
    }

    /**
     * Gets swagger_specs
     *
     * @return \OpenAPI\Client\Model\ISwaggerSpec[]|null
     */
    public function getSwaggerSpecs()
    {
        return $this->container['swagger_specs'];
    }

    /**
     * Sets swagger_specs
     *
     * @param \OpenAPI\Client\Model\ISwaggerSpec[]|null $swagger_specs swagger_specs
     *
     * @return self
     */
    public function setSwaggerSpecs($swagger_specs)
    {
        if (is_null($swagger_specs)) {
            array_push($this->openAPINullablesSetToNull, 'swagger_specs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('swagger_specs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['swagger_specs'] = $swagger_specs;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            array_push($this->openAPINullablesSetToNull, 'url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets assembly_paths
     *
     * @return string[]|null
     */
    public function getAssemblyPaths()
    {
        return $this->container['assembly_paths'];
    }

    /**
     * Sets assembly_paths
     *
     * @param string[]|null $assembly_paths assembly_paths
     *
     * @return self
     */
    public function setAssemblyPaths($assembly_paths)
    {
        if (is_null($assembly_paths)) {
            array_push($this->openAPINullablesSetToNull, 'assembly_paths');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assembly_paths', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['assembly_paths'] = $assembly_paths;

        return $this;
    }

    /**
     * Gets marked_for_deletion
     *
     * @return bool|null
     */
    public function getMarkedForDeletion()
    {
        return $this->container['marked_for_deletion'];
    }

    /**
     * Sets marked_for_deletion
     *
     * @param bool|null $marked_for_deletion marked_for_deletion
     *
     * @return self
     */
    public function setMarkedForDeletion($marked_for_deletion)
    {
        if (is_null($marked_for_deletion)) {
            throw new \InvalidArgumentException('non-nullable marked_for_deletion cannot be null');
        }
        $this->container['marked_for_deletion'] = $marked_for_deletion;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            array_push($this->openAPINullablesSetToNull, 'version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


