<?php
/**
 * RolesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SecurityService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * RolesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RolesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV2SecurityServiceRolesGet' => [
            'application/json',
        ],
        'apiV2SecurityServiceRolesPost' => [
            'application/json',
            'application/xml',
        ],
        'apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDelete' => [
            'application/json',
        ],
        'apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPost' => [
            'application/json',
        ],
        'apiV2SecurityServiceRolesSecurityRoleIdDelete' => [
            'application/json',
        ],
        'apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDelete' => [
            'application/json',
        ],
        'apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPost' => [
            'application/json',
        ],
        'apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGet' => [
            'application/json',
        ],
        'apiV2SecurityServiceRolesSecurityRoleIdGet' => [
            'application/json',
        ],
        'apiV2SecurityServiceRolesSecurityRoleIdPermissionsGet' => [
            'application/json',
        ],
        'apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDelete' => [
            'application/json',
        ],
        'apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPost' => [
            'application/json',
        ],
        'apiV2SecurityServiceRolesSecurityRoleIdPut' => [
            'application/json',
            'application/xml',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV2SecurityServiceRolesGet
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $api_version api_version (optional)
     * @param  string $x_api_version x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\SecurityRoleDtoListEnvelope
     */
    public function apiV2SecurityServiceRolesGet($tenant_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesGet'][0])
    {
        list($response) = $this->apiV2SecurityServiceRolesGetWithHttpInfo($tenant_id, $api_version, $x_api_version, $contentType);
        return $response;
    }

    /**
     * Operation apiV2SecurityServiceRolesGetWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\SecurityRoleDtoListEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SecurityServiceRolesGetWithHttpInfo($tenant_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesGet'][0])
    {
        $request = $this->apiV2SecurityServiceRolesGetRequest($tenant_id, $api_version, $x_api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\SecurityRoleDtoListEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SecurityRoleDtoListEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SecurityRoleDtoListEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\SecurityRoleDtoListEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SecurityRoleDtoListEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SecurityServiceRolesGetAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SecurityServiceRolesGetAsync($tenant_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesGet'][0])
    {
        return $this->apiV2SecurityServiceRolesGetAsyncWithHttpInfo($tenant_id, $api_version, $x_api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SecurityServiceRolesGetAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SecurityServiceRolesGetAsyncWithHttpInfo($tenant_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SecurityRoleDtoListEnvelope';
        $request = $this->apiV2SecurityServiceRolesGetRequest($tenant_id, $api_version, $x_api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SecurityServiceRolesGet'
     *
     * @param  string $tenant_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SecurityServiceRolesGetRequest($tenant_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesGet'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2SecurityServiceRolesGet'
            );
        }




        $resourcePath = '/api/v2/SecurityService/Roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $api_version,
            'api-version', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_version !== null) {
            $headerParams['x-api-version'] = ObjectSerializer::toHeaderValue($x_api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SecurityServiceRolesPost
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $api_version api_version (optional)
     * @param  string $x_api_version x_api_version (optional)
     * @param  \OpenAPI\Client\Model\SecurityRoleCreateDto $security_role_create_dto security_role_create_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope
     */
    public function apiV2SecurityServiceRolesPost($tenant_id, $api_version = null, $x_api_version = null, $security_role_create_dto = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesPost'][0])
    {
        list($response) = $this->apiV2SecurityServiceRolesPostWithHttpInfo($tenant_id, $api_version, $x_api_version, $security_role_create_dto, $contentType);
        return $response;
    }

    /**
     * Operation apiV2SecurityServiceRolesPostWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  \OpenAPI\Client\Model\SecurityRoleCreateDto $security_role_create_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SecurityServiceRolesPostWithHttpInfo($tenant_id, $api_version = null, $x_api_version = null, $security_role_create_dto = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesPost'][0])
    {
        $request = $this->apiV2SecurityServiceRolesPostRequest($tenant_id, $api_version, $x_api_version, $security_role_create_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\OpenAPI\Client\Model\EmptyEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmptyEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmptyEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmptyEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SecurityServiceRolesPostAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  \OpenAPI\Client\Model\SecurityRoleCreateDto $security_role_create_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SecurityServiceRolesPostAsync($tenant_id, $api_version = null, $x_api_version = null, $security_role_create_dto = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesPost'][0])
    {
        return $this->apiV2SecurityServiceRolesPostAsyncWithHttpInfo($tenant_id, $api_version, $x_api_version, $security_role_create_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SecurityServiceRolesPostAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  \OpenAPI\Client\Model\SecurityRoleCreateDto $security_role_create_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SecurityServiceRolesPostAsyncWithHttpInfo($tenant_id, $api_version = null, $x_api_version = null, $security_role_create_dto = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
        $request = $this->apiV2SecurityServiceRolesPostRequest($tenant_id, $api_version, $x_api_version, $security_role_create_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SecurityServiceRolesPost'
     *
     * @param  string $tenant_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  \OpenAPI\Client\Model\SecurityRoleCreateDto $security_role_create_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SecurityServiceRolesPostRequest($tenant_id, $api_version = null, $x_api_version = null, $security_role_create_dto = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesPost'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2SecurityServiceRolesPost'
            );
        }





        $resourcePath = '/api/v2/SecurityService/Roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $api_version,
            'api-version', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_version !== null) {
            $headerParams['x-api-version'] = ObjectSerializer::toHeaderValue($x_api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($security_role_create_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($security_role_create_dto));
            } else {
                $httpBody = $security_role_create_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDelete
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $security_role_id security_role_id (required)
     * @param  string $application_id application_id (required)
     * @param  string $api_version api_version (optional)
     * @param  string $x_api_version x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDelete($tenant_id, $security_role_id, $application_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDelete'][0])
    {
        list($response) = $this->apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDeleteWithHttpInfo($tenant_id, $security_role_id, $application_id, $api_version, $x_api_version, $contentType);
        return $response;
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDeleteWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $application_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDeleteWithHttpInfo($tenant_id, $security_role_id, $application_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDelete'][0])
    {
        $request = $this->apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDeleteRequest($tenant_id, $security_role_id, $application_id, $api_version, $x_api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\EmptyEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmptyEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmptyEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmptyEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDeleteAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $application_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDeleteAsync($tenant_id, $security_role_id, $application_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDelete'][0])
    {
        return $this->apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDeleteAsyncWithHttpInfo($tenant_id, $security_role_id, $application_id, $api_version, $x_api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDeleteAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $application_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDeleteAsyncWithHttpInfo($tenant_id, $security_role_id, $application_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDelete'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
        $request = $this->apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDeleteRequest($tenant_id, $security_role_id, $application_id, $api_version, $x_api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDelete'
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $application_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDeleteRequest($tenant_id, $security_role_id, $application_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDelete'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDelete'
            );
        }

        // verify the required parameter 'security_role_id' is set
        if ($security_role_id === null || (is_array($security_role_id) && count($security_role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $security_role_id when calling apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDelete'
            );
        }

        // verify the required parameter 'application_id' is set
        if ($application_id === null || (is_array($application_id) && count($application_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDelete'
            );
        }




        $resourcePath = '/api/v2/SecurityService/Roles/{securityRoleId}/Applications/{applicationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $api_version,
            'api-version', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_version !== null) {
            $headerParams['x-api-version'] = ObjectSerializer::toHeaderValue($x_api_version);
        }

        // path params
        if ($security_role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'securityRoleId' . '}',
                ObjectSerializer::toPathValue($security_role_id),
                $resourcePath
            );
        }
        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPost
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $security_role_id security_role_id (required)
     * @param  string $application_id application_id (required)
     * @param  string $api_version api_version (optional)
     * @param  string $x_api_version x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPost($tenant_id, $security_role_id, $application_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPost'][0])
    {
        list($response) = $this->apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPostWithHttpInfo($tenant_id, $security_role_id, $application_id, $api_version, $x_api_version, $contentType);
        return $response;
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPostWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $application_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPostWithHttpInfo($tenant_id, $security_role_id, $application_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPost'][0])
    {
        $request = $this->apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPostRequest($tenant_id, $security_role_id, $application_id, $api_version, $x_api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\EmptyEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmptyEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmptyEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmptyEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPostAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $application_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPostAsync($tenant_id, $security_role_id, $application_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPost'][0])
    {
        return $this->apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPostAsyncWithHttpInfo($tenant_id, $security_role_id, $application_id, $api_version, $x_api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPostAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $application_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPostAsyncWithHttpInfo($tenant_id, $security_role_id, $application_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
        $request = $this->apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPostRequest($tenant_id, $security_role_id, $application_id, $api_version, $x_api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPost'
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $application_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPostRequest($tenant_id, $security_role_id, $application_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPost'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPost'
            );
        }

        // verify the required parameter 'security_role_id' is set
        if ($security_role_id === null || (is_array($security_role_id) && count($security_role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $security_role_id when calling apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPost'
            );
        }

        // verify the required parameter 'application_id' is set
        if ($application_id === null || (is_array($application_id) && count($application_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling apiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPost'
            );
        }




        $resourcePath = '/api/v2/SecurityService/Roles/{securityRoleId}/Applications/{applicationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $api_version,
            'api-version', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_version !== null) {
            $headerParams['x-api-version'] = ObjectSerializer::toHeaderValue($x_api_version);
        }

        // path params
        if ($security_role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'securityRoleId' . '}',
                ObjectSerializer::toPathValue($security_role_id),
                $resourcePath
            );
        }
        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdDelete
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $security_role_id security_role_id (required)
     * @param  string $api_version api_version (optional)
     * @param  string $x_api_version x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdDelete($tenant_id, $security_role_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdDelete'][0])
    {
        list($response) = $this->apiV2SecurityServiceRolesSecurityRoleIdDeleteWithHttpInfo($tenant_id, $security_role_id, $api_version, $x_api_version, $contentType);
        return $response;
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdDeleteWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdDeleteWithHttpInfo($tenant_id, $security_role_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdDelete'][0])
    {
        $request = $this->apiV2SecurityServiceRolesSecurityRoleIdDeleteRequest($tenant_id, $security_role_id, $api_version, $x_api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\EmptyEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmptyEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmptyEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmptyEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdDeleteAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdDeleteAsync($tenant_id, $security_role_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdDelete'][0])
    {
        return $this->apiV2SecurityServiceRolesSecurityRoleIdDeleteAsyncWithHttpInfo($tenant_id, $security_role_id, $api_version, $x_api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdDeleteAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdDeleteAsyncWithHttpInfo($tenant_id, $security_role_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdDelete'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
        $request = $this->apiV2SecurityServiceRolesSecurityRoleIdDeleteRequest($tenant_id, $security_role_id, $api_version, $x_api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SecurityServiceRolesSecurityRoleIdDelete'
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdDeleteRequest($tenant_id, $security_role_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdDelete'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2SecurityServiceRolesSecurityRoleIdDelete'
            );
        }

        // verify the required parameter 'security_role_id' is set
        if ($security_role_id === null || (is_array($security_role_id) && count($security_role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $security_role_id when calling apiV2SecurityServiceRolesSecurityRoleIdDelete'
            );
        }




        $resourcePath = '/api/v2/SecurityService/Roles/{securityRoleId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $api_version,
            'api-version', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_version !== null) {
            $headerParams['x-api-version'] = ObjectSerializer::toHeaderValue($x_api_version);
        }

        // path params
        if ($security_role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'securityRoleId' . '}',
                ObjectSerializer::toPathValue($security_role_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDelete
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $security_role_id security_role_id (required)
     * @param  string $enrollment_id enrollment_id (required)
     * @param  string $api_version api_version (optional)
     * @param  string $x_api_version x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDelete($tenant_id, $security_role_id, $enrollment_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDelete'][0])
    {
        list($response) = $this->apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDeleteWithHttpInfo($tenant_id, $security_role_id, $enrollment_id, $api_version, $x_api_version, $contentType);
        return $response;
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDeleteWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $enrollment_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDeleteWithHttpInfo($tenant_id, $security_role_id, $enrollment_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDelete'][0])
    {
        $request = $this->apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDeleteRequest($tenant_id, $security_role_id, $enrollment_id, $api_version, $x_api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\EmptyEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmptyEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmptyEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmptyEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDeleteAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $enrollment_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDeleteAsync($tenant_id, $security_role_id, $enrollment_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDelete'][0])
    {
        return $this->apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDeleteAsyncWithHttpInfo($tenant_id, $security_role_id, $enrollment_id, $api_version, $x_api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDeleteAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $enrollment_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDeleteAsyncWithHttpInfo($tenant_id, $security_role_id, $enrollment_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDelete'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
        $request = $this->apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDeleteRequest($tenant_id, $security_role_id, $enrollment_id, $api_version, $x_api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDelete'
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $enrollment_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDeleteRequest($tenant_id, $security_role_id, $enrollment_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDelete'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDelete'
            );
        }

        // verify the required parameter 'security_role_id' is set
        if ($security_role_id === null || (is_array($security_role_id) && count($security_role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $security_role_id when calling apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDelete'
            );
        }

        // verify the required parameter 'enrollment_id' is set
        if ($enrollment_id === null || (is_array($enrollment_id) && count($enrollment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enrollment_id when calling apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDelete'
            );
        }




        $resourcePath = '/api/v2/SecurityService/Roles/{securityRoleId}/Enrollments/{enrollmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $api_version,
            'api-version', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_version !== null) {
            $headerParams['x-api-version'] = ObjectSerializer::toHeaderValue($x_api_version);
        }

        // path params
        if ($security_role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'securityRoleId' . '}',
                ObjectSerializer::toPathValue($security_role_id),
                $resourcePath
            );
        }
        // path params
        if ($enrollment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'enrollmentId' . '}',
                ObjectSerializer::toPathValue($enrollment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPost
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $security_role_id security_role_id (required)
     * @param  string $enrollment_id enrollment_id (required)
     * @param  string $api_version api_version (optional)
     * @param  string $x_api_version x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPost($tenant_id, $security_role_id, $enrollment_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPost'][0])
    {
        list($response) = $this->apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPostWithHttpInfo($tenant_id, $security_role_id, $enrollment_id, $api_version, $x_api_version, $contentType);
        return $response;
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPostWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $enrollment_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPostWithHttpInfo($tenant_id, $security_role_id, $enrollment_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPost'][0])
    {
        $request = $this->apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPostRequest($tenant_id, $security_role_id, $enrollment_id, $api_version, $x_api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\EmptyEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmptyEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmptyEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmptyEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPostAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $enrollment_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPostAsync($tenant_id, $security_role_id, $enrollment_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPost'][0])
    {
        return $this->apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPostAsyncWithHttpInfo($tenant_id, $security_role_id, $enrollment_id, $api_version, $x_api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPostAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $enrollment_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPostAsyncWithHttpInfo($tenant_id, $security_role_id, $enrollment_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
        $request = $this->apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPostRequest($tenant_id, $security_role_id, $enrollment_id, $api_version, $x_api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPost'
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $enrollment_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPostRequest($tenant_id, $security_role_id, $enrollment_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPost'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPost'
            );
        }

        // verify the required parameter 'security_role_id' is set
        if ($security_role_id === null || (is_array($security_role_id) && count($security_role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $security_role_id when calling apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPost'
            );
        }

        // verify the required parameter 'enrollment_id' is set
        if ($enrollment_id === null || (is_array($enrollment_id) && count($enrollment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enrollment_id when calling apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPost'
            );
        }




        $resourcePath = '/api/v2/SecurityService/Roles/{securityRoleId}/Enrollments/{enrollmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $api_version,
            'api-version', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_version !== null) {
            $headerParams['x-api-version'] = ObjectSerializer::toHeaderValue($x_api_version);
        }

        // path params
        if ($security_role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'securityRoleId' . '}',
                ObjectSerializer::toPathValue($security_role_id),
                $resourcePath
            );
        }
        // path params
        if ($enrollment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'enrollmentId' . '}',
                ObjectSerializer::toPathValue($enrollment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGet
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $security_role_id security_role_id (required)
     * @param  string $api_version api_version (optional)
     * @param  string $x_api_version x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\TenantEnrolmentDtoListEnvelope
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGet($tenant_id, $security_role_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGet'][0])
    {
        list($response) = $this->apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGetWithHttpInfo($tenant_id, $security_role_id, $api_version, $x_api_version, $contentType);
        return $response;
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGetWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\TenantEnrolmentDtoListEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGetWithHttpInfo($tenant_id, $security_role_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGet'][0])
    {
        $request = $this->apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGetRequest($tenant_id, $security_role_id, $api_version, $x_api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\TenantEnrolmentDtoListEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TenantEnrolmentDtoListEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TenantEnrolmentDtoListEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\TenantEnrolmentDtoListEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TenantEnrolmentDtoListEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGetAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGetAsync($tenant_id, $security_role_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGet'][0])
    {
        return $this->apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGetAsyncWithHttpInfo($tenant_id, $security_role_id, $api_version, $x_api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGetAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGetAsyncWithHttpInfo($tenant_id, $security_role_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TenantEnrolmentDtoListEnvelope';
        $request = $this->apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGetRequest($tenant_id, $security_role_id, $api_version, $x_api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGet'
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGetRequest($tenant_id, $security_role_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGet'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGet'
            );
        }

        // verify the required parameter 'security_role_id' is set
        if ($security_role_id === null || (is_array($security_role_id) && count($security_role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $security_role_id when calling apiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGet'
            );
        }




        $resourcePath = '/api/v2/SecurityService/Roles/{securityRoleId}/Enrollments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $api_version,
            'api-version', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_version !== null) {
            $headerParams['x-api-version'] = ObjectSerializer::toHeaderValue($x_api_version);
        }

        // path params
        if ($security_role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'securityRoleId' . '}',
                ObjectSerializer::toPathValue($security_role_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdGet
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $security_role_id security_role_id (required)
     * @param  string $api_version api_version (optional)
     * @param  string $x_api_version x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\SecurityRoleDtoListEnvelope
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdGet($tenant_id, $security_role_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdGet'][0])
    {
        list($response) = $this->apiV2SecurityServiceRolesSecurityRoleIdGetWithHttpInfo($tenant_id, $security_role_id, $api_version, $x_api_version, $contentType);
        return $response;
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdGetWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\SecurityRoleDtoListEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdGetWithHttpInfo($tenant_id, $security_role_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdGet'][0])
    {
        $request = $this->apiV2SecurityServiceRolesSecurityRoleIdGetRequest($tenant_id, $security_role_id, $api_version, $x_api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\SecurityRoleDtoListEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SecurityRoleDtoListEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SecurityRoleDtoListEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\SecurityRoleDtoListEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SecurityRoleDtoListEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdGetAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdGetAsync($tenant_id, $security_role_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdGet'][0])
    {
        return $this->apiV2SecurityServiceRolesSecurityRoleIdGetAsyncWithHttpInfo($tenant_id, $security_role_id, $api_version, $x_api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdGetAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdGetAsyncWithHttpInfo($tenant_id, $security_role_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SecurityRoleDtoListEnvelope';
        $request = $this->apiV2SecurityServiceRolesSecurityRoleIdGetRequest($tenant_id, $security_role_id, $api_version, $x_api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SecurityServiceRolesSecurityRoleIdGet'
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdGetRequest($tenant_id, $security_role_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdGet'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2SecurityServiceRolesSecurityRoleIdGet'
            );
        }

        // verify the required parameter 'security_role_id' is set
        if ($security_role_id === null || (is_array($security_role_id) && count($security_role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $security_role_id when calling apiV2SecurityServiceRolesSecurityRoleIdGet'
            );
        }




        $resourcePath = '/api/v2/SecurityService/Roles/{securityRoleId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $api_version,
            'api-version', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_version !== null) {
            $headerParams['x-api-version'] = ObjectSerializer::toHeaderValue($x_api_version);
        }

        // path params
        if ($security_role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'securityRoleId' . '}',
                ObjectSerializer::toPathValue($security_role_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdPermissionsGet
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $security_role_id security_role_id (required)
     * @param  string $api_version api_version (optional)
     * @param  string $x_api_version x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\SecurityPermissionDtoListEnvelope
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdPermissionsGet($tenant_id, $security_role_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsGet'][0])
    {
        list($response) = $this->apiV2SecurityServiceRolesSecurityRoleIdPermissionsGetWithHttpInfo($tenant_id, $security_role_id, $api_version, $x_api_version, $contentType);
        return $response;
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdPermissionsGetWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\SecurityPermissionDtoListEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdPermissionsGetWithHttpInfo($tenant_id, $security_role_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsGet'][0])
    {
        $request = $this->apiV2SecurityServiceRolesSecurityRoleIdPermissionsGetRequest($tenant_id, $security_role_id, $api_version, $x_api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\SecurityPermissionDtoListEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SecurityPermissionDtoListEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SecurityPermissionDtoListEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\SecurityPermissionDtoListEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SecurityPermissionDtoListEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdPermissionsGetAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdPermissionsGetAsync($tenant_id, $security_role_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsGet'][0])
    {
        return $this->apiV2SecurityServiceRolesSecurityRoleIdPermissionsGetAsyncWithHttpInfo($tenant_id, $security_role_id, $api_version, $x_api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdPermissionsGetAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdPermissionsGetAsyncWithHttpInfo($tenant_id, $security_role_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SecurityPermissionDtoListEnvelope';
        $request = $this->apiV2SecurityServiceRolesSecurityRoleIdPermissionsGetRequest($tenant_id, $security_role_id, $api_version, $x_api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SecurityServiceRolesSecurityRoleIdPermissionsGet'
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdPermissionsGetRequest($tenant_id, $security_role_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsGet'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2SecurityServiceRolesSecurityRoleIdPermissionsGet'
            );
        }

        // verify the required parameter 'security_role_id' is set
        if ($security_role_id === null || (is_array($security_role_id) && count($security_role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $security_role_id when calling apiV2SecurityServiceRolesSecurityRoleIdPermissionsGet'
            );
        }




        $resourcePath = '/api/v2/SecurityService/Roles/{securityRoleId}/Permissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $api_version,
            'api-version', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_version !== null) {
            $headerParams['x-api-version'] = ObjectSerializer::toHeaderValue($x_api_version);
        }

        // path params
        if ($security_role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'securityRoleId' . '}',
                ObjectSerializer::toPathValue($security_role_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDelete
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $security_role_id security_role_id (required)
     * @param  string $security_permission_id security_permission_id (required)
     * @param  string $api_version api_version (optional)
     * @param  string $x_api_version x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDelete($tenant_id, $security_role_id, $security_permission_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDelete'][0])
    {
        list($response) = $this->apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDeleteWithHttpInfo($tenant_id, $security_role_id, $security_permission_id, $api_version, $x_api_version, $contentType);
        return $response;
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDeleteWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $security_permission_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDeleteWithHttpInfo($tenant_id, $security_role_id, $security_permission_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDelete'][0])
    {
        $request = $this->apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDeleteRequest($tenant_id, $security_role_id, $security_permission_id, $api_version, $x_api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\EmptyEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmptyEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmptyEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmptyEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDeleteAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $security_permission_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDeleteAsync($tenant_id, $security_role_id, $security_permission_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDelete'][0])
    {
        return $this->apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDeleteAsyncWithHttpInfo($tenant_id, $security_role_id, $security_permission_id, $api_version, $x_api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDeleteAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $security_permission_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDeleteAsyncWithHttpInfo($tenant_id, $security_role_id, $security_permission_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDelete'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
        $request = $this->apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDeleteRequest($tenant_id, $security_role_id, $security_permission_id, $api_version, $x_api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDelete'
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $security_permission_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDeleteRequest($tenant_id, $security_role_id, $security_permission_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDelete'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDelete'
            );
        }

        // verify the required parameter 'security_role_id' is set
        if ($security_role_id === null || (is_array($security_role_id) && count($security_role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $security_role_id when calling apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDelete'
            );
        }

        // verify the required parameter 'security_permission_id' is set
        if ($security_permission_id === null || (is_array($security_permission_id) && count($security_permission_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $security_permission_id when calling apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDelete'
            );
        }




        $resourcePath = '/api/v2/SecurityService/Roles/{securityRoleId}/Permissions/{securityPermissionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $api_version,
            'api-version', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_version !== null) {
            $headerParams['x-api-version'] = ObjectSerializer::toHeaderValue($x_api_version);
        }

        // path params
        if ($security_role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'securityRoleId' . '}',
                ObjectSerializer::toPathValue($security_role_id),
                $resourcePath
            );
        }
        // path params
        if ($security_permission_id !== null) {
            $resourcePath = str_replace(
                '{' . 'securityPermissionId' . '}',
                ObjectSerializer::toPathValue($security_permission_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPost
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $security_role_id security_role_id (required)
     * @param  string $security_permission_id security_permission_id (required)
     * @param  string $api_version api_version (optional)
     * @param  string $x_api_version x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPost($tenant_id, $security_role_id, $security_permission_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPost'][0])
    {
        list($response) = $this->apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPostWithHttpInfo($tenant_id, $security_role_id, $security_permission_id, $api_version, $x_api_version, $contentType);
        return $response;
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPostWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $security_permission_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPostWithHttpInfo($tenant_id, $security_role_id, $security_permission_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPost'][0])
    {
        $request = $this->apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPostRequest($tenant_id, $security_role_id, $security_permission_id, $api_version, $x_api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\EmptyEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmptyEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmptyEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmptyEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPostAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $security_permission_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPostAsync($tenant_id, $security_role_id, $security_permission_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPost'][0])
    {
        return $this->apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPostAsyncWithHttpInfo($tenant_id, $security_role_id, $security_permission_id, $api_version, $x_api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPostAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $security_permission_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPostAsyncWithHttpInfo($tenant_id, $security_role_id, $security_permission_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
        $request = $this->apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPostRequest($tenant_id, $security_role_id, $security_permission_id, $api_version, $x_api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPost'
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $security_permission_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPostRequest($tenant_id, $security_role_id, $security_permission_id, $api_version = null, $x_api_version = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPost'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPost'
            );
        }

        // verify the required parameter 'security_role_id' is set
        if ($security_role_id === null || (is_array($security_role_id) && count($security_role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $security_role_id when calling apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPost'
            );
        }

        // verify the required parameter 'security_permission_id' is set
        if ($security_permission_id === null || (is_array($security_permission_id) && count($security_permission_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $security_permission_id when calling apiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPost'
            );
        }




        $resourcePath = '/api/v2/SecurityService/Roles/{securityRoleId}/Permissions/{securityPermissionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $api_version,
            'api-version', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_version !== null) {
            $headerParams['x-api-version'] = ObjectSerializer::toHeaderValue($x_api_version);
        }

        // path params
        if ($security_role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'securityRoleId' . '}',
                ObjectSerializer::toPathValue($security_role_id),
                $resourcePath
            );
        }
        // path params
        if ($security_permission_id !== null) {
            $resourcePath = str_replace(
                '{' . 'securityPermissionId' . '}',
                ObjectSerializer::toPathValue($security_permission_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdPut
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $security_role_id security_role_id (required)
     * @param  string $api_version api_version (optional)
     * @param  string $x_api_version x_api_version (optional)
     * @param  \OpenAPI\Client\Model\SecurityRoleUpdateDto $security_role_update_dto security_role_update_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdPut($tenant_id, $security_role_id, $api_version = null, $x_api_version = null, $security_role_update_dto = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPut'][0])
    {
        list($response) = $this->apiV2SecurityServiceRolesSecurityRoleIdPutWithHttpInfo($tenant_id, $security_role_id, $api_version, $x_api_version, $security_role_update_dto, $contentType);
        return $response;
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdPutWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  \OpenAPI\Client\Model\SecurityRoleUpdateDto $security_role_update_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\ErrorEnvelope|\OpenAPI\Client\Model\EmptyEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdPutWithHttpInfo($tenant_id, $security_role_id, $api_version = null, $x_api_version = null, $security_role_update_dto = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPut'][0])
    {
        $request = $this->apiV2SecurityServiceRolesSecurityRoleIdPutRequest($tenant_id, $security_role_id, $api_version, $x_api_version, $security_role_update_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\EmptyEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmptyEnvelope' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmptyEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmptyEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdPutAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  \OpenAPI\Client\Model\SecurityRoleUpdateDto $security_role_update_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdPutAsync($tenant_id, $security_role_id, $api_version = null, $x_api_version = null, $security_role_update_dto = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPut'][0])
    {
        return $this->apiV2SecurityServiceRolesSecurityRoleIdPutAsyncWithHttpInfo($tenant_id, $security_role_id, $api_version, $x_api_version, $security_role_update_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SecurityServiceRolesSecurityRoleIdPutAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  \OpenAPI\Client\Model\SecurityRoleUpdateDto $security_role_update_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdPutAsyncWithHttpInfo($tenant_id, $security_role_id, $api_version = null, $x_api_version = null, $security_role_update_dto = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmptyEnvelope';
        $request = $this->apiV2SecurityServiceRolesSecurityRoleIdPutRequest($tenant_id, $security_role_id, $api_version, $x_api_version, $security_role_update_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SecurityServiceRolesSecurityRoleIdPut'
     *
     * @param  string $tenant_id (required)
     * @param  string $security_role_id (required)
     * @param  string $api_version (optional)
     * @param  string $x_api_version (optional)
     * @param  \OpenAPI\Client\Model\SecurityRoleUpdateDto $security_role_update_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SecurityServiceRolesSecurityRoleIdPutRequest($tenant_id, $security_role_id, $api_version = null, $x_api_version = null, $security_role_update_dto = null, string $contentType = self::contentTypes['apiV2SecurityServiceRolesSecurityRoleIdPut'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling apiV2SecurityServiceRolesSecurityRoleIdPut'
            );
        }

        // verify the required parameter 'security_role_id' is set
        if ($security_role_id === null || (is_array($security_role_id) && count($security_role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $security_role_id when calling apiV2SecurityServiceRolesSecurityRoleIdPut'
            );
        }





        $resourcePath = '/api/v2/SecurityService/Roles/{securityRoleId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $api_version,
            'api-version', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_version !== null) {
            $headerParams['x-api-version'] = ObjectSerializer::toHeaderValue($x_api_version);
        }

        // path params
        if ($security_role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'securityRoleId' . '}',
                ObjectSerializer::toPathValue($security_role_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($security_role_update_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($security_role_update_dto));
            } else {
                $httpBody = $security_role_update_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
