<?php
/**
 * SupportEntitlementCreateDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SupportService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SupportEntitlementCreateDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SupportEntitlementCreateDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SupportEntitlementCreateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'timestamp' => '\DateTime',
        'title' => 'string',
        'description' => 'string',
        'start_date_time' => '\DateTime',
        'end_date_time' => '\DateTime',
        'next_invoice_date_time' => '\DateTime',
        'code' => 'string',
        'signature' => 'string',
        'quantity' => 'int',
        'repetitions' => 'int',
        'charge_attempts' => 'int',
        'free_trial_in_days' => 'int',
        'grace_period_in_days' => 'int',
        'custom_renewal_period' => 'int',
        'enable_automatic_renew' => 'bool',
        'enable_pro_rate_billing' => 'bool',
        'enable_usage_threshold' => 'bool',
        'enable_automatic_disable' => 'bool',
        'enable_automatic_payments' => 'bool',
        'usage_threshold' => 'int',
        'data' => 'string',
        'data_label' => 'string',
        'data1' => 'string',
        'data1_label' => 'string',
        'data2' => 'string',
        'data2_label' => 'string',
        'data3' => 'string',
        'data3_label' => 'string',
        'data4' => 'string',
        'data4_label' => 'string',
        'data5' => 'string',
        'data5_label' => 'string',
        'data6' => 'string',
        'data6_label' => 'string',
        'data7' => 'string',
        'data7_label' => 'string',
        'data8' => 'string',
        'data8_label' => 'string',
        'data9' => 'string',
        'data9_label' => 'string',
        'account_holder_id' => 'string',
        'individual_id' => 'string',
        'organization_id' => 'string',
        'receiver_business_id' => 'string',
        'business_id' => 'string',
        'business_profile_record_id' => 'string',
        'payment_token_id' => 'string',
        'wallet_account_id' => 'string',
        'security_certificate_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'timestamp' => 'date-time',
        'title' => null,
        'description' => null,
        'start_date_time' => 'date-time',
        'end_date_time' => 'date-time',
        'next_invoice_date_time' => 'date-time',
        'code' => null,
        'signature' => null,
        'quantity' => 'int32',
        'repetitions' => 'int32',
        'charge_attempts' => 'int32',
        'free_trial_in_days' => 'int32',
        'grace_period_in_days' => 'int32',
        'custom_renewal_period' => 'int32',
        'enable_automatic_renew' => null,
        'enable_pro_rate_billing' => null,
        'enable_usage_threshold' => null,
        'enable_automatic_disable' => null,
        'enable_automatic_payments' => null,
        'usage_threshold' => 'int32',
        'data' => null,
        'data_label' => null,
        'data1' => null,
        'data1_label' => null,
        'data2' => null,
        'data2_label' => null,
        'data3' => null,
        'data3_label' => null,
        'data4' => null,
        'data4_label' => null,
        'data5' => null,
        'data5_label' => null,
        'data6' => null,
        'data6_label' => null,
        'data7' => null,
        'data7_label' => null,
        'data8' => null,
        'data8_label' => null,
        'data9' => null,
        'data9_label' => null,
        'account_holder_id' => null,
        'individual_id' => null,
        'organization_id' => null,
        'receiver_business_id' => null,
        'business_id' => null,
        'business_profile_record_id' => null,
        'payment_token_id' => null,
        'wallet_account_id' => null,
        'security_certificate_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'timestamp' => false,
        'title' => true,
        'description' => true,
        'start_date_time' => false,
        'end_date_time' => false,
        'next_invoice_date_time' => false,
        'code' => true,
        'signature' => true,
        'quantity' => false,
        'repetitions' => false,
        'charge_attempts' => false,
        'free_trial_in_days' => false,
        'grace_period_in_days' => false,
        'custom_renewal_period' => false,
        'enable_automatic_renew' => false,
        'enable_pro_rate_billing' => false,
        'enable_usage_threshold' => false,
        'enable_automatic_disable' => false,
        'enable_automatic_payments' => false,
        'usage_threshold' => false,
        'data' => true,
        'data_label' => true,
        'data1' => true,
        'data1_label' => true,
        'data2' => true,
        'data2_label' => true,
        'data3' => true,
        'data3_label' => true,
        'data4' => true,
        'data4_label' => true,
        'data5' => true,
        'data5_label' => true,
        'data6' => true,
        'data6_label' => true,
        'data7' => true,
        'data7_label' => true,
        'data8' => true,
        'data8_label' => true,
        'data9' => true,
        'data9_label' => true,
        'account_holder_id' => true,
        'individual_id' => true,
        'organization_id' => true,
        'receiver_business_id' => true,
        'business_id' => true,
        'business_profile_record_id' => true,
        'payment_token_id' => true,
        'wallet_account_id' => true,
        'security_certificate_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'timestamp' => 'timestamp',
        'title' => 'title',
        'description' => 'description',
        'start_date_time' => 'startDateTime',
        'end_date_time' => 'endDateTime',
        'next_invoice_date_time' => 'nextInvoiceDateTime',
        'code' => 'code',
        'signature' => 'signature',
        'quantity' => 'quantity',
        'repetitions' => 'repetitions',
        'charge_attempts' => 'chargeAttempts',
        'free_trial_in_days' => 'freeTrialInDays',
        'grace_period_in_days' => 'gracePeriodInDays',
        'custom_renewal_period' => 'customRenewalPeriod',
        'enable_automatic_renew' => 'enableAutomaticRenew',
        'enable_pro_rate_billing' => 'enableProRateBilling',
        'enable_usage_threshold' => 'enableUsageThreshold',
        'enable_automatic_disable' => 'enableAutomaticDisable',
        'enable_automatic_payments' => 'enableAutomaticPayments',
        'usage_threshold' => 'usageThreshold',
        'data' => 'data',
        'data_label' => 'dataLabel',
        'data1' => 'data1',
        'data1_label' => 'data1Label',
        'data2' => 'data2',
        'data2_label' => 'data2Label',
        'data3' => 'data3',
        'data3_label' => 'data3Label',
        'data4' => 'data4',
        'data4_label' => 'data4Label',
        'data5' => 'data5',
        'data5_label' => 'data5Label',
        'data6' => 'data6',
        'data6_label' => 'data6Label',
        'data7' => 'data7',
        'data7_label' => 'data7Label',
        'data8' => 'data8',
        'data8_label' => 'data8Label',
        'data9' => 'data9',
        'data9_label' => 'data9Label',
        'account_holder_id' => 'accountHolderID',
        'individual_id' => 'individualID',
        'organization_id' => 'organizationID',
        'receiver_business_id' => 'receiverBusinessID',
        'business_id' => 'businessID',
        'business_profile_record_id' => 'businessProfileRecordID',
        'payment_token_id' => 'paymentTokenID',
        'wallet_account_id' => 'walletAccountID',
        'security_certificate_id' => 'securityCertificateID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'timestamp' => 'setTimestamp',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'start_date_time' => 'setStartDateTime',
        'end_date_time' => 'setEndDateTime',
        'next_invoice_date_time' => 'setNextInvoiceDateTime',
        'code' => 'setCode',
        'signature' => 'setSignature',
        'quantity' => 'setQuantity',
        'repetitions' => 'setRepetitions',
        'charge_attempts' => 'setChargeAttempts',
        'free_trial_in_days' => 'setFreeTrialInDays',
        'grace_period_in_days' => 'setGracePeriodInDays',
        'custom_renewal_period' => 'setCustomRenewalPeriod',
        'enable_automatic_renew' => 'setEnableAutomaticRenew',
        'enable_pro_rate_billing' => 'setEnableProRateBilling',
        'enable_usage_threshold' => 'setEnableUsageThreshold',
        'enable_automatic_disable' => 'setEnableAutomaticDisable',
        'enable_automatic_payments' => 'setEnableAutomaticPayments',
        'usage_threshold' => 'setUsageThreshold',
        'data' => 'setData',
        'data_label' => 'setDataLabel',
        'data1' => 'setData1',
        'data1_label' => 'setData1Label',
        'data2' => 'setData2',
        'data2_label' => 'setData2Label',
        'data3' => 'setData3',
        'data3_label' => 'setData3Label',
        'data4' => 'setData4',
        'data4_label' => 'setData4Label',
        'data5' => 'setData5',
        'data5_label' => 'setData5Label',
        'data6' => 'setData6',
        'data6_label' => 'setData6Label',
        'data7' => 'setData7',
        'data7_label' => 'setData7Label',
        'data8' => 'setData8',
        'data8_label' => 'setData8Label',
        'data9' => 'setData9',
        'data9_label' => 'setData9Label',
        'account_holder_id' => 'setAccountHolderId',
        'individual_id' => 'setIndividualId',
        'organization_id' => 'setOrganizationId',
        'receiver_business_id' => 'setReceiverBusinessId',
        'business_id' => 'setBusinessId',
        'business_profile_record_id' => 'setBusinessProfileRecordId',
        'payment_token_id' => 'setPaymentTokenId',
        'wallet_account_id' => 'setWalletAccountId',
        'security_certificate_id' => 'setSecurityCertificateId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'timestamp' => 'getTimestamp',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'start_date_time' => 'getStartDateTime',
        'end_date_time' => 'getEndDateTime',
        'next_invoice_date_time' => 'getNextInvoiceDateTime',
        'code' => 'getCode',
        'signature' => 'getSignature',
        'quantity' => 'getQuantity',
        'repetitions' => 'getRepetitions',
        'charge_attempts' => 'getChargeAttempts',
        'free_trial_in_days' => 'getFreeTrialInDays',
        'grace_period_in_days' => 'getGracePeriodInDays',
        'custom_renewal_period' => 'getCustomRenewalPeriod',
        'enable_automatic_renew' => 'getEnableAutomaticRenew',
        'enable_pro_rate_billing' => 'getEnableProRateBilling',
        'enable_usage_threshold' => 'getEnableUsageThreshold',
        'enable_automatic_disable' => 'getEnableAutomaticDisable',
        'enable_automatic_payments' => 'getEnableAutomaticPayments',
        'usage_threshold' => 'getUsageThreshold',
        'data' => 'getData',
        'data_label' => 'getDataLabel',
        'data1' => 'getData1',
        'data1_label' => 'getData1Label',
        'data2' => 'getData2',
        'data2_label' => 'getData2Label',
        'data3' => 'getData3',
        'data3_label' => 'getData3Label',
        'data4' => 'getData4',
        'data4_label' => 'getData4Label',
        'data5' => 'getData5',
        'data5_label' => 'getData5Label',
        'data6' => 'getData6',
        'data6_label' => 'getData6Label',
        'data7' => 'getData7',
        'data7_label' => 'getData7Label',
        'data8' => 'getData8',
        'data8_label' => 'getData8Label',
        'data9' => 'getData9',
        'data9_label' => 'getData9Label',
        'account_holder_id' => 'getAccountHolderId',
        'individual_id' => 'getIndividualId',
        'organization_id' => 'getOrganizationId',
        'receiver_business_id' => 'getReceiverBusinessId',
        'business_id' => 'getBusinessId',
        'business_profile_record_id' => 'getBusinessProfileRecordId',
        'payment_token_id' => 'getPaymentTokenId',
        'wallet_account_id' => 'getWalletAccountId',
        'security_certificate_id' => 'getSecurityCertificateId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('start_date_time', $data ?? [], null);
        $this->setIfExists('end_date_time', $data ?? [], null);
        $this->setIfExists('next_invoice_date_time', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('signature', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('repetitions', $data ?? [], null);
        $this->setIfExists('charge_attempts', $data ?? [], null);
        $this->setIfExists('free_trial_in_days', $data ?? [], null);
        $this->setIfExists('grace_period_in_days', $data ?? [], null);
        $this->setIfExists('custom_renewal_period', $data ?? [], null);
        $this->setIfExists('enable_automatic_renew', $data ?? [], null);
        $this->setIfExists('enable_pro_rate_billing', $data ?? [], null);
        $this->setIfExists('enable_usage_threshold', $data ?? [], null);
        $this->setIfExists('enable_automatic_disable', $data ?? [], null);
        $this->setIfExists('enable_automatic_payments', $data ?? [], null);
        $this->setIfExists('usage_threshold', $data ?? [], null);
        $this->setIfExists('data', $data ?? [], null);
        $this->setIfExists('data_label', $data ?? [], null);
        $this->setIfExists('data1', $data ?? [], null);
        $this->setIfExists('data1_label', $data ?? [], null);
        $this->setIfExists('data2', $data ?? [], null);
        $this->setIfExists('data2_label', $data ?? [], null);
        $this->setIfExists('data3', $data ?? [], null);
        $this->setIfExists('data3_label', $data ?? [], null);
        $this->setIfExists('data4', $data ?? [], null);
        $this->setIfExists('data4_label', $data ?? [], null);
        $this->setIfExists('data5', $data ?? [], null);
        $this->setIfExists('data5_label', $data ?? [], null);
        $this->setIfExists('data6', $data ?? [], null);
        $this->setIfExists('data6_label', $data ?? [], null);
        $this->setIfExists('data7', $data ?? [], null);
        $this->setIfExists('data7_label', $data ?? [], null);
        $this->setIfExists('data8', $data ?? [], null);
        $this->setIfExists('data8_label', $data ?? [], null);
        $this->setIfExists('data9', $data ?? [], null);
        $this->setIfExists('data9_label', $data ?? [], null);
        $this->setIfExists('account_holder_id', $data ?? [], null);
        $this->setIfExists('individual_id', $data ?? [], null);
        $this->setIfExists('organization_id', $data ?? [], null);
        $this->setIfExists('receiver_business_id', $data ?? [], null);
        $this->setIfExists('business_id', $data ?? [], null);
        $this->setIfExists('business_profile_record_id', $data ?? [], null);
        $this->setIfExists('payment_token_id', $data ?? [], null);
        $this->setIfExists('wallet_account_id', $data ?? [], null);
        $this->setIfExists('security_certificate_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 255)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) < 0)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 1000)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 0)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($title) && (mb_strlen($title) > 255)) {
            throw new \InvalidArgumentException('invalid length for $title when calling SupportEntitlementCreateDto., must be smaller than or equal to 255.');
        }
        if (!is_null($title) && (mb_strlen($title) < 0)) {
            throw new \InvalidArgumentException('invalid length for $title when calling SupportEntitlementCreateDto., must be bigger than or equal to 0.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($description) && (mb_strlen($description) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $description when calling SupportEntitlementCreateDto., must be smaller than or equal to 1000.');
        }
        if (!is_null($description) && (mb_strlen($description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $description when calling SupportEntitlementCreateDto., must be bigger than or equal to 0.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets start_date_time
     *
     * @return \DateTime|null
     */
    public function getStartDateTime()
    {
        return $this->container['start_date_time'];
    }

    /**
     * Sets start_date_time
     *
     * @param \DateTime|null $start_date_time start_date_time
     *
     * @return self
     */
    public function setStartDateTime($start_date_time)
    {
        if (is_null($start_date_time)) {
            throw new \InvalidArgumentException('non-nullable start_date_time cannot be null');
        }
        $this->container['start_date_time'] = $start_date_time;

        return $this;
    }

    /**
     * Gets end_date_time
     *
     * @return \DateTime|null
     */
    public function getEndDateTime()
    {
        return $this->container['end_date_time'];
    }

    /**
     * Sets end_date_time
     *
     * @param \DateTime|null $end_date_time end_date_time
     *
     * @return self
     */
    public function setEndDateTime($end_date_time)
    {
        if (is_null($end_date_time)) {
            throw new \InvalidArgumentException('non-nullable end_date_time cannot be null');
        }
        $this->container['end_date_time'] = $end_date_time;

        return $this;
    }

    /**
     * Gets next_invoice_date_time
     *
     * @return \DateTime|null
     */
    public function getNextInvoiceDateTime()
    {
        return $this->container['next_invoice_date_time'];
    }

    /**
     * Sets next_invoice_date_time
     *
     * @param \DateTime|null $next_invoice_date_time next_invoice_date_time
     *
     * @return self
     */
    public function setNextInvoiceDateTime($next_invoice_date_time)
    {
        if (is_null($next_invoice_date_time)) {
            throw new \InvalidArgumentException('non-nullable next_invoice_date_time cannot be null');
        }
        $this->container['next_invoice_date_time'] = $next_invoice_date_time;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            array_push($this->openAPINullablesSetToNull, 'code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return string|null
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param string|null $signature signature
     *
     * @return self
     */
    public function setSignature($signature)
    {
        if (is_null($signature)) {
            array_push($this->openAPINullablesSetToNull, 'signature');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('signature', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets repetitions
     *
     * @return int|null
     */
    public function getRepetitions()
    {
        return $this->container['repetitions'];
    }

    /**
     * Sets repetitions
     *
     * @param int|null $repetitions repetitions
     *
     * @return self
     */
    public function setRepetitions($repetitions)
    {
        if (is_null($repetitions)) {
            throw new \InvalidArgumentException('non-nullable repetitions cannot be null');
        }
        $this->container['repetitions'] = $repetitions;

        return $this;
    }

    /**
     * Gets charge_attempts
     *
     * @return int|null
     */
    public function getChargeAttempts()
    {
        return $this->container['charge_attempts'];
    }

    /**
     * Sets charge_attempts
     *
     * @param int|null $charge_attempts charge_attempts
     *
     * @return self
     */
    public function setChargeAttempts($charge_attempts)
    {
        if (is_null($charge_attempts)) {
            throw new \InvalidArgumentException('non-nullable charge_attempts cannot be null');
        }
        $this->container['charge_attempts'] = $charge_attempts;

        return $this;
    }

    /**
     * Gets free_trial_in_days
     *
     * @return int|null
     */
    public function getFreeTrialInDays()
    {
        return $this->container['free_trial_in_days'];
    }

    /**
     * Sets free_trial_in_days
     *
     * @param int|null $free_trial_in_days free_trial_in_days
     *
     * @return self
     */
    public function setFreeTrialInDays($free_trial_in_days)
    {
        if (is_null($free_trial_in_days)) {
            throw new \InvalidArgumentException('non-nullable free_trial_in_days cannot be null');
        }
        $this->container['free_trial_in_days'] = $free_trial_in_days;

        return $this;
    }

    /**
     * Gets grace_period_in_days
     *
     * @return int|null
     */
    public function getGracePeriodInDays()
    {
        return $this->container['grace_period_in_days'];
    }

    /**
     * Sets grace_period_in_days
     *
     * @param int|null $grace_period_in_days grace_period_in_days
     *
     * @return self
     */
    public function setGracePeriodInDays($grace_period_in_days)
    {
        if (is_null($grace_period_in_days)) {
            throw new \InvalidArgumentException('non-nullable grace_period_in_days cannot be null');
        }
        $this->container['grace_period_in_days'] = $grace_period_in_days;

        return $this;
    }

    /**
     * Gets custom_renewal_period
     *
     * @return int|null
     */
    public function getCustomRenewalPeriod()
    {
        return $this->container['custom_renewal_period'];
    }

    /**
     * Sets custom_renewal_period
     *
     * @param int|null $custom_renewal_period custom_renewal_period
     *
     * @return self
     */
    public function setCustomRenewalPeriod($custom_renewal_period)
    {
        if (is_null($custom_renewal_period)) {
            throw new \InvalidArgumentException('non-nullable custom_renewal_period cannot be null');
        }
        $this->container['custom_renewal_period'] = $custom_renewal_period;

        return $this;
    }

    /**
     * Gets enable_automatic_renew
     *
     * @return bool|null
     */
    public function getEnableAutomaticRenew()
    {
        return $this->container['enable_automatic_renew'];
    }

    /**
     * Sets enable_automatic_renew
     *
     * @param bool|null $enable_automatic_renew enable_automatic_renew
     *
     * @return self
     */
    public function setEnableAutomaticRenew($enable_automatic_renew)
    {
        if (is_null($enable_automatic_renew)) {
            throw new \InvalidArgumentException('non-nullable enable_automatic_renew cannot be null');
        }
        $this->container['enable_automatic_renew'] = $enable_automatic_renew;

        return $this;
    }

    /**
     * Gets enable_pro_rate_billing
     *
     * @return bool|null
     */
    public function getEnableProRateBilling()
    {
        return $this->container['enable_pro_rate_billing'];
    }

    /**
     * Sets enable_pro_rate_billing
     *
     * @param bool|null $enable_pro_rate_billing enable_pro_rate_billing
     *
     * @return self
     */
    public function setEnableProRateBilling($enable_pro_rate_billing)
    {
        if (is_null($enable_pro_rate_billing)) {
            throw new \InvalidArgumentException('non-nullable enable_pro_rate_billing cannot be null');
        }
        $this->container['enable_pro_rate_billing'] = $enable_pro_rate_billing;

        return $this;
    }

    /**
     * Gets enable_usage_threshold
     *
     * @return bool|null
     */
    public function getEnableUsageThreshold()
    {
        return $this->container['enable_usage_threshold'];
    }

    /**
     * Sets enable_usage_threshold
     *
     * @param bool|null $enable_usage_threshold enable_usage_threshold
     *
     * @return self
     */
    public function setEnableUsageThreshold($enable_usage_threshold)
    {
        if (is_null($enable_usage_threshold)) {
            throw new \InvalidArgumentException('non-nullable enable_usage_threshold cannot be null');
        }
        $this->container['enable_usage_threshold'] = $enable_usage_threshold;

        return $this;
    }

    /**
     * Gets enable_automatic_disable
     *
     * @return bool|null
     */
    public function getEnableAutomaticDisable()
    {
        return $this->container['enable_automatic_disable'];
    }

    /**
     * Sets enable_automatic_disable
     *
     * @param bool|null $enable_automatic_disable enable_automatic_disable
     *
     * @return self
     */
    public function setEnableAutomaticDisable($enable_automatic_disable)
    {
        if (is_null($enable_automatic_disable)) {
            throw new \InvalidArgumentException('non-nullable enable_automatic_disable cannot be null');
        }
        $this->container['enable_automatic_disable'] = $enable_automatic_disable;

        return $this;
    }

    /**
     * Gets enable_automatic_payments
     *
     * @return bool|null
     */
    public function getEnableAutomaticPayments()
    {
        return $this->container['enable_automatic_payments'];
    }

    /**
     * Sets enable_automatic_payments
     *
     * @param bool|null $enable_automatic_payments enable_automatic_payments
     *
     * @return self
     */
    public function setEnableAutomaticPayments($enable_automatic_payments)
    {
        if (is_null($enable_automatic_payments)) {
            throw new \InvalidArgumentException('non-nullable enable_automatic_payments cannot be null');
        }
        $this->container['enable_automatic_payments'] = $enable_automatic_payments;

        return $this;
    }

    /**
     * Gets usage_threshold
     *
     * @return int|null
     */
    public function getUsageThreshold()
    {
        return $this->container['usage_threshold'];
    }

    /**
     * Sets usage_threshold
     *
     * @param int|null $usage_threshold usage_threshold
     *
     * @return self
     */
    public function setUsageThreshold($usage_threshold)
    {
        if (is_null($usage_threshold)) {
            throw new \InvalidArgumentException('non-nullable usage_threshold cannot be null');
        }
        $this->container['usage_threshold'] = $usage_threshold;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data data
     *
     * @return self
     */
    public function setData($data)
    {
        if (is_null($data)) {
            array_push($this->openAPINullablesSetToNull, 'data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets data_label
     *
     * @return string|null
     */
    public function getDataLabel()
    {
        return $this->container['data_label'];
    }

    /**
     * Sets data_label
     *
     * @param string|null $data_label data_label
     *
     * @return self
     */
    public function setDataLabel($data_label)
    {
        if (is_null($data_label)) {
            array_push($this->openAPINullablesSetToNull, 'data_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_label'] = $data_label;

        return $this;
    }

    /**
     * Gets data1
     *
     * @return string|null
     */
    public function getData1()
    {
        return $this->container['data1'];
    }

    /**
     * Sets data1
     *
     * @param string|null $data1 data1
     *
     * @return self
     */
    public function setData1($data1)
    {
        if (is_null($data1)) {
            array_push($this->openAPINullablesSetToNull, 'data1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data1'] = $data1;

        return $this;
    }

    /**
     * Gets data1_label
     *
     * @return string|null
     */
    public function getData1Label()
    {
        return $this->container['data1_label'];
    }

    /**
     * Sets data1_label
     *
     * @param string|null $data1_label data1_label
     *
     * @return self
     */
    public function setData1Label($data1_label)
    {
        if (is_null($data1_label)) {
            array_push($this->openAPINullablesSetToNull, 'data1_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data1_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data1_label'] = $data1_label;

        return $this;
    }

    /**
     * Gets data2
     *
     * @return string|null
     */
    public function getData2()
    {
        return $this->container['data2'];
    }

    /**
     * Sets data2
     *
     * @param string|null $data2 data2
     *
     * @return self
     */
    public function setData2($data2)
    {
        if (is_null($data2)) {
            array_push($this->openAPINullablesSetToNull, 'data2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data2'] = $data2;

        return $this;
    }

    /**
     * Gets data2_label
     *
     * @return string|null
     */
    public function getData2Label()
    {
        return $this->container['data2_label'];
    }

    /**
     * Sets data2_label
     *
     * @param string|null $data2_label data2_label
     *
     * @return self
     */
    public function setData2Label($data2_label)
    {
        if (is_null($data2_label)) {
            array_push($this->openAPINullablesSetToNull, 'data2_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data2_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data2_label'] = $data2_label;

        return $this;
    }

    /**
     * Gets data3
     *
     * @return string|null
     */
    public function getData3()
    {
        return $this->container['data3'];
    }

    /**
     * Sets data3
     *
     * @param string|null $data3 data3
     *
     * @return self
     */
    public function setData3($data3)
    {
        if (is_null($data3)) {
            array_push($this->openAPINullablesSetToNull, 'data3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data3'] = $data3;

        return $this;
    }

    /**
     * Gets data3_label
     *
     * @return string|null
     */
    public function getData3Label()
    {
        return $this->container['data3_label'];
    }

    /**
     * Sets data3_label
     *
     * @param string|null $data3_label data3_label
     *
     * @return self
     */
    public function setData3Label($data3_label)
    {
        if (is_null($data3_label)) {
            array_push($this->openAPINullablesSetToNull, 'data3_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data3_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data3_label'] = $data3_label;

        return $this;
    }

    /**
     * Gets data4
     *
     * @return string|null
     */
    public function getData4()
    {
        return $this->container['data4'];
    }

    /**
     * Sets data4
     *
     * @param string|null $data4 data4
     *
     * @return self
     */
    public function setData4($data4)
    {
        if (is_null($data4)) {
            array_push($this->openAPINullablesSetToNull, 'data4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data4'] = $data4;

        return $this;
    }

    /**
     * Gets data4_label
     *
     * @return string|null
     */
    public function getData4Label()
    {
        return $this->container['data4_label'];
    }

    /**
     * Sets data4_label
     *
     * @param string|null $data4_label data4_label
     *
     * @return self
     */
    public function setData4Label($data4_label)
    {
        if (is_null($data4_label)) {
            array_push($this->openAPINullablesSetToNull, 'data4_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data4_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data4_label'] = $data4_label;

        return $this;
    }

    /**
     * Gets data5
     *
     * @return string|null
     */
    public function getData5()
    {
        return $this->container['data5'];
    }

    /**
     * Sets data5
     *
     * @param string|null $data5 data5
     *
     * @return self
     */
    public function setData5($data5)
    {
        if (is_null($data5)) {
            array_push($this->openAPINullablesSetToNull, 'data5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data5'] = $data5;

        return $this;
    }

    /**
     * Gets data5_label
     *
     * @return string|null
     */
    public function getData5Label()
    {
        return $this->container['data5_label'];
    }

    /**
     * Sets data5_label
     *
     * @param string|null $data5_label data5_label
     *
     * @return self
     */
    public function setData5Label($data5_label)
    {
        if (is_null($data5_label)) {
            array_push($this->openAPINullablesSetToNull, 'data5_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data5_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data5_label'] = $data5_label;

        return $this;
    }

    /**
     * Gets data6
     *
     * @return string|null
     */
    public function getData6()
    {
        return $this->container['data6'];
    }

    /**
     * Sets data6
     *
     * @param string|null $data6 data6
     *
     * @return self
     */
    public function setData6($data6)
    {
        if (is_null($data6)) {
            array_push($this->openAPINullablesSetToNull, 'data6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data6'] = $data6;

        return $this;
    }

    /**
     * Gets data6_label
     *
     * @return string|null
     */
    public function getData6Label()
    {
        return $this->container['data6_label'];
    }

    /**
     * Sets data6_label
     *
     * @param string|null $data6_label data6_label
     *
     * @return self
     */
    public function setData6Label($data6_label)
    {
        if (is_null($data6_label)) {
            array_push($this->openAPINullablesSetToNull, 'data6_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data6_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data6_label'] = $data6_label;

        return $this;
    }

    /**
     * Gets data7
     *
     * @return string|null
     */
    public function getData7()
    {
        return $this->container['data7'];
    }

    /**
     * Sets data7
     *
     * @param string|null $data7 data7
     *
     * @return self
     */
    public function setData7($data7)
    {
        if (is_null($data7)) {
            array_push($this->openAPINullablesSetToNull, 'data7');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data7', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data7'] = $data7;

        return $this;
    }

    /**
     * Gets data7_label
     *
     * @return string|null
     */
    public function getData7Label()
    {
        return $this->container['data7_label'];
    }

    /**
     * Sets data7_label
     *
     * @param string|null $data7_label data7_label
     *
     * @return self
     */
    public function setData7Label($data7_label)
    {
        if (is_null($data7_label)) {
            array_push($this->openAPINullablesSetToNull, 'data7_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data7_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data7_label'] = $data7_label;

        return $this;
    }

    /**
     * Gets data8
     *
     * @return string|null
     */
    public function getData8()
    {
        return $this->container['data8'];
    }

    /**
     * Sets data8
     *
     * @param string|null $data8 data8
     *
     * @return self
     */
    public function setData8($data8)
    {
        if (is_null($data8)) {
            array_push($this->openAPINullablesSetToNull, 'data8');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data8', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data8'] = $data8;

        return $this;
    }

    /**
     * Gets data8_label
     *
     * @return string|null
     */
    public function getData8Label()
    {
        return $this->container['data8_label'];
    }

    /**
     * Sets data8_label
     *
     * @param string|null $data8_label data8_label
     *
     * @return self
     */
    public function setData8Label($data8_label)
    {
        if (is_null($data8_label)) {
            array_push($this->openAPINullablesSetToNull, 'data8_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data8_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data8_label'] = $data8_label;

        return $this;
    }

    /**
     * Gets data9
     *
     * @return string|null
     */
    public function getData9()
    {
        return $this->container['data9'];
    }

    /**
     * Sets data9
     *
     * @param string|null $data9 data9
     *
     * @return self
     */
    public function setData9($data9)
    {
        if (is_null($data9)) {
            array_push($this->openAPINullablesSetToNull, 'data9');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data9', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data9'] = $data9;

        return $this;
    }

    /**
     * Gets data9_label
     *
     * @return string|null
     */
    public function getData9Label()
    {
        return $this->container['data9_label'];
    }

    /**
     * Sets data9_label
     *
     * @param string|null $data9_label data9_label
     *
     * @return self
     */
    public function setData9Label($data9_label)
    {
        if (is_null($data9_label)) {
            array_push($this->openAPINullablesSetToNull, 'data9_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data9_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data9_label'] = $data9_label;

        return $this;
    }

    /**
     * Gets account_holder_id
     *
     * @return string|null
     */
    public function getAccountHolderId()
    {
        return $this->container['account_holder_id'];
    }

    /**
     * Sets account_holder_id
     *
     * @param string|null $account_holder_id account_holder_id
     *
     * @return self
     */
    public function setAccountHolderId($account_holder_id)
    {
        if (is_null($account_holder_id)) {
            array_push($this->openAPINullablesSetToNull, 'account_holder_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_holder_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['account_holder_id'] = $account_holder_id;

        return $this;
    }

    /**
     * Gets individual_id
     *
     * @return string|null
     */
    public function getIndividualId()
    {
        return $this->container['individual_id'];
    }

    /**
     * Sets individual_id
     *
     * @param string|null $individual_id individual_id
     *
     * @return self
     */
    public function setIndividualId($individual_id)
    {
        if (is_null($individual_id)) {
            array_push($this->openAPINullablesSetToNull, 'individual_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('individual_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['individual_id'] = $individual_id;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return string|null
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param string|null $organization_id organization_id
     *
     * @return self
     */
    public function setOrganizationId($organization_id)
    {
        if (is_null($organization_id)) {
            array_push($this->openAPINullablesSetToNull, 'organization_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets receiver_business_id
     *
     * @return string|null
     */
    public function getReceiverBusinessId()
    {
        return $this->container['receiver_business_id'];
    }

    /**
     * Sets receiver_business_id
     *
     * @param string|null $receiver_business_id receiver_business_id
     *
     * @return self
     */
    public function setReceiverBusinessId($receiver_business_id)
    {
        if (is_null($receiver_business_id)) {
            array_push($this->openAPINullablesSetToNull, 'receiver_business_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('receiver_business_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['receiver_business_id'] = $receiver_business_id;

        return $this;
    }

    /**
     * Gets business_id
     *
     * @return string|null
     */
    public function getBusinessId()
    {
        return $this->container['business_id'];
    }

    /**
     * Sets business_id
     *
     * @param string|null $business_id business_id
     *
     * @return self
     */
    public function setBusinessId($business_id)
    {
        if (is_null($business_id)) {
            array_push($this->openAPINullablesSetToNull, 'business_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_id'] = $business_id;

        return $this;
    }

    /**
     * Gets business_profile_record_id
     *
     * @return string|null
     */
    public function getBusinessProfileRecordId()
    {
        return $this->container['business_profile_record_id'];
    }

    /**
     * Sets business_profile_record_id
     *
     * @param string|null $business_profile_record_id business_profile_record_id
     *
     * @return self
     */
    public function setBusinessProfileRecordId($business_profile_record_id)
    {
        if (is_null($business_profile_record_id)) {
            array_push($this->openAPINullablesSetToNull, 'business_profile_record_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_profile_record_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_profile_record_id'] = $business_profile_record_id;

        return $this;
    }

    /**
     * Gets payment_token_id
     *
     * @return string|null
     */
    public function getPaymentTokenId()
    {
        return $this->container['payment_token_id'];
    }

    /**
     * Sets payment_token_id
     *
     * @param string|null $payment_token_id payment_token_id
     *
     * @return self
     */
    public function setPaymentTokenId($payment_token_id)
    {
        if (is_null($payment_token_id)) {
            array_push($this->openAPINullablesSetToNull, 'payment_token_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_token_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_token_id'] = $payment_token_id;

        return $this;
    }

    /**
     * Gets wallet_account_id
     *
     * @return string|null
     */
    public function getWalletAccountId()
    {
        return $this->container['wallet_account_id'];
    }

    /**
     * Sets wallet_account_id
     *
     * @param string|null $wallet_account_id wallet_account_id
     *
     * @return self
     */
    public function setWalletAccountId($wallet_account_id)
    {
        if (is_null($wallet_account_id)) {
            array_push($this->openAPINullablesSetToNull, 'wallet_account_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('wallet_account_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['wallet_account_id'] = $wallet_account_id;

        return $this;
    }

    /**
     * Gets security_certificate_id
     *
     * @return string|null
     */
    public function getSecurityCertificateId()
    {
        return $this->container['security_certificate_id'];
    }

    /**
     * Sets security_certificate_id
     *
     * @param string|null $security_certificate_id security_certificate_id
     *
     * @return self
     */
    public function setSecurityCertificateId($security_certificate_id)
    {
        if (is_null($security_certificate_id)) {
            array_push($this->openAPINullablesSetToNull, 'security_certificate_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('security_certificate_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['security_certificate_id'] = $security_certificate_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


