<?php
/**
 * SupportRequestAttachmentCreateDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SupportService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SupportRequestAttachmentCreateDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SupportRequestAttachmentCreateDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SupportRequestAttachmentCreateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'timestamp' => '\DateTime',
        'notes' => 'string',
        'title' => 'string',
        'author' => 'string',
        'is_folder' => 'bool',
        'file_name' => 'string',
        'abstract' => 'string',
        'key_words' => 'string',
        'valid_response' => 'bool',
        'parent_file_upload_id' => 'string',
        'file_path' => 'string',
        'file' => '\SplFileObject',
        'business_id' => 'string',
        'business_profile_record_id' => 'string',
        'metadata' => 'string',
        'support_request_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'timestamp' => 'date-time',
        'notes' => null,
        'title' => null,
        'author' => null,
        'is_folder' => null,
        'file_name' => null,
        'abstract' => null,
        'key_words' => null,
        'valid_response' => null,
        'parent_file_upload_id' => null,
        'file_path' => null,
        'file' => 'binary',
        'business_id' => null,
        'business_profile_record_id' => null,
        'metadata' => null,
        'support_request_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'timestamp' => false,
        'notes' => true,
        'title' => true,
        'author' => true,
        'is_folder' => false,
        'file_name' => true,
        'abstract' => true,
        'key_words' => true,
        'valid_response' => false,
        'parent_file_upload_id' => true,
        'file_path' => true,
        'file' => true,
        'business_id' => true,
        'business_profile_record_id' => true,
        'metadata' => true,
        'support_request_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'timestamp' => 'timestamp',
        'notes' => 'notes',
        'title' => 'title',
        'author' => 'author',
        'is_folder' => 'isFolder',
        'file_name' => 'fileName',
        'abstract' => 'abstract',
        'key_words' => 'keyWords',
        'valid_response' => 'validResponse',
        'parent_file_upload_id' => 'parentFileUploadId',
        'file_path' => 'filePath',
        'file' => 'file',
        'business_id' => 'businessID',
        'business_profile_record_id' => 'businessProfileRecordID',
        'metadata' => 'metadata',
        'support_request_id' => 'supportRequestID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'timestamp' => 'setTimestamp',
        'notes' => 'setNotes',
        'title' => 'setTitle',
        'author' => 'setAuthor',
        'is_folder' => 'setIsFolder',
        'file_name' => 'setFileName',
        'abstract' => 'setAbstract',
        'key_words' => 'setKeyWords',
        'valid_response' => 'setValidResponse',
        'parent_file_upload_id' => 'setParentFileUploadId',
        'file_path' => 'setFilePath',
        'file' => 'setFile',
        'business_id' => 'setBusinessId',
        'business_profile_record_id' => 'setBusinessProfileRecordId',
        'metadata' => 'setMetadata',
        'support_request_id' => 'setSupportRequestId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'timestamp' => 'getTimestamp',
        'notes' => 'getNotes',
        'title' => 'getTitle',
        'author' => 'getAuthor',
        'is_folder' => 'getIsFolder',
        'file_name' => 'getFileName',
        'abstract' => 'getAbstract',
        'key_words' => 'getKeyWords',
        'valid_response' => 'getValidResponse',
        'parent_file_upload_id' => 'getParentFileUploadId',
        'file_path' => 'getFilePath',
        'file' => 'getFile',
        'business_id' => 'getBusinessId',
        'business_profile_record_id' => 'getBusinessProfileRecordId',
        'metadata' => 'getMetadata',
        'support_request_id' => 'getSupportRequestId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('author', $data ?? [], null);
        $this->setIfExists('is_folder', $data ?? [], null);
        $this->setIfExists('file_name', $data ?? [], null);
        $this->setIfExists('abstract', $data ?? [], null);
        $this->setIfExists('key_words', $data ?? [], null);
        $this->setIfExists('valid_response', $data ?? [], null);
        $this->setIfExists('parent_file_upload_id', $data ?? [], null);
        $this->setIfExists('file_path', $data ?? [], null);
        $this->setIfExists('file', $data ?? [], null);
        $this->setIfExists('business_id', $data ?? [], null);
        $this->setIfExists('business_profile_record_id', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('support_request_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['business_id']) && (mb_strlen($this->container['business_id']) > 36)) {
            $invalidProperties[] = "invalid value for 'business_id', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['business_id']) && (mb_strlen($this->container['business_id']) < 36)) {
            $invalidProperties[] = "invalid value for 'business_id', the character length must be bigger than or equal to 36.";
        }

        if (!is_null($this->container['business_profile_record_id']) && (mb_strlen($this->container['business_profile_record_id']) > 36)) {
            $invalidProperties[] = "invalid value for 'business_profile_record_id', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['business_profile_record_id']) && (mb_strlen($this->container['business_profile_record_id']) < 36)) {
            $invalidProperties[] = "invalid value for 'business_profile_record_id', the character length must be bigger than or equal to 36.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes notes
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            array_push($this->openAPINullablesSetToNull, 'notes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('notes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets author
     *
     * @return string|null
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string|null $author author
     *
     * @return self
     */
    public function setAuthor($author)
    {
        if (is_null($author)) {
            array_push($this->openAPINullablesSetToNull, 'author');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('author', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets is_folder
     *
     * @return bool|null
     */
    public function getIsFolder()
    {
        return $this->container['is_folder'];
    }

    /**
     * Sets is_folder
     *
     * @param bool|null $is_folder is_folder
     *
     * @return self
     */
    public function setIsFolder($is_folder)
    {
        if (is_null($is_folder)) {
            throw new \InvalidArgumentException('non-nullable is_folder cannot be null');
        }
        $this->container['is_folder'] = $is_folder;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string|null
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string|null $file_name file_name
     *
     * @return self
     */
    public function setFileName($file_name)
    {
        if (is_null($file_name)) {
            array_push($this->openAPINullablesSetToNull, 'file_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('file_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets abstract
     *
     * @return string|null
     */
    public function getAbstract()
    {
        return $this->container['abstract'];
    }

    /**
     * Sets abstract
     *
     * @param string|null $abstract abstract
     *
     * @return self
     */
    public function setAbstract($abstract)
    {
        if (is_null($abstract)) {
            array_push($this->openAPINullablesSetToNull, 'abstract');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('abstract', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['abstract'] = $abstract;

        return $this;
    }

    /**
     * Gets key_words
     *
     * @return string|null
     */
    public function getKeyWords()
    {
        return $this->container['key_words'];
    }

    /**
     * Sets key_words
     *
     * @param string|null $key_words key_words
     *
     * @return self
     */
    public function setKeyWords($key_words)
    {
        if (is_null($key_words)) {
            array_push($this->openAPINullablesSetToNull, 'key_words');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('key_words', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['key_words'] = $key_words;

        return $this;
    }

    /**
     * Gets valid_response
     *
     * @return bool|null
     */
    public function getValidResponse()
    {
        return $this->container['valid_response'];
    }

    /**
     * Sets valid_response
     *
     * @param bool|null $valid_response valid_response
     *
     * @return self
     */
    public function setValidResponse($valid_response)
    {
        if (is_null($valid_response)) {
            throw new \InvalidArgumentException('non-nullable valid_response cannot be null');
        }
        $this->container['valid_response'] = $valid_response;

        return $this;
    }

    /**
     * Gets parent_file_upload_id
     *
     * @return string|null
     */
    public function getParentFileUploadId()
    {
        return $this->container['parent_file_upload_id'];
    }

    /**
     * Sets parent_file_upload_id
     *
     * @param string|null $parent_file_upload_id parent_file_upload_id
     *
     * @return self
     */
    public function setParentFileUploadId($parent_file_upload_id)
    {
        if (is_null($parent_file_upload_id)) {
            array_push($this->openAPINullablesSetToNull, 'parent_file_upload_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_file_upload_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_file_upload_id'] = $parent_file_upload_id;

        return $this;
    }

    /**
     * Gets file_path
     *
     * @return string|null
     */
    public function getFilePath()
    {
        return $this->container['file_path'];
    }

    /**
     * Sets file_path
     *
     * @param string|null $file_path file_path
     *
     * @return self
     */
    public function setFilePath($file_path)
    {
        if (is_null($file_path)) {
            array_push($this->openAPINullablesSetToNull, 'file_path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('file_path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['file_path'] = $file_path;

        return $this;
    }

    /**
     * Gets file
     *
     * @return \SplFileObject|null
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param \SplFileObject|null $file file
     *
     * @return self
     */
    public function setFile($file)
    {
        if (is_null($file)) {
            array_push($this->openAPINullablesSetToNull, 'file');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('file', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['file'] = $file;

        return $this;
    }

    /**
     * Gets business_id
     *
     * @return string|null
     */
    public function getBusinessId()
    {
        return $this->container['business_id'];
    }

    /**
     * Sets business_id
     *
     * @param string|null $business_id business_id
     *
     * @return self
     */
    public function setBusinessId($business_id)
    {
        if (is_null($business_id)) {
            array_push($this->openAPINullablesSetToNull, 'business_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($business_id) && (mb_strlen($business_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $business_id when calling SupportRequestAttachmentCreateDto., must be smaller than or equal to 36.');
        }
        if (!is_null($business_id) && (mb_strlen($business_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $business_id when calling SupportRequestAttachmentCreateDto., must be bigger than or equal to 36.');
        }

        $this->container['business_id'] = $business_id;

        return $this;
    }

    /**
     * Gets business_profile_record_id
     *
     * @return string|null
     */
    public function getBusinessProfileRecordId()
    {
        return $this->container['business_profile_record_id'];
    }

    /**
     * Sets business_profile_record_id
     *
     * @param string|null $business_profile_record_id business_profile_record_id
     *
     * @return self
     */
    public function setBusinessProfileRecordId($business_profile_record_id)
    {
        if (is_null($business_profile_record_id)) {
            array_push($this->openAPINullablesSetToNull, 'business_profile_record_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_profile_record_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($business_profile_record_id) && (mb_strlen($business_profile_record_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $business_profile_record_id when calling SupportRequestAttachmentCreateDto., must be smaller than or equal to 36.');
        }
        if (!is_null($business_profile_record_id) && (mb_strlen($business_profile_record_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $business_profile_record_id when calling SupportRequestAttachmentCreateDto., must be bigger than or equal to 36.');
        }

        $this->container['business_profile_record_id'] = $business_profile_record_id;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets support_request_id
     *
     * @return string|null
     */
    public function getSupportRequestId()
    {
        return $this->container['support_request_id'];
    }

    /**
     * Sets support_request_id
     *
     * @param string|null $support_request_id support_request_id
     *
     * @return self
     */
    public function setSupportRequestId($support_request_id)
    {
        if (is_null($support_request_id)) {
            array_push($this->openAPINullablesSetToNull, 'support_request_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('support_request_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['support_request_id'] = $support_request_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


